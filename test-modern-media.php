<?php
/**
 * Test du syst√®me de m√©dias modernes optimis√©s
 */

require_once __DIR__ . '/bootstrap.php';

use GeeknDragon\Helpers\ModernMediaHelper;

echo "üß™ TEST DU SYST√àME DE M√âDIAS MODERNES\n";
echo str_repeat("=", 60) . "\n\n";

// V√©rifier si les images optimis√©es existent
$testImages = [
    'Acid_recto',
    'Acide_recto', 
    'ClasseEN',
    'logo'
];

echo "üìÅ V√âRIFICATION DES FICHIERS OPTIMIS√âS:\n";
echo str_repeat("-", 50) . "\n";

foreach ($testImages as $image) {
    $hasWebP = ModernMediaHelper::hasOptimizedVersion($image, 'webp');
    $hasPNG = ModernMediaHelper::hasOptimizedVersion($image, 'png');
    $hasAVIF = ModernMediaHelper::hasOptimizedVersion($image, 'avif');
    
    echo sprintf("%-20s : WebP %s | PNG %s | AVIF %s\n", 
        $image,
        $hasWebP ? "‚úÖ" : "‚ùå",
        $hasPNG ? "‚úÖ" : "‚ùå", 
        $hasAVIF ? "‚úÖ" : "‚ùå"
    );
}

echo "\nüé® G√âN√âRATION HTML D'EXEMPLES:\n";
echo str_repeat("-", 50) . "\n";

// Test 1: Image simple
echo "1Ô∏è‚É£ IMAGE SIMPLE RESPONSIVE:\n";
$imageHTML = ModernMediaHelper::renderImage('Acid_recto', 'Carte Acide Recto', [
    'class' => 'test-image',
    'loading' => 'lazy',
    'sizes' => '(max-width: 768px) 100vw, 50vw'
]);
echo htmlspecialchars($imageHTML) . "\n\n";

// Test 2: Carte produit
echo "2Ô∏è‚É£ CARTE PRODUIT:\n";
$productData = [
    'name' => 'Carte Acide',
    'name_en' => 'Acid Card',
    'images' => ['Acid_recto.png']
];
$cardHTML = ModernMediaHelper::renderProductCard($productData, 'fr');
echo htmlspecialchars($cardHTML) . "\n\n";

// Test 3: Galerie compl√®te
echo "3Ô∏è‚É£ GALERIE COMPL√àTE:\n";
$galleryImages = ['Acid_recto.png', 'Acid_verso.png', 'Acide_recto.png'];
$galleryHTML = ModernMediaHelper::renderImageGallery($galleryImages, 'Cartes Acide', [
    'autoplay' => true,
    'autoplay_delay' => 3000
]);
echo "Galerie HTML g√©n√©r√©e (" . strlen($galleryHTML) . " caract√®res)\n";
echo "Contient <picture> : " . (strpos($galleryHTML, '<picture>') !== false ? "‚úÖ" : "‚ùå") . "\n";
echo "Contient WebP : " . (strpos($galleryHTML, 'type="image/webp"') !== false ? "‚úÖ" : "‚ùå") . "\n";
echo "Contient AVIF : " . (strpos($galleryHTML, 'type="image/avif"') !== false ? "‚úÖ" : "‚ùå") . "\n\n";

echo "üîß G√âN√âRATION CSS ET JS:\n";
echo str_repeat("-", 50) . "\n";

$css = ModernMediaHelper::generateModernMediaCSS();
echo "CSS g√©n√©r√© (" . strlen($css) . " caract√®res)\n";
echo "Contient .modern-responsive-image : " . (strpos($css, '.modern-responsive-image') !== false ? "‚úÖ" : "‚ùå") . "\n";
echo "Contient responsive design : " . (strpos($css, '@media') !== false ? "‚úÖ" : "‚ùå") . "\n\n";

echo "üìä STATISTIQUES DES M√âDIAS OPTIMIS√âS:\n";
echo str_repeat("-", 50) . "\n";

$optimizedDir = __DIR__ . '/images/optimized-modern';

if (is_dir($optimizedDir)) {
    $webpCount = count(glob($optimizedDir . '/webp/*.webp'));
    $pngCount = count(glob($optimizedDir . '/png/*.png'));
    $avifCount = count(glob($optimizedDir . '/avif/*.avif'));
    
    echo "üìÅ Dossier optimis√© trouv√©\n";
    echo "   ‚Ä¢ Images WebP: {$webpCount}\n";
    echo "   ‚Ä¢ Images PNG: {$pngCount}\n";
    echo "   ‚Ä¢ Images AVIF: {$avifCount}\n\n";
    
    // Calculer les tailles
    $webpSize = 0;
    $pngSize = 0;
    $avifSize = 0;
    
    foreach (glob($optimizedDir . '/webp/*.webp') as $file) {
        $webpSize += filesize($file);
    }
    foreach (glob($optimizedDir . '/png/*.png') as $file) {
        $pngSize += filesize($file);
    }
    foreach (glob($optimizedDir . '/avif/*.avif') as $file) {
        $avifSize += filesize($file);
    }
    
    echo "üíæ TAILLES OPTIMIS√âES:\n";
    echo "   ‚Ä¢ WebP total: " . formatBytes($webpSize) . "\n";
    echo "   ‚Ä¢ PNG total: " . formatBytes($pngSize) . "\n";
    echo "   ‚Ä¢ AVIF total: " . formatBytes($avifSize) . "\n";
    echo "   ‚Ä¢ Total optimis√©: " . formatBytes($webpSize + $pngSize + $avifSize) . "\n\n";
} else {
    echo "‚ùå Dossier optimis√© non trouv√©\n\n";
}

echo "üöÄ RECOMMANDATIONS D'INT√âGRATION:\n";
echo str_repeat("-", 50) . "\n";
echo "1. Remplacer les <img> par ModernMediaHelper::renderImage()\n";
echo "2. Utiliser renderImageGallery() pour les galeries produit\n";
echo "3. Ajouter le CSS avec generateModernMediaCSS()\n";
echo "4. Tester la compatibilit√© sur diff√©rents navigateurs\n";
echo "5. Configurer le cache pour les nouveaux formats\n\n";

echo "‚úÖ Test du syst√®me de m√©dias modernes termin√©!\n";
echo "\nüì± Le syst√®me WebP/AVIF + PNG fallback est op√©rationnel!\n";

function formatBytes(int $bytes, int $precision = 2): string
{
    if ($bytes === 0) return '0 B';
    
    $units = ['B', 'KB', 'MB', 'GB'];
    $base = 1024;
    $pow = floor(log($bytes) / log($base));
    $pow = min($pow, count($units) - 1);
    
    return round($bytes / pow($base, $pow), $precision) . ' ' . $units[$pow];
}
?>