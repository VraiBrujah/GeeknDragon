<?php
/**
 * Script d'initialisation Snipcart
 * =================================
 * 
 * Ce script pr√©pare l'environnement pour l'int√©gration Snipcart :
 * - Cr√©ation des dossiers n√©cessaires
 * - V√©rification de la configuration
 * - Tests de connectivit√©
 * - G√©n√©ration des fichiers de configuration
 */

// Chemin vers la racine du projet
$projectRoot = dirname(__DIR__);

// Chargement de la configuration
require_once $projectRoot . '/config/snipcart-config.php';

class SnipcartInitializer
{
    private $projectRoot;
    private $config;
    private $errors = [];
    private $warnings = [];

    public function __construct(string $projectRoot)
    {
        $this->projectRoot = $projectRoot;
        $this->config = SnipcartConfig::getConfig();
    }

    /**
     * Ex√©cution compl√®te de l'initialisation
     */
    public function run(): bool
    {
        echo "üêâ Initialisation de l'int√©gration Snipcart - GeeknDragon\n";
        echo "=" . str_repeat("=", 60) . "\n\n";

        // √âtapes d'initialisation
        $this->createDirectories();
        $this->validateConfiguration();
        $this->generateConfigFiles();
        $this->checkPermissions();
        $this->testConnectivity();
        $this->generateJavaScriptConfig();
        
        // Affichage du r√©sum√©
        $this->displaySummary();

        return empty($this->errors);
    }

    /**
     * Cr√©ation des dossiers n√©cessaires
     */
    private function createDirectories(): void
    {
        echo "üìÅ Cr√©ation des dossiers...\n";

        $directories = [
            'logs' => $this->projectRoot . '/logs',
            'api' => $this->projectRoot . '/api',
            'config' => $this->projectRoot . '/config',
            'templates' => $this->projectRoot . '/templates',
            'data' => $this->projectRoot . '/data',
            'scripts' => $this->projectRoot . '/scripts',
        ];

        foreach ($directories as $name => $path) {
            if (!is_dir($path)) {
                if (mkdir($path, 0755, true)) {
                    echo "  ‚úÖ Dossier cr√©√©: {$name}\n";
                } else {
                    $this->errors[] = "Impossible de cr√©er le dossier: {$path}";
                    echo "  ‚ùå Erreur: {$name}\n";
                }
            } else {
                echo "  ‚úÖ Dossier existant: {$name}\n";
            }
        }

        // Cr√©ation du fichier .htaccess pour les logs
        $htaccessPath = $this->projectRoot . '/logs/.htaccess';
        if (!file_exists($htaccessPath)) {
            file_put_contents($htaccessPath, "Order deny,allow\nDeny from all\n");
            echo "  ‚úÖ Protection .htaccess cr√©√©e pour les logs\n";
        }

        echo "\n";
    }

    /**
     * Validation de la configuration
     */
    private function validateConfiguration(): void
    {
        echo "üîß Validation de la configuration...\n";

        $configErrors = SnipcartConfig::validateConfig();
        
        if (empty($configErrors)) {
            echo "  ‚úÖ Configuration valide\n";
        } else {
            foreach ($configErrors as $error) {
                $this->errors[] = $error;
                echo "  ‚ùå {$error}\n";
            }
        }

        // V√©rifications suppl√©mentaires
        $this->validateEnvironmentFile();
        $this->validateProductsFile();

        echo "\n";
    }

    /**
     * Validation du fichier .env
     */
    private function validateEnvironmentFile(): void
    {
        $envFile = $this->projectRoot . '/.env';
        
        if (!file_exists($envFile)) {
            $this->warnings[] = "Fichier .env manquant - cr√©ez-le depuis .env.example";
            echo "  ‚ö†Ô∏è Fichier .env manquant\n";
        } else {
            echo "  ‚úÖ Fichier .env pr√©sent\n";
        }
    }

    /**
     * Validation des donn√©es produits
     */
    private function validateProductsFile(): void
    {
        $productsFile = $this->projectRoot . '/data/products.json';
        
        if (!file_exists($productsFile)) {
            $this->errors[] = "Fichier products.json manquant dans /data/";
            echo "  ‚ùå Fichier products.json manquant\n";
            return;
        }

        $products = json_decode(file_get_contents($productsFile), true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            $this->errors[] = "Fichier products.json invalide: " . json_last_error_msg();
            echo "  ‚ùå Format JSON invalide\n";
            return;
        }

        if (empty($products)) {
            $this->warnings[] = "Aucun produit d√©fini dans products.json";
            echo "  ‚ö†Ô∏è Aucun produit d√©fini\n";
        } else {
            $count = count($products);
            echo "  ‚úÖ {$count} produits trouv√©s\n";
        }
    }

    /**
     * G√©n√©ration des fichiers de configuration
     */
    private function generateConfigFiles(): void
    {
        echo "‚öôÔ∏è G√©n√©ration des fichiers de configuration...\n";

        // Configuration JavaScript pour le frontend
        $jsConfigPath = $this->projectRoot . '/js/snipcart-config-generated.js';
        $jsConfig = SnipcartConfig::generateJavaScriptConfig();
        
        if (file_put_contents($jsConfigPath, $jsConfig)) {
            echo "  ‚úÖ Configuration JS g√©n√©r√©e\n";
        } else {
            $this->errors[] = "Impossible de cr√©er le fichier de configuration JS";
            echo "  ‚ùå Erreur configuration JS\n";
        }

        // Configuration des produits pour Snipcart
        $productsConfigPath = $this->projectRoot . '/data/snipcart-products.json';
        $productsConfig = SnipcartConfig::getProductsForSnipcart();
        
        if (file_put_contents($productsConfigPath, json_encode($productsConfig, JSON_PRETTY_PRINT))) {
            echo "  ‚úÖ Configuration produits g√©n√©r√©e\n";
        } else {
            $this->errors[] = "Impossible de cr√©er le fichier de configuration des produits";
            echo "  ‚ùå Erreur configuration produits\n";
        }

        echo "\n";
    }

    /**
     * V√©rification des permissions
     */
    private function checkPermissions(): void
    {
        echo "üîê V√©rification des permissions...\n";

        $pathsToCheck = [
            'logs' => $this->projectRoot . '/logs',
            'data' => $this->projectRoot . '/data',
            'api' => $this->projectRoot . '/api',
        ];

        foreach ($pathsToCheck as $name => $path) {
            if (is_writable($path)) {
                echo "  ‚úÖ √âcriture autoris√©e: {$name}\n";
            } else {
                $this->warnings[] = "Permissions d'√©criture manquantes: {$path}";
                echo "  ‚ö†Ô∏è Permissions limit√©es: {$name}\n";
            }
        }

        echo "\n";
    }

    /**
     * Test de connectivit√© Snipcart
     */
    private function testConnectivity(): void
    {
        echo "üåê Test de connectivit√© Snipcart...\n";

        // Test avec l'API publique Snipcart
        $testUrl = 'https://cdn.snipcart.com/themes/v3.4.1/default/snipcart.js';
        
        $headers = @get_headers($testUrl);
        if ($headers && strpos($headers[0], '200') !== false) {
            echo "  ‚úÖ Connexion aux CDN Snipcart OK\n";
        } else {
            $this->warnings[] = "Impossible de joindre les CDN Snipcart - v√©rifiez votre connexion";
            echo "  ‚ö†Ô∏è CDN Snipcart inaccessible\n";
        }

        // Test de la configuration API si les cl√©s sont d√©finies
        if ($this->config['api_key'] !== 'pk_test_your_key_here') {
            $this->testSnipcartAPI();
        } else {
            echo "  ‚ö†Ô∏è Tests API ignor√©s (cl√©s par d√©faut)\n";
        }

        echo "\n";
    }

    /**
     * Test de l'API Snipcart
     */
    private function testSnipcartAPI(): void
    {
        $apiUrl = 'https://app.snipcart.com/api/requestvalidation';
        
        $context = stream_context_create([
            'http' => [
                'method' => 'GET',
                'header' => [
                    'Authorization: Basic ' . base64_encode($this->config['secret_key'] . ':'),
                    'Accept: application/json'
                ],
                'timeout' => 10
            ]
        ]);

        $response = @file_get_contents($apiUrl, false, $context);
        
        if ($response !== false) {
            echo "  ‚úÖ API Snipcart accessible\n";
        } else {
            $this->warnings[] = "Test API Snipcart √©chou√© - v√©rifiez vos cl√©s";
            echo "  ‚ö†Ô∏è API Snipcart inaccessible\n";
        }
    }

    /**
     * G√©n√©ration de la configuration JavaScript
     */
    private function generateJavaScriptConfig(): void
    {
        echo "üìù Mise √† jour des fichiers HTML...\n";

        $apiKey = $this->config['api_key'];
        
        // Liste des fichiers HTML √† mettre √† jour
        $htmlFiles = [
            $this->projectRoot . '/index.html',
            $this->projectRoot . '/boutique.html',
        ];

        foreach ($htmlFiles as $file) {
            if (file_exists($file)) {
                $content = file_get_contents($file);
                
                // Remplacer la cl√© API par d√©faut
                $content = str_replace(
                    'pk_test_your_key_here',
                    $apiKey,
                    $content
                );

                if (file_put_contents($file, $content)) {
                    $filename = basename($file);
                    echo "  ‚úÖ Mis √† jour: {$filename}\n";
                } else {
                    $this->warnings[] = "Impossible de mettre √† jour: {$file}";
                    echo "  ‚ö†Ô∏è Erreur mise √† jour: " . basename($file) . "\n";
                }
            }
        }

        echo "\n";
    }

    /**
     * Affichage du r√©sum√© final
     */
    private function displaySummary(): void
    {
        echo "üìã R√©sum√© de l'initialisation\n";
        echo "=" . str_repeat("=", 30) . "\n\n";

        if (empty($this->errors)) {
            echo "üéâ Initialisation r√©ussie !\n\n";
            
            echo "Prochaines √©tapes :\n";
            echo "1. Configurez vos vraies cl√©s Snipcart dans .env\n";
            echo "2. Testez l'int√©gration sur http://localhost:8000/boutique.html\n";
            echo "3. Configurez le webhook dans votre dashboard Snipcart\n";
            echo "4. Testez une commande avec les cartes de test\n\n";
        } else {
            echo "‚ùå Erreurs d√©tect√©es :\n";
            foreach ($this->errors as $error) {
                echo "  ‚Ä¢ {$error}\n";
            }
            echo "\n";
        }

        if (!empty($this->warnings)) {
            echo "‚ö†Ô∏è Avertissements :\n";
            foreach ($this->warnings as $warning) {
                echo "  ‚Ä¢ {$warning}\n";
            }
            echo "\n";
        }

        // Informations de configuration
        echo "üîß Configuration actuelle :\n";
        echo "  ‚Ä¢ Environnement: " . $this->config['environment'] . "\n";
        echo "  ‚Ä¢ Devise: " . $this->config['currency'] . "\n";
        echo "  ‚Ä¢ Langue: " . $this->config['language'] . "\n";
        echo "  ‚Ä¢ Webhook: " . $this->config['webhook_url'] . "\n";
        echo "  ‚Ä¢ Templates: " . $this->config['templates_url'] . "\n\n";

        echo "üêâ GeeknDragon est pr√™t pour l'e-commerce h√©ro√Øque !\n";
    }
}

// Ex√©cution du script si appel√© directement
if (basename(__FILE__) === basename($_SERVER['SCRIPT_NAME'])) {
    $initializer = new SnipcartInitializer($projectRoot);
    $success = $initializer->run();
    
    exit($success ? 0 : 1);
}
?>