class CoinLotOptimizer{constructor(){this.tauxChange={copper:1,silver:10,electrum:50,gold:100,platinum:1e3},this.multiplicateursDisponibles=[1,10,100,1e3,1e4],this.nomsMetaux={fr:{copper:"Cuivre",silver:"Argent",electrum:"Électrum",gold:"Or",platinum:"Platine"},en:{copper:"Copper",silver:"Silver",electrum:"Electrum",gold:"Gold",platinum:"Platinum"}}}getCurrentLang(){return document.documentElement?.lang||"fr"}findOptimalProductCombination(t){if(!t||0===Object.keys(t).length)return[];if(!window.products)return[];const e=this.generateAllProductVariations(),i=this.knapsackOptimize(t,e);return this.formatSolution(i)}generateAllProductVariations(){const t=[];return Object.entries(window.products).forEach(([e,i])=>{i&&"pieces"===i.category&&(i.customizable?this.generateCustomizableVariations(e,i,t):this.generateFixedVariations(e,i,t))}),t}generateCustomizableVariations(t,e,i){const n=e.metals_en||["copper","silver","electrum","gold","platinum"],o=e.multipliers||[1,10,100,1e3,1e4];if("coin-quintessence-metals"===t)o.forEach(o=>{const r={};n.forEach(t=>{r[`${t}_${o}`]=1}),i.push({productId:t,name:e.name,price:e.price,type:"quintessence",multiplier:o,capacity:r,coinsProvided:n.length})});else{Object.values(e.coin_lots)[0];n.forEach(n=>{o.forEach(o=>{if(e.coin_lots[n]){const r={};r[`${n}_${o}`]=e.coin_lots[n],i.push({productId:t,name:e.name,price:e.price,type:"normal",metal:n,multiplier:o,capacity:r,coinsProvided:e.coin_lots[n]})}})})}}generateFixedVariations(t,e,i){const n=e.multipliers||[];if(n.length>0)n.forEach(n=>{const o={};let r=0;e.coin_lots&&Object.entries(e.coin_lots).forEach(([t,e])=>{"number"==typeof e&&e>0&&(o[`${t}_${n}`]=e,r+=e)}),Object.keys(o).length>0&&i.push({productId:t,name:e.name,price:e.price,type:"fixed_multiplier",multiplier:n,capacity:o,coinsProvided:r})});else{const n={};let o=0;e.coin_lots&&Object.entries(e.coin_lots).forEach(([t,e])=>{"number"==typeof e?(n[`${t}_1`]=e,o+=e):"object"==typeof e&&null!==e&&Object.entries(e).forEach(([e,i])=>{i>0&&(n[`${t}_${e}`]=i,o+=i)})}),Object.keys(n).length>0&&i.push({productId:t,name:e.name,price:e.price,type:"fixed_complete",capacity:n,coinsProvided:o})}}knapsackOptimize(t,e){const i=[];this.findBruteForceOptimal(t,e).forEach(t=>i.push(t)),e.forEach(e=>{if(this.canCoverAllNeeds(e,t)){const n=this.calculateRequiredQuantity(e,t),o=e.price*n;i.push({items:[{variation:e,quantity:n}],totalCost:o,type:"single"})}});const n=e.filter(t=>"quintessence"===t.type);this.findQuintessenceCombinations(t,n).forEach(t=>{const e=t.reduce((t,e)=>t+e.variation.price*e.quantity,0);i.push({items:t,totalCost:e,type:"quintessence_multiple"})});if(this.findDecompositionSolutions(t,e).forEach(t=>{i.push({items:t,totalCost:t.reduce((t,e)=>t+e.variation.price*e.quantity,0),type:"decomposition"});t.reduce((t,e)=>t+e.variation.price*e.quantity,0)}),n.forEach(n=>{const o=this.calculateCoverage(n,t,1),r=this.calculateRemainingNeeds(t,o);if(Object.keys(r).length>0){const t=this.findComplementSolution(r,e);if(t){const e=[{variation:n,quantity:1},...t],o=e.reduce((t,e)=>t+e.variation.price*e.quantity,0);i.push({items:e,totalCost:o,type:"combined"})}}}),i.length<3){const n=this.findCustomCoinsSolution(t,e);if(n&&n.length>0){const t=n.reduce((t,e)=>t+e.variation.price*e.quantity,0);i.push({items:n,totalCost:t,type:"custom_fallback"})}}this.findBulkOptimizedSolutions(t,e).forEach(t=>{i.push({items:t,totalCost:t.reduce((t,e)=>t+e.variation.price*e.quantity,0),type:"bulk_optimized"})});const o=i.filter(e=>this.validateSolution(e.items,t)).map(t=>{const i=this.optimizeWithBulkLots(t.items,e),n=this.calculateSolutionCost(i);return{...t,items:i,totalCost:n,type:`${t.type}_bulk_optimized`}});if(o.sort((t,e)=>t.totalCost-e.totalCost),o.length>0){return o[0].items}return[]}canCoverAllNeeds(t,e){for(const[i,n]of Object.entries(e))if(n>0&&(!t.capacity[i]||0===t.capacity[i]))return!1;return!0}calculateRequiredQuantity(t,e){let i=1;for(const[n,o]of Object.entries(e))if(o>0&&t.capacity[n]){const e=Math.ceil(o/t.capacity[n]);i=Math.max(i,e)}return i}calculateCoverage(t,e,i=1){const n={};for(const[o,r]of Object.entries(e)){const e=(t.capacity[o]||0)*i;e>0&&(n[o]=Math.min(r,e))}return n}calculateRemainingNeeds(t,e){const i={};for(const[n,o]of Object.entries(t)){const t=o-(e[n]||0);t>0&&(i[n]=t)}return i}findBruteForceOptimal(t,e){const i=[],n=this.calculateMaxReasonableQuantity(t);if(e.forEach(e=>{for(let o=1;o<=n;o++)if(this.canCoverWithQuantity(e,t,o)){if(this.isWastefulSolution(e,t,o))continue;const n=e.price*o;i.push({items:[{variation:e,quantity:o}],totalCost:n,type:"brute_force_single"})}}),Object.keys(t).length>1&&i.length<5&&this.findBruteForce2Products(t,e,i,n),0===i.length||i.every(t=>t.totalCost>50)){const n=this.createIndividualSolution(t,e);n&&i.push(n)}return i.sort((t,e)=>t.totalCost-e.totalCost)}findBruteForce2Products(t,e,i,n){const o=Math.min(e.length,10);for(let n=0;n<o;n++)for(let r=n+1;r<o;r++){const o=e[n],s=e[r];for(let e=1;e<=3;e++)for(let n=1;n<=3;n++)if(this.canCoverWith2Products(o,e,s,n,t)){const t=o.price*e+s.price*n;i.push({items:[{variation:o,quantity:e},{variation:s,quantity:n}],totalCost:t,type:"brute_force_double"})}}}canCoverWithQuantity(t,e,i){const n={};return Object.entries(t.capacity).forEach(([t,e])=>{n[t]=e*i}),Object.entries(e).every(([t,e])=>e<=(n[t]||0))}isWastefulSolution(t,e,i){if("quintessence"===t.type){const n=Object.keys(e).map(t=>t.split("_")[0]),o=[...new Set(n)];if(o.length<=2)return!0;const r=Object.values(e).reduce((t,e)=>t+e,0);if(10*r<t.price*i)return!0;if(r<=3&&o.length<=2)return!0}const n=Object.values(t.capacity).reduce((t,e)=>t+e*i,0);return(n-Object.values(e).reduce((t,e)=>t+e,0))/n>.7}createIndividualSolution(t,e){const i=[];let n=0;for(const[o,r]of Object.entries(t)){if(r<=0)continue;const[t,s]=o.split("_"),a=e.find(t=>"normal"===t.type&&"coin-custom-single"===t.productId&&1===t.capacity[o]);if(!a)return null;i.push({variation:a,quantity:r}),n+=a.price*r}return 0===i.length?null:{items:i,totalCost:n,type:"individual_fallback"}}canCoverWith2Products(t,e,i,n,o){const r={};return Object.entries(t.capacity).forEach(([t,i])=>{r[t]=(r[t]||0)+i*e}),Object.entries(i.capacity).forEach(([t,e])=>{r[t]=(r[t]||0)+e*n}),Object.entries(o).every(([t,e])=>e<=(r[t]||0))}calculateMaxReasonableQuantity(t){const e=Object.values(t).reduce((t,e)=>t+e,0);return e<=5?8:e<=10?5:e<=20?3:2}findCustomCoinsSolution(t,e){const i=e.filter(t=>"coin-custom-single"===t.productId&&"normal"===t.type),n=[];for(const[e,o]of Object.entries(t)){if(o<=0)continue;const[t,r]=e.split("_"),s=i.find(e=>e.metal===t&&e.multiplier==r);if(!s)return null;n.push({variation:s,quantity:o})}return n.length>0?n:null}findComplementSolution(t,e){return this.findCustomCoinsSolution(t,e)}formatSolution(t){if(!t||0===t.length)return[];const e=[],i=this.getCurrentLang();for(const n of t){const{variation:t}=n;let o=t.name;const r={};if("quintessence"===t.type)o+=` (×${t.multiplier})`,r[`multiplier-${t.productId}`]={role:"multiplier",value:t.multiplier};else if("normal"===t.type&&t.metal&&t.multiplier){o+=` (${this.nomsMetaux[i][t.metal]||t.metal} ×${t.multiplier})`,r[`metal-${t.productId}`]={role:"metal",value:t.metal},r[`multiplier-${t.productId}`]={role:"multiplier",value:t.multiplier}}else"fixed_multiplier"===t.type&&(o+=` (×${t.multiplier})`,r[`multiplier-${t.productId}`]={role:"multiplier",value:t.multiplier});e.push({productId:t.productId,displayName:o,price:t.price,quantity:n.quantity,totalCost:t.price*n.quantity,customFields:r,url:`/${i}/products/${t.productId}/`,image:window.products[t.productId]?.images?.[0]||null,description:window.products[t.productId]?.description||""})}return e}findQuintessenceCombinations(t,e){const i=[],n=this.multiplicateursDisponibles.map(e=>this.identifyQuintessencePattern(t,e)).filter(t=>t.matches>=4);for(let o=0;o<n.length;o++)for(let r=o+1;r<n.length;r++){const s=n[o],a=n[r];if(s.multiplier!==a.multiplier&&s.matches>=4&&a.matches>=4){const n=e.find(t=>t.multiplier===s.multiplier),o=e.find(t=>t.multiplier===a.multiplier);if(n&&o){const e=[{variation:n,quantity:1},{variation:o,quantity:1}],r={...t};e.forEach(t=>{Object.entries(t.variation.capacity).forEach(([t,e])=>{r[t]&&(r[t]=Math.max(0,r[t]-e))})});const s=this.generateAllProductVariations().filter(t=>"normal"===t.type&&"coin-custom-single"===t.productId),a=this.findCustomCoinsSolution(r,s);if(a){const n=[...e,...a];n.reduce((t,e)=>t+e.variation.price*e.quantity,0);this.validateSolution(n,t)&&i.push(n)}}}}for(let n=2;n<=Math.min(3,e.length);n++){this.generateCombinations(e,n).forEach(e=>{const n=this.testQuintessenceCombination(t,e);n&&n.length>0&&i.push(n)})}return i}generateCombinations(t,e){if(1===e)return t.map(t=>[t]);if(e>t.length)return[];const i=[];for(let n=0;n<=t.length-e;n++){this.generateCombinations(t.slice(n+1),e-1).forEach(e=>{i.push([t[n],...e])})}return i}testQuintessenceCombination(t,e){const i={};e.forEach(t=>{Object.entries(t.capacity).forEach(([t,e])=>{i[t]=(i[t]||0)+e})});for(const[e,n]of Object.entries(t))if(n>0&&(!i[e]||i[e]<n))return null;return e.map(t=>({variation:t,quantity:1}))}findDecompositionSolutions(t,e){const i=[],n=(e.filter(t=>"quintessence"===t.type),this.multiplicateursDisponibles.map(e=>this.identifyQuintessencePattern(t,e)).filter(t=>t.matches>=4));for(let o=0;o<n.length;o++){const r=this.buildMultiPatternSolution(t,[n[o]],e);r&&r.length>0&&i.push(r);for(let r=o+1;r<n.length;r++){const s=this.buildMultiPatternSolution(t,[n[o],n[r]],e);s&&s.length>0&&i.push(s);for(let s=r+1;s<n.length;s++){const a=this.buildMultiPatternSolution(t,[n[o],n[r],n[s]],e);a&&a.length>0&&i.push(a)}}}return i}identifyQuintessencePattern(t,e){let i=0;const n=[];return["platinum","gold","electrum","silver","copper"].forEach(o=>{const r=`${o}_${e}`;t[r]&&t[r]>=1&&(i++,n.push(o))}),{multiplier:e,matches:i,matchingMetals:n,isComplete:5===i,isPartial:i>=4&&i<5}}buildMultiPatternSolution(t,e,i){const n=[],o={...t};e.forEach(t=>{if(t.matches>=4){const e=i.find(e=>"quintessence"===e.type&&e.multiplier===t.multiplier);e&&(n.push({variation:e,quantity:1}),Object.entries(e.capacity).forEach(([t,e])=>{o[t]&&(o[t]=Math.max(0,o[t]-e))}))}});const r=i.filter(t=>"normal"===t.type&&"coin-custom-single"===t.productId);return Object.entries(o).forEach(([t,e])=>{if(e>0){const[i,o]=t.split("_"),s=r.find(t=>t.metal===i&&t.multiplier===parseInt(o));s&&n.push({variation:s,quantity:e})}}),n.length>0&&this.validateSolution(n,t)?n:null}validateSolution(t,e){const i={};t.forEach(t=>{t.variation&&t.variation.capacity&&Object.entries(t.variation.capacity).forEach(([e,n])=>{i[e]=(i[e]||0)+n*t.quantity})});let n=!0;const o=[];for(const[t,r]of Object.entries(e))if(r>0){const e=i[t]||0;e<r&&(n=!1,o.push(`${t} (besoin ${r}, couvert ${e})`))}return!!n}findBulkOptimizedSolutions(t,e){const i=[],n=this.groupIdenticalNeeds(t);return Object.entries(n).forEach(([n,o])=>{if(o>=3){const[r,s]=n.split("_"),a=this.findBestBulkSolution(r,parseInt(s),o,e);if(a&&a.length>0){const o={...t};delete o[n];const r=this.findComplementSolution(o,e);r?i.push([...a,...r]):0===Object.keys(o).length&&i.push(a)}}}),i}groupIdenticalNeeds(t){return t}findBestBulkSolution(t,e,i,n){const o=[],r=n.find(i=>"coin-trio-customizable"===i.productId&&i.metal===t&&i.multiplier===e),s=n.find(i=>"coin-septuple-free"===i.productId&&i.metal===t&&i.multiplier===e),a=n.find(i=>"coin-custom-single"===i.productId&&i.metal===t&&i.multiplier===e);if(i>=7&&s){const t=Math.floor(i/7),e=i%7,n=[];if(t>0&&n.push({variation:s,quantity:t}),e>=3&&r){const t=Math.floor(e/3),i=e%3;t>0&&n.push({variation:r,quantity:t}),i>0&&a&&n.push({variation:a,quantity:i})}else e>0&&a&&n.push({variation:a,quantity:e});o.push(n)}if(i>=3&&r){const t=Math.floor(i/3),e=i%3,n=[];t>0&&n.push({variation:r,quantity:t}),e>0&&a&&n.push({variation:a,quantity:e}),o.push(n)}if(a&&o.push([{variation:a,quantity:i}]),o.length>0){const t=o.reduce((t,e)=>e.reduce((t,e)=>t+e.variation.price*e.quantity,0)<t.reduce((t,e)=>t+e.variation.price*e.quantity,0)?e:t);t.reduce((t,e)=>t+e.variation.price*e.quantity,0);return t}return null}optimizeWithBulkLots(t,e){const i={};t.forEach(t=>{const e=`${t.variation.productId}_${t.variation.metal||"none"}_${t.variation.multiplier||"none"}`;i[e]||(i[e]={variation:t.variation,totalQuantity:0,items:[]}),i[e].totalQuantity+=t.quantity,i[e].items.push(t)});const n=[];return Object.values(i).forEach(t=>{const{variation:i,totalQuantity:o}=t;if("coin-custom-single"===i.productId&&o>=3){const{metal:t}=i,{multiplier:r}=i;if(t&&r){const s=this.findBestBulkSolution(t,r,o,e);if(s){if(s.reduce((t,e)=>t+e.variation.price*e.quantity,0)<o*i.price)return void n.push(...s)}}}n.push(...t.items)}),n}calculateSolutionCost(t){return t.reduce((t,e)=>t+e.variation.price*e.quantity,0)}completeWithCustomPieces(t,e){const i=[...t],n=[];if(window.products&&window.products["coin-custom-single"]){const t=window.products["coin-custom-single"],e=t.metals_en||["copper","silver","electrum","gold","platinum"],i=t.multipliers||[1,10,100,1e3,1e4];e.forEach(e=>{i.forEach(i=>{t.coin_lots[e]&&n.push({productId:"coin-custom-single",name:t.name,price:t.price,type:"normal",metal:e,multiplier:i,capacity:{[`${e}_${i}`]:t.coin_lots[e]},coinsProvided:t.coin_lots[e]})})})}return Object.entries(e).forEach(([t,e])=>{if(e>0){const[o,r]=t.split("_"),s=n.find(t=>t.metal===o&&t.multiplier===parseInt(r));s&&i.push({variation:s,quantity:e})}}),i.length>0&&this.validateSolution(i,originalNeeds)?i:null}}window.CoinLotOptimizer=CoinLotOptimizer;