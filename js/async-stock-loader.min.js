class AsyncStockLoader{constructor(t={}){this.apiEndpoint=t.apiEndpoint||"/api/stock.php",this.batchSize=t.batchSize||20,this.debounceDelay=t.debounceDelay||100,this.retryAttempts=t.retryAttempts||2,this.pendingProducts=new Set,this.loadedCache=new Map,this.loadingStates=new Map,this.debounceTimer=null,this.requestInProgress=!1,this.metrics={totalRequests:0,totalProducts:0,cacheHits:0,averageResponseTime:0}}loadStock(t){(Array.isArray(t)?t:[t]).forEach(t=>{this.loadedCache.has(t)||this.pendingProducts.has(t)||this.pendingProducts.add(t)}),this.debouncedProcess()}debouncedProcess(){clearTimeout(this.debounceTimer),this.debounceTimer=setTimeout(()=>{this.processPendingBatch()},this.debounceDelay)}async processPendingBatch(){if(this.requestInProgress||0===this.pendingProducts.size)return;const t=Array.from(this.pendingProducts).slice(0,this.batchSize);t.forEach(t=>this.pendingProducts.delete(t));try{await this.fetchStockBatch(t)}catch(e){t.forEach(t=>this.pendingProducts.add(t))}this.pendingProducts.size>0&&setTimeout(()=>this.processPendingBatch(),50)}async fetchStockBatch(t){if(0===t.length)return;this.requestInProgress=!0;const e=performance.now();t.forEach(t=>{this.loadingStates.set(t,"loading"),this.updateProductUI(t,"loading")});try{const s=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({products:t})});if(!s.ok)throw new Error(`API Error: ${s.status} ${s.statusText}`);const o=await s.json();Object.entries(o).forEach(([t,e])=>{this.loadedCache.set(t,e),this.loadingStates.set(t,"loaded"),this.updateProductUI(t,"loaded",e)});const i=performance.now()-e;this.updateMetrics(t.length,i)}catch(e){throw t.forEach(t=>{this.loadingStates.set(t,"error"),this.updateProductUI(t,"error")}),e}finally{this.requestInProgress=!1}}updateProductUI(t,e,s=null){const o=document.querySelector(`[data-product-id="${t}"]`);if(!o)return;const i=o.querySelector(".stock-loading-indicator"),a=o.querySelector(".stock-unavailable-overlay"),r=o.querySelector('[data-i18n="product.add"]')?.closest("button");switch(o.setAttribute("data-stock-status",e),e){case"loading":i&&(i.style.display="block");break;case"loaded":i&&(i.style.display="none");null===s||s>0?(a&&(a.style.display="none"),r&&(r.disabled=!1,r.classList.remove("opacity-50","cursor-not-allowed")),o.classList.remove("oos")):(a&&(a.style.display="flex"),r&&(r.disabled=!0,r.classList.add("opacity-50","cursor-not-allowed")),o.classList.add("oos"));break;case"error":i&&(i.style.display="none")}}updateMetrics(t,e){this.metrics.totalRequests++,this.metrics.totalProducts+=t,this.metrics.averageResponseTime=(this.metrics.averageResponseTime*(this.metrics.totalRequests-1)+e)/this.metrics.totalRequests}getMetrics(){return{...this.metrics,cacheHitRate:this.loadedCache.size>0?this.metrics.cacheHits/this.loadedCache.size:0}}initAutoLoad(){const t=document.querySelectorAll("[data-product-id]"),e=Array.from(t).map(t=>t.getAttribute("data-product-id"));e.length>0&&this.loadStock(e)}initLazyLoading(){if(!("IntersectionObserver"in window))return void this.initAutoLoad();const t=new IntersectionObserver(t=>{const e=t.filter(t=>t.isIntersecting).map(t=>t.target.getAttribute("data-product-id")).filter(t=>t);e.length>0&&this.loadStock(e)},{rootMargin:"100px",threshold:.1});document.querySelectorAll("[data-product-id]").forEach(e=>{t.observe(e)})}}window.AsyncStockLoader=AsyncStockLoader,window.asyncStockLoader=new AsyncStockLoader({batchSize:20,debounceDelay:100,retryAttempts:2});