/**
 * Script de diagnostic pour d√©boguer l'affichage des promotions Snipcart
 * √Ä ex√©cuter dans la console du navigateur quand le panier est ouvert
 */

console.log('üîç === DIAGNOSTIC PROMOTIONS SNIPCART ===');

// 1. V√©rifier que Snipcart est charg√©
console.log('\n1Ô∏è‚É£ √âtat de Snipcart:');
console.log('window.Snipcart:', !!window.Snipcart);
console.log('window.Snipcart.store:', !!window.Snipcart?.store);
console.log('window.Snipcart.events:', !!window.Snipcart?.events);

// 2. R√©cup√©rer les donn√©es du panier
console.log('\n2Ô∏è‚É£ Donn√©es du panier:');
const cart = window.Snipcart?.store?.getState()?.cart;
if (cart) {
  console.log('cart.discounts:', cart.discounts);
  console.log('Nombre de promotions:', cart.discounts?.length || 0);

  if (cart.discounts && cart.discounts.length > 0) {
    console.log('\nüìä D√©tails des promotions:');
    cart.discounts.forEach((discount, index) => {
      console.log(`\nPromotion ${index + 1}:`);
      console.log('  - name:', discount.name);
      console.log('  - type:', discount.type);
      console.log('  - amount:', discount.amount);
      console.log('  - rate:', discount.rate);
    });
  }
} else {
  console.warn('‚ùå Impossible de r√©cup√©rer les donn√©es du panier');
}

// 3. Trouver la section r√©sum√©
console.log('\n3Ô∏è‚É£ Section r√©sum√© du panier:');
const summarySelectors = [
  '.snipcart-cart-summary',
  '.snipcart-checkout__content--summary',
  '.snipcart-summary',
  '.snipcart__box--summary'
];

let summarySection = null;
for (const selector of summarySelectors) {
  summarySection = document.querySelector(selector);
  if (summarySection) {
    console.log(`‚úÖ Trouv√© avec: ${selector}`);
    break;
  }
}

if (!summarySection) {
  console.warn('‚ùå Section r√©sum√© non trouv√©e');
  console.log('S√©lecteurs test√©s:', summarySelectors);
}

// 4. Lister TOUTES les lignes du r√©sum√©
console.log('\n4Ô∏è‚É£ Toutes les lignes du r√©sum√©:');
const allLines = document.querySelectorAll('.snipcart-cart-summary-item, .snipcart-summary-fees__item, [class*="summary"]');
console.log(`Nombre total de lignes: ${allLines.length}`);

allLines.forEach((line, index) => {
  const text = line.textContent?.trim() || '';
  const computedStyle = window.getComputedStyle(line);
  const display = computedStyle.display;

  console.log(`\nLigne ${index + 1}:`);
  console.log('  Texte:', text.substring(0, 50) + (text.length > 50 ? '...' : ''));
  console.log('  Classe:', line.className);
  console.log('  Display:', display);
  console.log('  data-gd-hidden:', line.getAttribute('data-gd-hidden'));

  if (text.toLowerCase().includes('promo')) {
    console.log('  ‚ö†Ô∏è LIGNE PROMOTIONS TROUV√âE!');
  }
});

// 5. Chercher sp√©cifiquement la ligne "Promotions"
console.log('\n5Ô∏è‚É£ Recherche ligne "Promotions":');
const promoLine = Array.from(allLines).find(line => {
  const text = line.textContent?.toLowerCase() || '';
  return text.includes('promotion') && text.includes('-');
});

if (promoLine) {
  console.log('‚úÖ Ligne "Promotions" trouv√©e:');
  console.log('  Texte complet:', promoLine.textContent);
  console.log('  Classes CSS:', promoLine.className);
  console.log('  Display:', window.getComputedStyle(promoLine).display);
  console.log('  Parent:', promoLine.parentElement?.className);
  console.log('  data-gd-hidden:', promoLine.getAttribute('data-gd-hidden'));

  // Tester le masquage manuellement
  console.log('\nüîß Test de masquage manuel:');
  promoLine.style.display = 'none';
  promoLine.setAttribute('data-gd-hidden', 'true');
  console.log('‚úÖ Ligne masqu√©e manuellement (display: none)');
} else {
  console.warn('‚ùå Ligne "Promotions" non trouv√©e');
}

// 6. V√©rifier les lignes personnalis√©es
console.log('\n6Ô∏è‚É£ Lignes de promotion personnalis√©es (__gd-promo-line):');
const customPromoLines = document.querySelectorAll('.__gd-promo-line');
console.log(`Nombre de lignes personnalis√©es: ${customPromoLines.length}`);

if (customPromoLines.length > 0) {
  customPromoLines.forEach((line, index) => {
    console.log(`\nLigne personnalis√©e ${index + 1}:`);
    console.log('  Texte:', line.textContent);
    console.log('  Display:', window.getComputedStyle(line).display);
  });
} else {
  console.warn('‚ùå Aucune ligne personnalis√©e trouv√©e');
  console.log('La fonction displayPromotionsDynamically() ne s\'est peut-√™tre pas ex√©cut√©e');
}

// 7. V√©rifier que le script custom est charg√©
console.log('\n7Ô∏è‚É£ V√©rification du script custom:');
const scripts = Array.from(document.querySelectorAll('script'));
const snipcartScript = scripts.find(s => s.src?.includes('snipcart.js') || s.src?.includes('snipcart.min.js'));

if (snipcartScript) {
  console.log('‚úÖ Script snipcart trouv√©:', snipcartScript.src);
} else {
  console.warn('‚ùå Script snipcart.js non trouv√© dans la page');
  console.log('Scripts charg√©s:', scripts.map(s => s.src).filter(s => s));
}

// 8. Forcer l'ex√©cution de la fonction
console.log('\n8Ô∏è‚É£ Test d\'ex√©cution forc√©e:');
if (typeof displayPromotionsDynamically === 'function') {
  console.log('‚úÖ Fonction displayPromotionsDynamically() disponible');
  try {
    displayPromotionsDynamically();
    console.log('‚úÖ Fonction ex√©cut√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution:', error);
  }
} else {
  console.warn('‚ùå Fonction displayPromotionsDynamically() non trouv√©e');
  console.log('Le script n\'a peut-√™tre pas √©t√© charg√© correctement');
}

console.log('\nüîç === FIN DU DIAGNOSTIC ===');
console.log('\nPour relancer le diagnostic, rechargez cette page et collez ce script dans la console.');
