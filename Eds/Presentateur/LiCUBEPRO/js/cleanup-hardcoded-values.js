/**
 * SCRIPT DE NETTOYAGE AUTOMATIQUE DES VALEURS HARDCODÃ‰ES
 * =======================================================
 * 
 * Ce script supprime automatiquement TOUTES les valeurs hardcodÃ©es
 * des Ã©lÃ©ments avec data-pricing-value pour que le pricing-manager.js
 * puisse les calculer dynamiquement.
 * 
 * Utilisation: ExÃ©cuter dans la console du navigateur
 */

function cleanupHardcodedValues() {
    console.log('ðŸ§¹ DÃ©marrage du nettoyage automatique des valeurs hardcodÃ©es...');
    
    const elements = document.querySelectorAll('[data-pricing-value]');
    let cleanedCount = 0;
    
    elements.forEach(element => {
        const originalContent = element.textContent || '';
        
        // Liste des patterns Ã  nettoyer
        const patternsToClean = [
            /\d[\d\s,]*\s*\$?\s*(CAD)?/g,  // Nombres avec $ ou CAD
            /\d[\d\s,]*\s*%/g,             // Pourcentages
            /\d[\d\s,]*\+/g,               // Nombres avec +
            /^\d[\d\s,]*$/g                // Nombres purs
        ];
        
        let newContent = originalContent;
        let wasModified = false;
        
        // Nettoyer les patterns
        patternsToClean.forEach(pattern => {
            const before = newContent;
            newContent = newContent.replace(pattern, '').trim();
            if (newContent !== before) wasModified = true;
        });
        
        // Conserver les mots contextuels importants
        const contextualWords = [
            'CAD', ' $', '/mois', '%', '+', 'cycles', 'Ã©conomisÃ©s', 
            'Ã‰CONOMISÃ‰S', 'Ã©conomies', 'Ã‰CONOMIES', 'sur 20 ans',
            'vs', 'par unitÃ©', 'garantis', 'de rÃ©duction', 'moins cher'
        ];
        
        // Si le contenu ne contient que des espaces aprÃ¨s nettoyage,
        // essayer de prÃ©server au moins le contexte
        if (newContent.trim() === '' || /^[\s,$%+-]*$/.test(newContent)) {
            // Chercher des mots contextuels dans le contenu original
            let context = '';
            contextualWords.forEach(word => {
                if (originalContent.includes(word) && !context.includes(word)) {
                    context += word + ' ';
                }
            });
            newContent = context.trim();
            wasModified = true;
        }
        
        // Appliquer les changements
        if (wasModified) {
            element.textContent = newContent;
            cleanedCount++;
            console.log(`âœ… NettoyÃ©: "${originalContent}" â†’ "${newContent}"`);
        }
    });
    
    console.log(`ðŸŽ‰ Nettoyage terminÃ©: ${cleanedCount} Ã©lÃ©ments nettoyÃ©s sur ${elements.length}`);
    
    // DÃ©clencher la mise Ã  jour des prix
    if (window.PricingManager) {
        setTimeout(() => {
            window.PricingManager.updatePrices();
        }, 100);
    }
}

// Lancement automatique
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', cleanupHardcodedValues);
} else {
    cleanupHardcodedValues();
}