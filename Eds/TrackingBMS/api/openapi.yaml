openapi: 3.1.0
info:
  title: TrackingBMS API - Package Premium
  description: |
    API compl√®te pour le syst√®me TrackingBMS - Solution Enterprise Grade
    
    **Fonctionnalit√©s Premium :**
    - Architecture haute disponibilit√© 99.99%
    - Monitoring temps r√©el avanc√©
    - Analytics et Business Intelligence
    - Multi-tenant s√©curis√© avec isolation compl√®te
    - Support 1000+ batteries simultan√©es
    
    **Modules Couverts :**
    - üß† Core (Orchestrateur)
    - üîí Auth & ACL (S√©curit√©)
    - üîã BMS Connector (Interfaces BMS)
    - üìä Data Processor (Traitement temps r√©el)
    - üóÑÔ∏è Database Manager (Multi-tenant)
    - üíª Web Interface (Dashboard)
    - üë• Client Manager (Gestion clients)
    - üìà Analytics BI (Business Intelligence)
    
    **APIs BMS Int√©gr√©es :**
    - üîã DalyBMS (UART/CAN/RS485 - Principal)
    - ü¶ä foxBMS (API REST + WebSocket - Legacy)
    - üåû Libre Solar BMS (ThingSet Protocol - Legacy)
    - üåø Green-BMS (CAN Bus interface - Legacy)
    
    **Communications Support√©es :**
    - üì° √âmetteurs multi-protocoles (Bluetooth/WiFi/GPRS)
    - üîå Connexion directe (proximit√©)
    - ‚òÅÔ∏è Serveur centralis√© (web/mobile)
  
  version: '1.0.0'
  contact:
    name: EDS Qu√©bec - TrackingBMS Team
    email: support@edsquebec.com
    url: https://trackingbms.edsquebec.com
  license:
    name: Proprietary
    url: https://edsquebec.com/license
  termsOfService: https://edsquebec.com/terms

servers:
  - url: https://trackingbms.edsquebec.com/api/v1
    description: Production server (HostPapa)
  - url: https://staging.trackingbms.edsquebec.com/api/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # === CORE MODULE ENDPOINTS ===
  /core/health:
    get:
      tags: [Core]
      summary: Syst√®me Health Check
      description: |
        V√©rifie l'√©tat de sant√© global du syst√®me et de tous les modules.
        
        **Incluant :**
        - Status de chaque module
        - M√©triques de performance
        - Connectivit√© base de donn√©es
        - Status des APIs BMS
        - Alertes syst√®me actives
      operationId: getCoreHealth
      responses:
        '200':
          description: √âtat de sant√© du syst√®me
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'
              example:
                status: 'healthy'
                timestamp: '2025-09-01T10:30:00Z'
                uptime: 86400
                modules:
                  core: { status: 'healthy', response_time: 12 }
                  auth: { status: 'healthy', response_time: 8 }
                  bms_connector: { status: 'healthy', response_time: 45 }
                databases:
                  core: { status: 'healthy', connections: 5 }
                  clients: 12
                performance:
                  cpu_usage: 15.2
                  memory_usage: 45.8
                  disk_usage: 32.1
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /core/services:
    get:
      tags: [Core]
      summary: Liste des services actifs
      description: Retourne la liste de tous les modules/services et leur √©tat
      operationId: getCoreServices
      responses:
        '200':
          description: Liste des services
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceStatus'

  /core/config/{module}:
    get:
      tags: [Core]
      summary: Configuration d'un module
      parameters:
        - $ref: '#/components/parameters/ModuleName'
      responses:
        '200':
          description: Configuration du module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleConfig'

    put:
      tags: [Core]
      summary: Mettre √† jour configuration module
      parameters:
        - $ref: '#/components/parameters/ModuleName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleConfig'
      responses:
        '200':
          description: Configuration mise √† jour
        '400':
          $ref: '#/components/responses/BadRequest'

  # === AUTH & ACL ENDPOINTS ===
  /auth/login:
    post:
      tags: [Authentication]
      summary: Connexion utilisateur
      description: |
        Authentification utilisateur avec support multi-tenant.
        
        **Fonctionnalit√©s Premium :**
        - Support SSO (Single Sign-On)
        - Authentification multi-facteurs (2FA)
        - Sessions distribu√©es haute disponibilit√©
        - Audit complet des connexions
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, client_id]
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@edsquebec.com"
                password:
                  type: string
                  format: password
                  example: "SecurePass123!"
                client_id:
                  type: string
                  example: "edsquebec_batteries"
                remember_me:
                  type: boolean
                  default: false
                two_factor_code:
                  type: string
                  description: "Code 2FA si activ√©"
                  example: "123456"
      responses:
        '200':
          description: Connexion r√©ussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: "JWT Token d'acc√®s"
                  refresh_token:
                    type: string
                    description: "Token de rafra√Æchissement"
                  expires_in:
                    type: integer
                    description: "Dur√©e de validit√© en secondes"
                    example: 3600
                  user:
                    $ref: '#/components/schemas/User'
                  permissions:
                    type: array
                    items:
                      type: string
                    example: ["batteries.read", "batteries.write", "alerts.manage"]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Renouveler token d'acc√®s
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token renouvel√©
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  expires_in:
                    type: integer

  /auth/logout:
    post:
      tags: [Authentication]
      summary: D√©connexion utilisateur
      description: Invalide le token d'acc√®s et de rafra√Æchissement
      responses:
        '200':
          description: D√©connexion r√©ussie
        '401':
          $ref: '#/components/responses/Unauthorized'

  # === BMS CONNECTOR ENDPOINTS ===
  /bms/types:
    get:
      tags: [BMS]
      summary: Types BMS support√©s
      description: |
        Liste des types de BMS support√©s par le syst√®me.
        
        **Types Support√©s :**
        - foxBMS (API REST + WebSocket)
        - Libre Solar BMS (ThingSet Protocol)
        - Green-BMS (CAN Bus)
      responses:
        '200':
          description: Liste des types BMS
          content:
            application/json:
              schema:
                type: object
                properties:
                  bms_types:
                    type: array
                    items:
                      $ref: '#/components/schemas/BMSType'
              example:
                bms_types:
                  - id: "foxbms"
                    name: "foxBMS"
                    description: "Plateforme BMS open source avanc√©e"
                    protocols: ["REST", "WebSocket", "CAN"]
                    version: "1.6.0"
                    status: "active"
                  - id: "libre_solar"
                    name: "Libre Solar BMS"
                    description: "BMS avec protocol ThingSet JSON"
                    protocols: ["ThingSet", "JSON", "MQTT"]
                    version: "0.10.0"
                    status: "active"

  /bms/connect:
    post:
      tags: [BMS]
      summary: Connecter un nouveau BMS
      description: |
        √âtablit une connexion avec un syst√®me BMS sp√©cifique.
        
        **Fonctionnalit√©s Premium :**
        - Auto-discovery des BMS sur le r√©seau
        - Configuration automatique des protocoles
        - Tests de connectivit√© int√©gr√©s
        - Monitoring continu de la connexion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BMSConnectionRequest'
      responses:
        '201':
          description: BMS connect√© avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BMSConnection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: BMS d√©j√† connect√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bms/{bms_id}/status:
    get:
      tags: [BMS]
      summary: Statut connexion BMS
      parameters:
        - $ref: '#/components/parameters/BMSId'
      responses:
        '200':
          description: Statut du BMS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BMSStatus'

  /bms/{bms_id}/data:
    get:
      tags: [BMS]
      summary: Donn√©es temps r√©el BMS
      description: |
        R√©cup√®re les donn√©es temps r√©el d'un BMS sp√©cifique.
        
        **Donn√©es Incluses :**
        - Tensions (pack et cellules)
        - Courants (charge/d√©charge)
        - Temp√©ratures (cellules et ambiante)
        - √âtats (SOC, SOH, cycles)
        - Alertes et protections
      parameters:
        - $ref: '#/components/parameters/BMSId'
        - name: include_cells
          in: query
          schema:
            type: boolean
            default: false
          description: "Inclure les donn√©es d√©taill√©es des cellules"
      responses:
        '200':
          description: Donn√©es temps r√©el du BMS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BMSRealtimeData'

  /bms/{bms_id}/data/history:
    get:
      tags: [BMS]
      summary: Historique des donn√©es BMS
      description: |
        R√©cup√®re l'historique des donn√©es d'un BMS avec agr√©gation configurable.
        
        **Fonctionnalit√©s Premium :**
        - Agr√©gation intelligente (minute, heure, jour, semaine, mois)
        - Compression avanc√©e des donn√©es historiques
        - Export haute performance pour gros volumes
        - Analytics pr√©dictives int√©gr√©es
      parameters:
        - $ref: '#/components/parameters/BMSId'
        - $ref: '#/components/parameters/DateFrom'
        - $ref: '#/components/parameters/DateTo'
        - $ref: '#/components/parameters/Aggregation'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Donn√©es historiques
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BMSHistoricalData'

  # === ENDPOINTS SP√âCIFIQUES DALYBMS ===
  /bms/cells/{id}:
    get:
      tags: [BMS Data]
      summary: Tensions cellules individuelles DalyBMS
      description: |
        R√©cup√®re les tensions d√©taill√©es de chaque cellule pour un BMS DalyBMS.
        
        **Protocoles support√©s :**
        - UART (0x90 - Individual Cell Voltage)
        - CAN Bus (ID 0x18964000)
        - Modbus (Registres 0x1000-0x100F)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/BMSId'
      responses:
        '200':
          description: Tensions cellules
          content:
            application/json:
              schema:
                type: object
                properties:
                  bms_id:
                    type: string
                    example: "daly_001"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
                  protocol:
                    type: string
                    enum: [uart, can, modbus]
                    example: "uart"
                  cell_count:
                    type: integer
                    minimum: 1
                    maximum: 48
                    example: 16
                  cells:
                    type: array
                    items:
                      type: object
                      properties:
                        cell_number:
                          type: integer
                          minimum: 1
                          example: 1
                        voltage:
                          type: number
                          format: float
                          minimum: 0
                          maximum: 5.0
                          example: 3.289
                          description: "Tension en Volts"
                        status:
                          type: string
                          enum: [normal, low, high, fault]
                          example: "normal"
                  statistics:
                    type: object
                    properties:
                      min_voltage:
                        type: number
                        format: float
                        example: 3.251
                      max_voltage:
                        type: number
                        format: float
                        example: 3.295
                      average_voltage:
                        type: number
                        format: float
                        example: 3.274
                      imbalance:
                        type: number
                        format: float
                        example: 0.044
                        description: "D√©s√©quilibre max en Volts"

  /bms/temperatures/{id}:
    get:
      tags: [BMS Data]
      summary: Temp√©ratures sondes DalyBMS
      description: |
        R√©cup√®re les temp√©ratures de toutes les sondes pour un BMS DalyBMS.
        
        **Protocoles support√©s :**
        - UART (0x91 - Temperature)
        - CAN Bus (ID 0x18964001)
        - Modbus (Registres 0x1010-0x101F)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/BMSId'
      responses:
        '200':
          description: Temp√©ratures sondes
          content:
            application/json:
              schema:
                type: object
                properties:
                  bms_id:
                    type: string
                    example: "daly_001"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
                  protocol:
                    type: string
                    enum: [uart, can, modbus]
                    example: "uart"
                  probe_count:
                    type: integer
                    minimum: 1
                    maximum: 16
                    example: 4
                  temperatures:
                    type: array
                    items:
                      type: object
                      properties:
                        probe_number:
                          type: integer
                          minimum: 1
                          example: 1
                        temperature:
                          type: number
                          format: float
                          minimum: -40
                          maximum: 100
                          example: 23.5
                          description: "Temp√©rature en Celsius"
                        location:
                          type: string
                          enum: [battery_pack, mosfet, environment, aux]
                          example: "battery_pack"
                        status:
                          type: string
                          enum: [normal, low, high, fault, disconnected]
                          example: "normal"
                  statistics:
                    type: object
                    properties:
                      min_temperature:
                        type: number
                        format: float
                        example: 22.1
                      max_temperature:
                        type: number
                        format: float
                        example: 24.8
                      average_temperature:
                        type: number
                        format: float
                        example: 23.4

  /bms/alarms/{id}:
    get:
      tags: [BMS Data]
      summary: √âtats alarmes et protections DalyBMS
      description: |
        R√©cup√®re l'√©tat complet des alarmes et protections pour un BMS DalyBMS.
        
        **Protocoles support√©s :**
        - UART (0x95 - Alarm Status)
        - CAN Bus (ID 0x18964002)
        - Modbus (Registres 0x1020-0x102F)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/BMSId'
      responses:
        '200':
          description: √âtats alarmes
          content:
            application/json:
              schema:
                type: object
                properties:
                  bms_id:
                    type: string
                    example: "daly_001"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
                  protocol:
                    type: string
                    enum: [uart, can, modbus]
                    example: "uart"
                  overall_status:
                    type: string
                    enum: [normal, warning, critical, fault]
                    example: "normal"
                  protection_status:
                    type: object
                    properties:
                      discharge_overcurrent:
                        type: boolean
                        example: false
                      charge_overcurrent:
                        type: boolean
                        example: false
                      cell_overvoltage:
                        type: boolean
                        example: false
                      cell_undervoltage:
                        type: boolean
                        example: false
                      pack_overvoltage:
                        type: boolean
                        example: false
                      pack_undervoltage:
                        type: boolean
                        example: false
                      charge_overtemperature:
                        type: boolean
                        example: false
                      charge_undertemperature:
                        type: boolean
                        example: false
                      discharge_overtemperature:
                        type: boolean
                        example: false
                      discharge_undertemperature:
                        type: boolean
                        example: false
                  mosfet_status:
                    type: object
                    properties:
                      charge_mosfet:
                        type: boolean
                        example: true
                        description: "√âtat MOSFET charge (true = ferm√©)"
                      discharge_mosfet:
                        type: boolean
                        example: true
                        description: "√âtat MOSFET d√©charge (true = ferm√©)"
                  balance_status:
                    type: object
                    properties:
                      balancing_active:
                        type: boolean
                        example: false
                      cells_balancing:
                        type: array
                        items:
                          type: integer
                        example: []
                        description: "Num√©ros des cellules en cours d'√©quilibrage"

  /bms/transmitter/pair:
    post:
      tags: [BMS Communication]
      summary: Pairing √©metteur Bluetooth DalyBMS
      description: |
        Lance le processus de pairing avec un √©metteur Bluetooth DalyBMS.
        
        **Processus :**
        1. Scan Bluetooth actif
        2. Identification √©metteur DalyBMS (pr√©fixe "DALY_")
        3. Tentative de connexion
        4. √âchange cl√©s s√©curisation
        5. Configuration protocole UART
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [device_mac, timeout]
              properties:
                device_mac:
                  type: string
                  pattern: '^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$'
                  example: "AA:BB:CC:DD:EE:FF"
                  description: "Adresse MAC de l'√©metteur"
                timeout:
                  type: integer
                  minimum: 10
                  maximum: 300
                  example: 30
                  description: "Timeout connexion en secondes"
                security_key:
                  type: string
                  minLength: 8
                  maxLength: 32
                  example: "DALY2025"
                  description: "Cl√© s√©curit√© (optionnelle)"
      responses:
        '200':
          description: Pairing r√©ussi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  bms_id:
                    type: string
                    example: "daly_bt_001"
                  device_info:
                    type: object
                    properties:
                      mac_address:
                        type: string
                        example: "AA:BB:CC:DD:EE:FF"
                      device_name:
                        type: string
                        example: "DALY_BMS_16S"
                      protocol_version:
                        type: string
                        example: "v2.1"
                      firmware_version:
                        type: string
                        example: "1.2.3"
                  connection_status:
                    type: string
                    enum: [connected, paired, authenticated]
                    example: "authenticated"

  /bms/transmitters:
    get:
      tags: [BMS Communication]
      summary: Liste √©metteurs d√©couverts
      description: |
        R√©cup√®re la liste de tous les √©metteurs DalyBMS d√©couverts et leur statut.
        
        **Types d'√©metteurs :**
        - Bluetooth (UART-Bluetooth antenna)
        - WiFi (Module ESP32 int√©gr√©)
        - GPRS (Module LTE-M int√©gr√©)
      security:
        - BearerAuth: []
      parameters:
        - name: protocol
          in: query
          schema:
            type: string
            enum: [bluetooth, wifi, gprs, all]
            default: all
        - name: status
          in: query
          schema:
            type: string
            enum: [online, offline, paired, unpaired, all]
            default: all
      responses:
        '200':
          description: Liste √©metteurs
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                    example: 5
                  online_count:
                    type: integer
                    example: 3
                  transmitters:
                    type: array
                    items:
                      type: object
                      properties:
                        bms_id:
                          type: string
                          example: "daly_001"
                        device_mac:
                          type: string
                          example: "AA:BB:CC:DD:EE:FF"
                        protocol:
                          type: string
                          enum: [bluetooth, wifi, gprs]
                          example: "bluetooth"
                        status:
                          type: string
                          enum: [online, offline, pairing, error]
                          example: "online"
                        signal_strength:
                          type: integer
                          minimum: -100
                          maximum: 0
                          example: -45
                          description: "Force signal en dBm"
                        last_seen:
                          type: string
                          format: date-time
                          example: "2025-01-15T10:29:45Z"
                        battery_level:
                          type: integer
                          minimum: 0
                          maximum: 100
                          example: 85
                          description: "Niveau batterie √©metteur (%)"
                        location:
                          type: object
                          properties:
                            latitude:
                              type: number
                              format: double
                              example: 45.5017
                            longitude:
                              type: number
                              format: double
                              example: -73.5673
                            accuracy:
                              type: number
                              format: float
                              example: 10.5
                              description: "Pr√©cision GPS en m√®tres"

  # === CLIENT MANAGEMENT ENDPOINTS ===
  /clients:
    get:
      tags: [Client Management]
      summary: Liste des clients (Admin seulement)
      description: |
        R√©cup√®re la liste de tous les clients du syst√®me.
        
        **Acc√®s :** Super Admin uniquement
        
        **Fonctionnalit√©s Premium :**
        - Filtrage avanc√© multi-crit√®res
        - Pagination haute performance
        - Statistiques clients int√©gr√©es
        - Export d√©taill√©
      security:
        - BearerAuth: [admin]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, suspended, trial, archived]
        - name: industry
          in: query
          schema:
            type: string
            enum: [batteries, solar, industrial, residential]
      responses:
        '200':
          description: Liste des clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags: [Client Management]
      summary: Cr√©er un nouveau client
      security:
        - BearerAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateRequest'
      responses:
        '201':
          description: Client cr√©√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  /clients/{client_id}:
    get:
      tags: [Client Management]
      summary: D√©tails d'un client
      parameters:
        - $ref: '#/components/parameters/ClientId'
      responses:
        '200':
          description: D√©tails du client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDetails'

  # === BATTERIES MANAGEMENT ===
  /batteries:
    get:
      tags: [Batteries]
      summary: Liste des batteries du client
      description: |
        R√©cup√®re la liste des batteries accessibles par l'utilisateur courant.
        
        **Filtrage Avanc√© :**
        - Par type de batterie
        - Par lieu d'installation
        - Par statut op√©rationnel
        - Par niveau de sant√© (SOH)
        - Par champs personnalis√©s
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: battery_type_id
          in: query
          schema:
            type: integer
          description: "Filtrer par type de batterie"
        - name: location_id
          in: query
          schema:
            type: integer
          description: "Filtrer par lieu"
        - name: status
          in: query
          schema:
            type: string
            enum: [commissioning, operational, maintenance, fault, decommissioned]
        - name: health_min
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 100
          description: "SOH minimum (%)"
        - name: search
          in: query
          schema:
            type: string
          description: "Recherche textuelle globale"
      responses:
        '200':
          description: Liste des batteries
          content:
            application/json:
              schema:
                type: object
                properties:
                  batteries:
                    type: array
                    items:
                      $ref: '#/components/schemas/Battery'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  filters_applied:
                    type: object
                    description: "Filtres appliqu√©s pour cette requ√™te"

    post:
      tags: [Batteries]
      summary: Ajouter une nouvelle batterie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatteryCreateRequest'
      responses:
        '201':
          description: Batterie cr√©√©e
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battery'

  /batteries/{battery_id}:
    get:
      tags: [Batteries]
      summary: D√©tails d'une batterie
      parameters:
        - $ref: '#/components/parameters/BatteryId'
        - name: include
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [realtime_data, recent_alerts, custom_fields, maintenance_history]
          description: "Donn√©es additionnelles √† inclure"
      responses:
        '200':
          description: D√©tails de la batterie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatteryDetails'

  /batteries/{battery_id}/realtime:
    get:
      tags: [Batteries]
      summary: Donn√©es temps r√©el d'une batterie
      parameters:
        - $ref: '#/components/parameters/BatteryId'
      responses:
        '200':
          description: Donn√©es temps r√©el
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatteryRealtimeData'

  # === ALERTS ENDPOINTS ===
  /alerts:
    get:
      tags: [Alerts]
      summary: Liste des alertes
      description: |
        R√©cup√®re les alertes accessibles par l'utilisateur.
        
        **Fonctionnalit√©s Premium :**
        - Filtrage intelligent multi-crit√®res
        - Alertes pr√©dictives IA
        - Corr√©lation d'alertes
        - Analytics d'alertes avanc√©es
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: severity
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [info, warning, critical, emergency]
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [active, acknowledged, resolved, suppressed]
        - name: battery_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Liste des alertes
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /alerts/{alert_id}/acknowledge:
    post:
      tags: [Alerts]
      summary: Acquitter une alerte
      parameters:
        - $ref: '#/components/parameters/AlertId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
                  description: "Notes d'acquittement"
      responses:
        '200':
          description: Alerte acquitt√©e

  # === ANALYTICS & BI ENDPOINTS (PREMIUM) ===
  /analytics/dashboard:
    get:
      tags: [Analytics BI]
      summary: Dashboard Analytics Principal
      description: |
        **FONCTIONNALIT√â PREMIUM** - Dashboard Business Intelligence avanc√©
        
        **Inclus :**
        - KPIs temps r√©el multi-dimensionnels
        - Analyses pr√©dictives IA
        - Comparaisons historiques intelligentes
        - Alertes business critiques
        - Recommandations automatiques
      responses:
        '200':
          description: Dashboard Analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsDashboard'

  /analytics/predictions:
    get:
      tags: [Analytics BI]
      summary: Analyses Pr√©dictives IA
      description: |
        **FONCTIONNALIT√â PREMIUM** - Intelligence Artificielle Pr√©dictive
        
        **Algorithmes :**
        - Pr√©diction pannes batteries (Machine Learning)
        - Optimisation cycles de charge
        - D√©tection anomalies avanc√©es
        - Recommandations maintenance pr√©dictive
      parameters:
        - name: battery_id
          in: query
          schema:
            type: integer
        - name: prediction_type
          in: query
          schema:
            type: string
            enum: [failure_prediction, performance_optimization, anomaly_detection, maintenance_schedule]
        - name: time_horizon
          in: query
          schema:
            type: string
            enum: [1_week, 1_month, 3_months, 6_months, 1_year]
            default: 1_month
      responses:
        '200':
          description: Analyses pr√©dictives
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictiveAnalytics'

  /analytics/reports:
    get:
      tags: [Analytics BI]
      summary: Rapports Business Intelligence
      description: |
        **FONCTIONNALIT√â PREMIUM** - Rapports BI Avanc√©s
        
        **Types de Rapports :**
        - Performance globale flotte batteries
        - Analyses de co√ªts op√©rationnels
        - Comparaisons benchmarking
        - ROI et indicateurs financiers
        - Rapports conformit√© et audit
      parameters:
        - name: report_type
          in: query
          required: true
          schema:
            type: string
            enum: [performance, cost_analysis, benchmark, roi, compliance]
        - name: period
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly, quarterly, yearly]
            default: monthly
        - $ref: '#/components/parameters/DateFrom'
        - $ref: '#/components/parameters/DateTo'
        - name: format
          in: query
          schema:
            type: string
            enum: [json, pdf, excel, csv]
            default: json
      responses:
        '200':
          description: Rapport g√©n√©r√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessReport'
            application/pdf:
              schema:
                type: string
                format: binary

  # === SUPPORT 24/7 ENDPOINTS (PREMIUM) ===
  /support/tickets:
    get:
      tags: [Support 24/7]
      summary: Tickets de support utilisateur
      description: |
        **FONCTIONNALIT√â PREMIUM** - Support 24/7
        
        **Niveaux de Support :**
        - P1: Critique (r√©ponse < 1h)
        - P2: √âlev√© (r√©ponse < 4h)  
        - P3: Normal (r√©ponse < 24h)
        - P4: Faible (r√©ponse < 72h)
      responses:
        '200':
          description: Liste des tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/SupportTicket'

    post:
      tags: [Support 24/7]
      summary: Cr√©er un ticket de support
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketCreate'
      responses:
        '201':
          description: Ticket cr√©√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'

# === WEBHOOKS (PREMIUM) ===
  /webhooks:
    get:
      tags: [Webhooks]
      summary: Liste des webhooks configur√©s
      description: |
        **FONCTIONNALIT√â PREMIUM** - Webhooks temps r√©el
        
        **√âv√©nements Disponibles :**
        - battery.alert.created
        - battery.status.changed  
        - battery.maintenance.due
        - system.health.degraded
        - prediction.failure.detected
      responses:
        '200':
          description: Liste des webhooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhooks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Webhook'

    post:
      tags: [Webhooks]
      summary: Cr√©er un webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCreate'
      responses:
        '201':
          description: Webhook cr√©√©

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Token obtenu via /auth/login
        
        **Format :** Authorization: Bearer {token}
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        Cl√© API pour acc√®s programmatique
        
        **Format :** X-API-Key: {api_key}

  parameters:
    ModuleName:
      name: module
      in: path
      required: true
      schema:
        type: string
        enum: [core, auth, bms_connector, data_processor, database, web_interface, client_manager, analytics]
      description: "Nom du module syst√®me"

    BMSId:
      name: bms_id
      in: path
      required: true
      schema:
        type: string
      description: "Identifiant unique du BMS"
      example: "foxbms_001"

    ClientId:
      name: client_id
      in: path
      required: true
      schema:
        type: string
      description: "Identifiant unique du client"
      example: "edsquebec_batteries"

    BatteryId:
      name: battery_id
      in: path
      required: true
      schema:
        type: integer
      description: "Identifiant unique de la batterie"
      example: 1

    AlertId:
      name: alert_id
      in: path
      required: true
      schema:
        type: integer
      description: "Identifiant unique de l'alerte"

    DateFrom:
      name: from
      in: query
      schema:
        type: string
        format: date-time
      description: "Date de d√©but (ISO 8601)"
      example: "2025-01-01T00:00:00Z"

    DateTo:
      name: to
      in: query
      schema:
        type: string
        format: date-time
      description: "Date de fin (ISO 8601)"
      example: "2025-01-31T23:59:59Z"

    Aggregation:
      name: aggregation
      in: query
      schema:
        type: string
        enum: [raw, minute, hourly, daily, weekly, monthly]
        default: hourly
      description: "Niveau d'agr√©gation des donn√©es"

    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 50
      description: "Nombre maximum d'√©l√©ments √† retourner"

    Offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: "Nombre d'√©l√©ments √† ignorer"

  responses:
    BadRequest:
      description: Requ√™te invalide
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "bad_request"
            message: "Param√®tres de requ√™te invalides"
            details: { "field": "battery_id", "issue": "required" }

    Unauthorized:
      description: Non autoris√© - Token invalide ou manquant
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Token d'acc√®s invalide ou expir√©"

    Forbidden:
      description: Acc√®s interdit - Permissions insuffisantes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Ressource non trouv√©e
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServiceUnavailable:
      description: Service temporairement indisponible
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "service_unavailable"
            message: "Syst√®me en maintenance programm√©e"
            retry_after: 1800

  schemas:
    # === CORE SCHEMAS ===
    SystemHealth:
      type: object
      required: [status, timestamp, modules]
      properties:
        status:
          type: string
          enum: [healthy, degraded, critical, maintenance]
          description: "√âtat global du syst√®me"
        timestamp:
          type: string
          format: date-time
        uptime:
          type: integer
          description: "Dur√©e de fonctionnement en secondes"
        version:
          type: string
          example: "1.0.0"
        modules:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ModuleHealth'
        databases:
          type: object
          properties:
            core:
              $ref: '#/components/schemas/DatabaseHealth'
            clients:
              type: integer
              description: "Nombre de bases clients actives"
        performance:
          type: object
          properties:
            cpu_usage:
              type: number
              description: "Utilisation CPU (%)"
            memory_usage:
              type: number
              description: "Utilisation m√©moire (%)"
            disk_usage:
              type: number
              description: "Utilisation disque (%)"
            response_time_avg:
              type: number
              description: "Temps de r√©ponse moyen (ms)"

    ModuleHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, warning, error, offline]
        response_time:
          type: number
          description: "Temps de r√©ponse en ms"
        last_check:
          type: string
          format: date-time
        error_count:
          type: integer
          description: "Nombre d'erreurs dans la derni√®re heure"

    DatabaseHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, warning, error]
        connections:
          type: integer
          description: "Nombre de connexions actives"
        response_time:
          type: number
          description: "Temps de r√©ponse moyen (ms)"
        disk_usage:
          type: number
          description: "Utilisation disque (%)"

    ServiceStatus:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        status:
          type: string
          enum: [active, inactive, error]
        started_at:
          type: string
          format: date-time
        endpoints:
          type: array
          items:
            type: string
            format: uri

    ModuleConfig:
      type: object
      properties:
        module:
          type: string
        version:
          type: string
        enabled:
          type: boolean
        settings:
          type: object
          additionalProperties: true
        last_updated:
          type: string
          format: date-time

    # === USER & AUTH SCHEMAS ===
    User:
      type: object
      required: [id, email, first_name, last_name, role]
      properties:
        id:
          type: integer
          example: 1
        uuid:
          type: string
          format: uuid
        email:
          type: string
          format: email
          example: "admin@edsquebec.com"
        first_name:
          type: string
          example: "Jean"
        last_name:
          type: string
          example: "Tremblay"
        role:
          type: string
          enum: [super_admin, admin, operator, viewer, readonly]
        phone:
          type: string
          example: "+1-418-555-0123"
        job_title:
          type: string
          example: "Administrateur Syst√®me"
        department:
          type: string
          example: "IT"
        is_active:
          type: boolean
          default: true
        two_factor_enabled:
          type: boolean
          default: false
        last_login:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    # === CLIENT SCHEMAS ===
    Client:
      type: object
      required: [id, name, company, status]
      properties:
        id:
          type: integer
        uuid:
          type: string
          format: uuid
        name:
          type: string
          example: "EDS Qu√©bec - Batteries"
        company:
          type: string
          example: "EDS Qu√©bec Inc."
        database_name:
          type: string
          example: "client_1_batteries"
        industry_type:
          type: string
          enum: [batteries, solar, industrial, residential]
        status:
          type: string
          enum: [active, suspended, trial, archived]
        subscription_plan:
          type: string
          enum: [free, basic, pro, enterprise]
        max_users:
          type: integer
          default: 10
        max_devices:
          type: integer
          default: 100
        created_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time

    ClientDetails:
      allOf:
        - $ref: '#/components/schemas/Client'
        - type: object
          properties:
            statistics:
              type: object
              properties:
                total_batteries:
                  type: integer
                active_batteries:
                  type: integer
                total_users:
                  type: integer
                storage_used_gb:
                  type: number
            billing_info:
              type: object
              properties:
                next_billing_date:
                  type: string
                  format: date
                monthly_cost:
                  type: number

    ClientCreateRequest:
      type: object
      required: [name, company, industry_type]
      properties:
        name:
          type: string
          maxLength: 255
        company:
          type: string
          maxLength: 255
        industry_type:
          type: string
          enum: [batteries, solar, industrial, residential]
        subscription_plan:
          type: string
          enum: [free, basic, pro, enterprise]
          default: free

    # === BMS SCHEMAS ===
    BMSType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        protocols:
          type: array
          items:
            type: string
        version:
          type: string
        status:
          type: string
          enum: [active, deprecated, experimental]
        documentation_url:
          type: string
          format: uri

    BMSConnectionRequest:
      type: object
      required: [bms_type, connection_config]
      properties:
        bms_type:
          type: string
          enum: [foxbms, libre_solar, green_bms]
        name:
          type: string
          description: "Nom descriptif pour ce BMS"
        connection_config:
          type: object
          properties:
            host:
              type: string
              example: "192.168.1.100"
            port:
              type: integer
              example: 8080
            protocol:
              type: string
              example: "REST"
            authentication:
              type: object
              properties:
                type:
                  type: string
                  enum: [none, basic, token]
                credentials:
                  type: object
        battery_id:
          type: integer
          description: "ID de la batterie associ√©e"

    BMSConnection:
      type: object
      properties:
        id:
          type: string
        bms_type:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [connected, disconnected, error, testing]
        last_data_received:
          type: string
          format: date-time
        connection_quality:
          type: number
          minimum: 0
          maximum: 100
          description: "Qualit√© de connexion (%)"
        created_at:
          type: string
          format: date-time

    BMSStatus:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [connected, disconnected, error, testing]
        last_seen:
          type: string
          format: date-time
        connection_quality:
          type: number
        error_count:
          type: integer
        data_points_today:
          type: integer
        firmware_version:
          type: string

    BMSRealtimeData:
      type: object
      properties:
        bms_id:
          type: string
        timestamp:
          type: string
          format: date-time
        pack_voltage:
          type: number
          description: "Tension du pack (V)"
        pack_current:
          type: number
          description: "Courant du pack (A)"
        pack_power:
          type: number
          description: "Puissance du pack (W)"
        soc_percent:
          type: number
          minimum: 0
          maximum: 100
          description: "√âtat de charge (%)"
        soh_percent:
          type: number
          minimum: 0
          maximum: 100
          description: "√âtat de sant√© (%)"
        temperatures:
          type: array
          items:
            type: number
          description: "Temp√©ratures des cellules (¬∞C)"
        cell_voltages:
          type: array
          items:
            type: number
          description: "Tensions des cellules (V)"
        operation_mode:
          type: string
          enum: [idle, charging, discharging, balancing, fault]
        fault_codes:
          type: array
          items:
            type: string
        warning_codes:
          type: array
          items:
            type: string

    BMSHistoricalData:
      type: object
      properties:
        bms_id:
          type: string
        period_start:
          type: string
          format: date-time
        period_end:
          type: string
          format: date-time
        aggregation:
          type: string
        data_points:
          type: array
          items:
            $ref: '#/components/schemas/BMSDataPoint'
        statistics:
          type: object
          properties:
            avg_soc:
              type: number
            min_soc:
              type: number
            max_soc:
              type: number
            total_energy_charged:
              type: number
            total_energy_discharged:
              type: number
            efficiency:
              type: number

    BMSDataPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        pack_voltage:
          type: number
        pack_current:
          type: number
        soc_percent:
          type: number
        temperatures:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
            avg:
              type: number

    # === BATTERY SCHEMAS ===
    Battery:
      type: object
      required: [id, name, serial_number, battery_type_id, location_id]
      properties:
        id:
          type: integer
          example: 1
        uuid:
          type: string
          format: uuid
        name:
          type: string
          example: "Batterie Principale Site #1"
        serial_number:
          type: string
          example: "BT-2025-001"
        internal_id:
          type: string
          example: "EDS-BAT-001"
        battery_type_id:
          type: integer
        battery_type:
          $ref: '#/components/schemas/BatteryType'
        location_id:
          type: integer
        location:
          $ref: '#/components/schemas/Location'
        bms_id:
          type: string
          example: "foxbms_001"
        status:
          type: string
          enum: [commissioning, operational, maintenance, fault, decommissioned]
        health_score:
          type: number
          minimum: 0
          maximum: 100
          example: 95.5
        installation_date:
          type: string
          format: date
        last_maintenance_date:
          type: string
          format: date
        next_maintenance_date:
          type: string
          format: date
        warranty_end_date:
          type: string
          format: date
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_data_received:
          type: string
          format: date-time

    BatteryDetails:
      allOf:
        - $ref: '#/components/schemas/Battery'
        - type: object
          properties:
            realtime_data:
              $ref: '#/components/schemas/BatteryRealtimeData'
            recent_alerts:
              type: array
              items:
                $ref: '#/components/schemas/Alert'
            custom_fields:
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldValue'
            statistics:
              type: object
              properties:
                total_cycles:
                  type: integer
                total_energy_charged:
                  type: number
                total_energy_discharged:
                  type: number
                average_efficiency:
                  type: number

    BatteryCreateRequest:
      type: object
      required: [name, serial_number, battery_type_id, location_id]
      properties:
        name:
          type: string
          maxLength: 255
        serial_number:
          type: string
          maxLength: 255
        internal_id:
          type: string
          maxLength: 100
        battery_type_id:
          type: integer
        location_id:
          type: integer
        installation_date:
          type: string
          format: date
        warranty_end_date:
          type: string
          format: date

    BatteryType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "LiFePO4 12V 100Ah"
        slug:
          type: string
          example: "lifepo4-12v-100ah"
        chemistry:
          type: string
          enum: [li-ion, lifepo4, ncm, lco, lfp, other]
        nominal_voltage:
          type: number
          example: 12.8
        capacity_ah:
          type: number
          example: 100
        capacity_wh:
          type: number
          example: 1280
        cell_count:
          type: integer
          example: 4
        manufacturer:
          type: string
        model:
          type: string

    Location:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "Site Principal - B√¢timent A"
        slug:
          type: string
        parent_id:
          type: integer
        level:
          type: integer
        path:
          type: string
          example: "/site-principal/batiment-a"
        address:
          type: string
        city:
          type: string
        province:
          type: string
        country:
          type: string
          default: "CA"
        coordinates:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number

    BatteryRealtimeData:
      type: object
      properties:
        battery_id:
          type: integer
        timestamp:
          type: string
          format: date-time
        pack_voltage:
          type: number
        pack_current:
          type: number
        pack_power:
          type: number
        soc_percent:
          type: number
          minimum: 0
          maximum: 100
        soh_percent:
          type: number
          minimum: 0
          maximum: 100
        temperatures:
          type: array
          items:
            type: number
        temp_min:
          type: number
        temp_max:
          type: number
        temp_avg:
          type: number
        cell_voltages:
          type: array
          items:
            type: number
        operation_mode:
          type: string
          enum: [idle, charging, discharging, balancing, fault]
        active_alerts_count:
          type: integer
        data_quality:
          type: string
          enum: [excellent, good, fair, poor, invalid]

    # === CUSTOM FIELDS ===
    CustomFieldValue:
      type: object
      properties:
        field_id:
          type: integer
        field_name:
          type: string
        field_label:
          type: string
        field_type:
          type: string
          enum: [text, number, date, boolean, select, multiselect, textarea]
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array

    # === ALERTS SCHEMAS ===
    Alert:
      type: object
      required: [id, battery_id, severity, category, title, message, status]
      properties:
        id:
          type: integer
        battery_id:
          type: integer
        battery_name:
          type: string
        severity:
          type: string
          enum: [info, warning, critical, emergency]
        category:
          type: string
          enum: [voltage, current, temperature, soc, soh, communication, system]
        alert_code:
          type: string
          example: "TEMP_HIGH_001"
        title:
          type: string
          example: "Temp√©rature √©lev√©e d√©tect√©e"
        message:
          type: string
          example: "La temp√©rature de la cellule 3 a d√©pass√© le seuil de 45¬∞C"
        description:
          type: string
        status:
          type: string
          enum: [active, acknowledged, resolved, suppressed]
        trigger_value:
          type: number
        threshold_value:
          type: number
        current_value:
          type: number
        unit:
          type: string
          example: "¬∞C"
        first_occurrence:
          type: string
          format: date-time
        last_occurrence:
          type: string
          format: date-time
        acknowledged_at:
          type: string
          format: date-time
        acknowledged_by:
          type: integer
        resolved_at:
          type: string
          format: date-time
        resolution_notes:
          type: string
        escalation_level:
          type: integer
          minimum: 0

    # === ANALYTICS & BI SCHEMAS (PREMIUM) ===
    AnalyticsDashboard:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        kpis:
          type: object
          properties:
            total_batteries:
              type: integer
            active_batteries:
              type: integer
            average_health:
              type: number
            total_energy_stored:
              type: number
            active_alerts:
              type: integer
            system_efficiency:
              type: number
        performance_metrics:
          type: object
          properties:
            uptime_percentage:
              type: number
            avg_response_time:
              type: number
            data_quality_score:
              type: number
        trends:
          type: object
          properties:
            health_trend:
              type: string
              enum: [improving, stable, declining]
            usage_trend:
              type: string
              enum: [increasing, stable, decreasing]
            efficiency_trend:
              type: string
              enum: [improving, stable, declining]
        recommendations:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [maintenance, optimization, replacement, upgrade]
              priority:
                type: string
                enum: [low, medium, high, critical]
              title:
                type: string
              description:
                type: string
              estimated_savings:
                type: number

    PredictiveAnalytics:
      type: object
      properties:
        battery_id:
          type: integer
        prediction_type:
          type: string
        time_horizon:
          type: string
        confidence_level:
          type: number
          minimum: 0
          maximum: 100
        predictions:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              predicted_value:
                type: number
              confidence:
                type: number
              factors:
                type: array
                items:
                  type: string
        recommendations:
          type: array
          items:
            type: object
            properties:
              action:
                type: string
              priority:
                type: string
              estimated_impact:
                type: string
              timeline:
                type: string

    BusinessReport:
      type: object
      properties:
        report_id:
          type: string
        report_type:
          type: string
        period:
          type: string
        generated_at:
          type: string
          format: date-time
        summary:
          type: object
          properties:
            total_batteries:
              type: integer
            total_energy_managed:
              type: number
            cost_savings:
              type: number
            efficiency_improvement:
              type: number
        sections:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              charts:
                type: array
                items:
                  type: object
              tables:
                type: array
                items:
                  type: object
              insights:
                type: array
                items:
                  type: string

    # === SUPPORT 24/7 SCHEMAS ===
    SupportTicket:
      type: object
      properties:
        id:
          type: integer
        ticket_number:
          type: string
          example: "TKT-2025-001"
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [P1, P2, P3, P4]
        status:
          type: string
          enum: [open, in_progress, pending_customer, resolved, closed]
        category:
          type: string
          enum: [technical, billing, general, feature_request]
        created_by:
          type: integer
        assigned_to:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        resolved_at:
          type: string
          format: date-time
        sla_breach:
          type: boolean
        attachments:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              url:
                type: string
              uploaded_at:
                type: string
                format: date-time

    SupportTicketCreate:
      type: object
      required: [title, description, priority]
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        priority:
          type: string
          enum: [P1, P2, P3, P4]
        category:
          type: string
          enum: [technical, billing, general, feature_request]
        battery_id:
          type: integer
          description: "ID de la batterie concern√©e (optionnel)"

    # === WEBHOOKS SCHEMAS ===
    Webhook:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        is_active:
          type: boolean
        secret:
          type: string
        last_triggered:
          type: string
          format: date-time
        success_count:
          type: integer
        failure_count:
          type: integer

    WebhookCreate:
      type: object
      required: [name, url, events]
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum:
              - battery.alert.created
              - battery.status.changed
              - battery.maintenance.due
              - system.health.degraded
              - prediction.failure.detected
        secret:
          type: string

    # === COMMON SCHEMAS ===
    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          example: "validation_error"
        message:
          type: string
          example: "Les donn√©es fournies ne sont pas valides"
        details:
          type: object
          additionalProperties: true
        trace_id:
          type: string
          description: "ID de tra√ßage pour le support"
        timestamp:
          type: string
          format: date-time

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "validation_error"
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 50
        total:
          type: integer
          example: 234
        total_pages:
          type: integer
          example: 5
        has_next_page:
          type: boolean
        has_prev_page:
          type: boolean
        next_page_url:
          type: string
          format: uri
        prev_page_url:
          type: string
          format: uri

tags:
  - name: Core
    description: |
      **Module Core - Orchestrateur Central**
      
      Gestion centrale du syst√®me avec service discovery, health monitoring,
      et configuration distribu√©e.
  
  - name: Authentication
    description: |
      **Module Auth & ACL - S√©curit√© Premium**
      
      Authentification multi-tenant avec JWT, 2FA, SSO et permissions granulaires.
      Support Enterprise avec Active Directory et SAML.
  
  - name: BMS
    description: |
      **Module BMS Connector - Interfaces BMS**
      
      Connectivit√© universelle avec foxBMS, Libre Solar BMS et Green-BMS.
      Support temps r√©el haute performance avec auto-discovery.
  
  - name: Batteries
    description: |
      **Gestion Batteries - Fonctionnalit√©s Compl√®tes**
      
      CRUD complet des batteries avec donn√©es temps r√©el, historiques,
      champs personnalis√©s et analytics avanc√©es.
  
  - name: Alerts
    description: |
      **Syst√®me d'Alertes Intelligent**
      
      Alertes temps r√©el avec IA pr√©dictive, corr√©lation d'√©v√©nements,
      escalade automatique et notifications multi-canal.
  
  - name: Analytics BI
    description: |
      **üåü PREMIUM - Business Intelligence Avanc√©e**
      
      Dashboard BI avec analytics pr√©dictives IA, rapports automatis√©s,
      KPIs temps r√©el et recommandations intelligentes.
  
  - name: Support 24/7
    description: |
      **üåü PREMIUM - Support Technique 24/7**
      
      Syst√®me de tickets avec SLA garantis, support critique < 1h,
      escalade automatique et expertise technique d√©di√©e.
  
  - name: Webhooks
    description: |
      **üåü PREMIUM - Int√©grations Webhooks**
      
      Webhooks temps r√©el pour int√©gration syst√®mes tiers,
      √©v√©nements syst√®me et notifications personnalis√©es.
  
  - name: Client Management
    description: |
      **Gestion Multi-Tenant Enterprise**
      
      Administration centralis√©e clients avec isolation compl√®te,
      facturation automatique et analytics par tenant.

externalDocs:
  description: Documentation compl√®te TrackingBMS
  url: https://docs.trackingbms.edsquebec.com