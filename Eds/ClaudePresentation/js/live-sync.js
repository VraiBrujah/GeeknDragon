/**
 * Syst√®me de synchronisation en temps r√©el Li-CUBE PRO‚Ñ¢
 * 
 * R√¥le : Synchroniser automatiquement les modifications entre l'√©diteur et la pr√©sentation
 * Type : Module JavaScript autonome
 * Unit√© : Gestion en temps r√©el des donn√©es
 * Domaine : Communication bidirectionnelle entre pages
 * Formule : sync = √©diteur ‚Üî pr√©sentation via localStorage + √©v√©nements
 * Exemple : modification dans √©diteur ‚Üí mise √† jour imm√©diate pr√©sentation
 */

(function() {
    'use strict';

    /**
     * Configuration du syst√®me de synchronisation
     * 
     * R√¥le : Param√®tres centralis√©s pour la synchronisation temps r√©el
     * Type : Object de configuration
     * Unit√© : Millisecondes pour les d√©lais, bool√©ens pour les options
     * Domaine : 100ms ‚â§ pollInterval ‚â§ 5000ms pour performance optimale
     * Formule : performance = 1 / pollInterval (inversement proportionnel)
     * Exemple : pollInterval=500ms donne 2 v√©rifications/seconde
     */
    const CONFIG = {
        storageKey: 'licubepro-content',           // Cl√© de stockage localStorage
        pollInterval: 500,                         // Intervalle de v√©rification (ms)
        enableDebug: true,                         // Activer les logs de debug
        autoSave: true,                           // Sauvegarde automatique activ√©e
        syncDelay: 100                            // D√©lai avant synchronisation (ms)
    };

    /**
     * √âtat global du syst√®me de synchronisation
     * 
     * R√¥le : Stockage de l'√©tat actuel et des donn√©es de synchronisation
     * Type : Object mutable
     * Unit√© : Timestamps en millisecondes, hash en string
     * Domaine : lastSync ‚â• 0, contentHash peut √™tre null
     * Formule : isOutdated = (currentHash !== lastKnownHash)
     * Exemple : lastSync=1640995200000, contentHash="a1b2c3d4"
     */
    let syncState = {
        isActive: false,                          // √âtat d'activation de la sync
        lastSync: 0,                             // Timestamp de derni√®re synchronisation
        contentHash: null,                       // Hash du contenu pour d√©tecter changements
        pollTimer: null,                         // Timer pour le polling
        isEditor: false                          // Page courante est-elle l'√©diteur?
    };

    /**
     * D√©tection automatique du type de page (√©diteur vs pr√©sentation)
     * 
     * R√¥le : Identifier si la page courante est l'√©diteur ou la pr√©sentation
     * Type : Boolean
     * Unit√© : Sans unit√© (bool√©en)
     * Domaine : true (√©diteur) | false (pr√©sentation)
     * Formule : isEditor = pr√©sence d'√©l√©ments d'√©dition OU URL contenant "edit"
     * Exemple : edit.html ‚Üí true, index.html ‚Üí false
     */
    function detectPageType() {
        const hasEditFields = document.querySelectorAll('.field-input').length > 0;
        const urlContainsEdit = window.location.pathname.includes('edit');
        const hasEditableElements = document.querySelectorAll('.editable').length > 0;
        
        syncState.isEditor = hasEditFields || urlContainsEdit;
        
        if (CONFIG.enableDebug) {
            console.log(`üîç Type de page d√©tect√©: ${syncState.isEditor ? '√âDITEUR' : 'PR√âSENTATION'}`);
            console.log(`   - Champs d'√©dition: ${hasEditFields}`);
            console.log(`   - URL contient 'edit': ${urlContainsEdit}`);
            console.log(`   - √âl√©ments √©ditables: ${hasEditableElements}`);
        }
        
        return syncState.isEditor;
    }

    /**
     * G√©n√©ration d'un hash pour d√©tecter les changements de contenu
     * 
     * R√¥le : Cr√©er une empreinte unique du contenu pour d√©tecter modifications
     * Type : String (hash)
     * Unit√© : Caract√®res hexad√©cimaux
     * Domaine : Hash de 8 caract√®res (exemple: "a1b2c3d4")
     * Formule : hash = simple_hash(JSON.stringify(content))
     * Exemple : {title:"Li-CUBE"} ‚Üí "f4a3b2c1"
     */
    function generateContentHash(content) {
        if (!content || typeof content !== 'object') {
            return '00000000';
        }
        
        const str = JSON.stringify(content, Object.keys(content).sort());
        let hash = 0;
        
        // Algorithme de hash simple mais efficace
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Conversion en 32bit
        }
        
        // Conversion en hexad√©cimal positif
        const hexHash = Math.abs(hash).toString(16).substring(0, 8).padStart(8, '0');
        
        if (CONFIG.enableDebug) {
            console.log(`üìä Hash g√©n√©r√©: ${hexHash} pour ${Object.keys(content).length} champs`);
        }
        
        return hexHash;
    }

    /**
     * R√©cup√©ration du contenu depuis le localStorage
     * 
     * R√¥le : Charger et parser le contenu sauvegard√©
     * Type : Object | null
     * Unit√© : Object avec cl√©s string et valeurs string
     * Domaine : null si aucune donn√©e | Object avec donn√©es valides
     * Formule : content = JSON.parse(localStorage.getItem(key)) || null
     * Exemple : {"hero-title": "Li-CUBE PRO‚Ñ¢", "stat-cycles": "8000+"}
     */
    function getStoredContent() {
        try {
            const stored = localStorage.getItem(CONFIG.storageKey);
            if (!stored) {
                return null;
            }
            
            const content = JSON.parse(stored);
            const fieldCount = Object.keys(content).length;
            
            if (CONFIG.enableDebug && fieldCount > 0) {
                console.log(`üì• Contenu r√©cup√©r√©: ${fieldCount} champs depuis localStorage`);
            }
            
            return content;
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du contenu:', error);
            return null;
        }
    }

    /**
     * Sauvegarde du contenu dans le localStorage
     * 
     * R√¥le : Persister le contenu modifi√© dans le navigateur
     * Type : Boolean (succ√®s/√©chec)
     * Unit√© : Sans unit√© (bool√©en)
     * Domaine : true (succ√®s) | false (√©chec)
     * Formule : success = localStorage.setItem(key, JSON.stringify(content))
     * Exemple : saveContent({title: "nouveau"}) ‚Üí true
     */
    function saveContent(content) {
        try {
            localStorage.setItem(CONFIG.storageKey, JSON.stringify(content));
            syncState.lastSync = Date.now();
            syncState.contentHash = generateContentHash(content);
            
            if (CONFIG.enableDebug) {
                console.log(`üíæ Contenu sauvegard√©: ${Object.keys(content).length} champs, hash: ${syncState.contentHash}`);
            }
            
            // D√©clencher √©v√©nement personnalis√© pour notifier autres pages
            window.dispatchEvent(new CustomEvent('licubeContentUpdated', {
                detail: { content, hash: syncState.contentHash, timestamp: syncState.lastSync }
            }));
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde:', error);
            return false;
        }
    }

    /**
     * Collecte du contenu depuis les champs d'√©dition (page √©diteur)
     * 
     * R√¥le : Extraire toutes les valeurs des champs modifiables
     * Type : Object
     * Unit√© : Object avec champs data-field comme cl√©s
     * Domaine : Object vide si aucun champ | Object avec toutes les valeurs
     * Formule : content[field.data-field] = field.value pour tous les champs
     * Exemple : <input data-field="title" value="test"> ‚Üí {title: "test"}
     */
    function collectContentFromEditor() {
        const content = {};
        const fields = document.querySelectorAll('[data-field]');
        
        fields.forEach(field => {
            const fieldName = field.getAttribute('data-field');
            const fieldValue = field.value || field.textContent || field.innerText || '';
            
            if (fieldName) {
                content[fieldName] = fieldValue.trim();
            }
        });
        
        if (CONFIG.enableDebug && Object.keys(content).length > 0) {
            console.log(`üìù Contenu collect√© depuis √©diteur: ${Object.keys(content).length} champs`);
        }
        
        return content;
    }

    /**
     * Application du contenu aux √©l√©ments √©ditables (page pr√©sentation)
     * 
     * R√¥le : Mettre √† jour les √©l√©ments de pr√©sentation avec nouveau contenu
     * Type : Number (nombre d'√©l√©ments mis √† jour)
     * Unit√© : Nombre d'√©l√©ments
     * Domaine : 0 ‚â§ updatedCount ‚â§ nombre total d'√©l√©ments √©ditables
     * Formule : pour chaque √©l√©ment.data-field, √©l√©ment.textContent = content[field]
     * Exemple : content.title="nouveau" ‚Üí <span data-field="title">nouveau</span>
     */
    function applyContentToPresentation(content) {
        if (!content || typeof content !== 'object') {
            return 0;
        }
        
        let updatedCount = 0;
        
        Object.entries(content).forEach(([fieldName, value]) => {
            const elements = document.querySelectorAll(`[data-field="${fieldName}"]`);
            
            elements.forEach(element => {
                const currentValue = element.textContent || element.innerText || '';
                
                if (currentValue !== value) {
                    // Animation subtile lors du changement
                    element.style.transition = 'all 0.3s ease';
                    element.style.backgroundColor = 'rgba(96, 165, 250, 0.1)';
                    
                    // Appliquer la nouvelle valeur
                    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                        element.value = value;
                    } else {
                        element.textContent = value;
                    }
                    
                    updatedCount++;
                    
                    // Enlever l'animation apr√®s un d√©lai
                    setTimeout(() => {
                        element.style.backgroundColor = '';
                    }, 600);
                }
            });
        });
        
        if (CONFIG.enableDebug && updatedCount > 0) {
            console.log(`üîÑ Pr√©sentation mise √† jour: ${updatedCount} √©l√©ments modifi√©s`);
        }
        
        return updatedCount;
    }

    /**
     * Synchronisation depuis l'√©diteur vers le stockage
     * 
     * R√¥le : Collecter et sauvegarder les modifications de l'√©diteur
     * Type : Boolean (synchronisation effectu√©e ou non)
     * Unit√© : Sans unit√© (bool√©en)
     * Domaine : true si sync effectu√©e | false si pas n√©cessaire
     * Formule : needsSync = (newHash !== currentHash)
     * Exemple : modification dans √©diteur ‚Üí collecte ‚Üí sauvegarde ‚Üí true
     */
    function syncFromEditor() {
        const currentContent = collectContentFromEditor();
        const newHash = generateContentHash(currentContent);
        
        // V√©rifier si synchronisation n√©cessaire
        if (newHash === syncState.contentHash) {
            return false; // Pas de changement
        }
        
        const success = saveContent(currentContent);
        
        if (success && CONFIG.enableDebug) {
            console.log(`‚¨ÜÔ∏è Sync √©diteur ‚Üí stockage: ${Object.keys(currentContent).length} champs`);
        }
        
        return success;
    }

    /**
     * Synchronisation depuis le stockage vers la pr√©sentation
     * 
     * R√¥le : Charger et appliquer les modifications √† la pr√©sentation
     * Type : Boolean (synchronisation effectu√©e ou non)
     * Unit√© : Sans unit√© (bool√©en)
     * Domaine : true si sync effectu√©e | false si pas n√©cessaire
     * Formule : needsSync = (storedHash !== currentHash)
     * Exemple : changement d√©tect√© ‚Üí chargement ‚Üí application ‚Üí true
     */
    function syncToPresentation() {
        const storedContent = getStoredContent();
        if (!storedContent) {
            return false;
        }
        
        const storedHash = generateContentHash(storedContent);
        
        // V√©rifier si synchronisation n√©cessaire
        if (storedHash === syncState.contentHash) {
            return false; // Pas de changement
        }
        
        const updatedCount = applyContentToPresentation(storedContent);
        syncState.contentHash = storedHash;
        
        if (updatedCount > 0 && CONFIG.enableDebug) {
            console.log(`‚¨áÔ∏è Sync stockage ‚Üí pr√©sentation: ${updatedCount} √©l√©ments mis √† jour`);
        }
        
        return updatedCount > 0;
    }

    /**
     * Cycle de synchronisation principal
     * 
     * R√¥le : Ex√©cuter un cycle complet de synchronisation selon le type de page
     * Type : Void (proc√©dure)
     * Unit√© : Sans unit√© (action)
     * Domaine : √âditeur OU pr√©sentation
     * Formule : cycle = (isEditor ? syncFromEditor : syncToPresentation)()
     * Exemple : page √©diteur ‚Üí collecte + sauvegarde, pr√©sentation ‚Üí chargement + affichage
     */
    function performSyncCycle() {
        try {
            let syncPerformed = false;
            
            if (syncState.isEditor) {
                // Synchroniser depuis l'√©diteur vers le stockage
                syncPerformed = syncFromEditor();
            } else {
                // Synchroniser depuis le stockage vers la pr√©sentation
                syncPerformed = syncToPresentation();
            }
            
            if (syncPerformed) {
                syncState.lastSync = Date.now();
            }
            
        } catch (error) {
            console.error('‚ùå Erreur durant le cycle de synchronisation:', error);
        }
    }

    /**
     * D√©marrage du syst√®me de synchronisation automatique
     * 
     * R√¥le : Initialiser et lancer le polling automatique
     * Type : Void (proc√©dure d'initialisation)
     * Unit√© : Timer en millisecondes
     * Domaine : CONFIG.pollInterval comme fr√©quence de v√©rification
     * Formule : timer = setInterval(performSyncCycle, pollInterval)
     * Exemple : d√©marrage ‚Üí cycle toutes les 500ms ‚Üí sync automatique
     */
    function startSync() {
        if (syncState.isActive) {
            console.warn('‚ö†Ô∏è Synchronisation d√©j√† active');
            return;
        }
        
        detectPageType();
        
        // Synchronisation initiale
        const initialContent = getStoredContent();
        if (initialContent) {
            syncState.contentHash = generateContentHash(initialContent);
            
            if (!syncState.isEditor) {
                applyContentToPresentation(initialContent);
            }
        }
        
        // D√©marrer le polling automatique
        syncState.pollTimer = setInterval(performSyncCycle, CONFIG.pollInterval);
        syncState.isActive = true;
        
        if (CONFIG.enableDebug) {
            console.log(`üöÄ Synchronisation d√©marr√©e (${syncState.isEditor ? '√âDITEUR' : 'PR√âSENTATION'})`);
            console.log(`   - Intervalle: ${CONFIG.pollInterval}ms`);
            console.log(`   - Hash initial: ${syncState.contentHash || 'aucun'}`);
        }
        
        // √âcouter les √©v√©nements de stockage (changements depuis autres onglets)
        window.addEventListener('storage', function(event) {
            if (event.key === CONFIG.storageKey && !syncState.isEditor) {
                if (CONFIG.enableDebug) {
                    console.log('üìª Changement d√©tect√© depuis autre onglet');
                }
                performSyncCycle();
            }
        });
    }

    /**
     * Arr√™t du syst√®me de synchronisation
     * 
     * R√¥le : Nettoyer et arr√™ter tous les timers et √©couteurs
     * Type : Void (proc√©dure de nettoyage)
     * Unit√© : Sans unit√© (nettoyage)
     * Domaine : Syst√®me actif ‚Üí syst√®me inactif
     * Formule : cleanup = clearInterval(timer) + removeEventListeners()
     * Exemple : arr√™t ‚Üí nettoyage timer ‚Üí d√©sactivation √©couteurs
     */
    function stopSync() {
        if (!syncState.isActive) {
            return;
        }
        
        if (syncState.pollTimer) {
            clearInterval(syncState.pollTimer);
            syncState.pollTimer = null;
        }
        
        syncState.isActive = false;
        
        if (CONFIG.enableDebug) {
            console.log('‚èπÔ∏è Synchronisation arr√™t√©e');
        }
    }

    /**
     * Configuration d'√©v√©nements sp√©ciaux pour l'√©diteur
     * 
     * R√¥le : Ajouter des √©couteurs pour synchronisation imm√©diate sur modifications
     * Type : Void (configuration d'√©v√©nements)
     * Unit√© : Sans unit√© (configuration)
     * Domaine : Page √©diteur seulement
     * Formule : addEventListener(input/change, immediateSyncWithDelay)
     * Exemple : utilisateur tape ‚Üí d√©lai 100ms ‚Üí sync imm√©diate
     */
    function setupEditorEvents() {
        if (!syncState.isEditor) {
            return;
        }
        
        const fields = document.querySelectorAll('[data-field]');
        let syncTimeout = null;
        
        // Synchronisation imm√©diate avec d√©lai anti-rebond
        function triggerImmediateSync() {
            if (syncTimeout) {
                clearTimeout(syncTimeout);
            }
            
            syncTimeout = setTimeout(() => {
                performSyncCycle();
                
                if (CONFIG.enableDebug) {
                    console.log('‚ö° Synchronisation imm√©diate d√©clench√©e');
                }
            }, CONFIG.syncDelay);
        }
        
        // Attacher les √©couteurs √† tous les champs
        fields.forEach(field => {
            field.addEventListener('input', triggerImmediateSync);
            field.addEventListener('change', triggerImmediateSync);
            field.addEventListener('blur', triggerImmediateSync);
        });
        
        if (CONFIG.enableDebug) {
            console.log(`üéØ √âv√©nements configur√©s pour ${fields.length} champs d'√©dition`);
        }
    }

    /**
     * API publique du module de synchronisation
     * 
     * R√¥le : Exposer les fonctions principales pour utilisation externe
     * Type : Object avec m√©thodes publiques
     * Unit√© : Interface programmatique
     * Domaine : start, stop, forceSync, getState
     * Formule : API = {fonctions_publiques_principales}
     * Exemple : window.LiveSync.start() ‚Üí d√©marre la synchronisation
     */
    const LiveSyncAPI = {
        // D√©marrer la synchronisation
        start: startSync,
        
        // Arr√™ter la synchronisation
        stop: stopSync,
        
        // Forcer une synchronisation imm√©diate
        forceSync: performSyncCycle,
        
        // Obtenir l'√©tat actuel
        getState: () => ({ ...syncState }),
        
        // Changer la configuration
        configure: (newConfig) => {
            Object.assign(CONFIG, newConfig);
            if (CONFIG.enableDebug) {
                console.log('‚öôÔ∏è Configuration mise √† jour:', newConfig);
            }
        },
        
        // Obtenir la configuration actuelle
        getConfig: () => ({ ...CONFIG })
    };

    /**
     * Initialisation automatique du syst√®me
     * 
     * R√¥le : D√©marrer automatiquement la synchronisation au chargement
     * Type : Void (initialisation automatique)
     * Unit√© : Sans unit√© (√©v√©nement DOM)
     * Domaine : DOMContentLoaded ‚Üí initialisation
     * Formule : init = detectPage() + setupEvents() + startSync()
     * Exemple : page charg√©e ‚Üí d√©tection type ‚Üí d√©marrage auto
     */
    function autoInit() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                setupEditorEvents();
                startSync();
            });
        } else {
            setupEditorEvents();
            startSync();
        }
    }

    // Exposer l'API globalement
    window.LiveSync = LiveSyncAPI;
    
    // Initialisation automatique
    autoInit();
    
    if (CONFIG.enableDebug) {
        console.log('üîó Syst√®me de synchronisation Li-CUBE PRO‚Ñ¢ charg√©');
        console.log('   - API disponible : window.LiveSync');
        console.log('   - Configuration :', CONFIG);
    }

})();