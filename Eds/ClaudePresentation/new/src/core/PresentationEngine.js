/**
 * Moteur principal du g√©n√©rateur de pr√©sentations
 * 
 * R√¥le : Coordonne tous les modules (widgets, sections, synchronisation)
 * Type : Classe singleton - Point d'entr√©e unique du syst√®me
 * Responsabilit√© : Gestion centralis√©e des pr√©sentations et de leur √©tat
 */
class PresentationEngine {
    constructor() {
        // R√¥le : Instance singleton du moteur principal
        // Type : PresentationEngine (unique)
        // Unit√© : Sans unit√©
        // Domaine : Une seule instance par application
        // Formule : Design Pattern Singleton
        // Exemple : Moteur centralis√© pour toute l'application
        if (PresentationEngine.instance) {
            return PresentationEngine.instance;
        }
        PresentationEngine.instance = this;

        // R√¥le : Stockage de l'√©tat actuel de la pr√©sentation
        // Type : Object (√©tat de la pr√©sentation courante)
        // Unit√© : Sans unit√©
        // Domaine : Object ou null si aucune pr√©sentation active
        // Formule : √âtat = {id, titre, sections[], widgets[], styles}
        // Exemple : {id: 'pres-123', titre: 'Li-CUBE PRO', sections: [...]}
        this.currentPresentation = null;

        // R√¥le : Gestionnaire d'historique pour undo/redo
        // Type : HistoryManager (instance de gestion d'historique)
        // Unit√© : Sans unit√©
        // Domaine : Instance valide de HistoryManager
        // Formule : new HistoryManager() ‚Üí instance de gestion d'historique
        // Exemple : Permet ctrl+z et ctrl+y sur les modifications
        this.historyManager = new HistoryManager();

        // R√¥le : Gestionnaire de synchronisation temps r√©el
        // Type : SyncManager (instance de synchronisation)
        // Unit√© : Sans unit√©
        // Domaine : Instance valide de SyncManager
        // Formule : new SyncManager() ‚Üí instance de synchronisation
        // Exemple : Synchronise √©diteur ‚ü∑ viewer en temps r√©el
        this.syncManager = new SyncManager();

        // R√¥le : Gestionnaire de widgets disponibles
        // Type : WidgetManager (gestionnaire de composants r√©utilisables)
        // Unit√© : Sans unit√©
        // Domaine : Instance valide de WidgetManager
        // Formule : new WidgetManager() ‚Üí gestionnaire de widgets
        // Exemple : G√®re texte, image, bouton, etc.
        this.widgetManager = new WidgetManager();

        // R√¥le : Gestionnaire de sections pr√©-d√©finies
        // Type : SectionManager (gestionnaire de sections templates)
        // Unit√© : Sans unit√©
        // Domaine : Instance valide de SectionManager
        // Formule : new SectionManager() ‚Üí gestionnaire de sections
        // Exemple : G√®re header, hero, pricing, contact, etc.
        this.sectionManager = new SectionManager();

        // Initialisation du moteur
        this.init();
    }

    /**
     * Initialise le moteur de pr√©sentation
     * 
     * R√¥le : Configuration initiale du syst√®me
     * Type : M√©thode d'initialisation
     * Effet de bord : Charge les templates, configure les events
     */
    async init() {
        try {
            console.log('üöÄ Initialisation du moteur de pr√©sentation...');
            
            // Chargement des widgets par d√©faut
            await this.widgetManager.loadDefaultWidgets();
            
            // Chargement des sections par d√©faut
            await this.sectionManager.loadDefaultSections();
            
            // Configuration de la synchronisation
            this.syncManager.init();
            
            console.log('‚úÖ Moteur de pr√©sentation initialis√© avec succ√®s');
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'initialisation du moteur:', error);
            throw error;
        }
    }

    /**
     * Cr√©e une nouvelle pr√©sentation
     * 
     * @param {string} titre - Titre de la pr√©sentation
     * @param {string} template - Template de base (optionnel)
     * @returns {Object} Nouvelle pr√©sentation cr√©√©e
     */
    createPresentation(titre, template = null) {
        // R√¥le : Identifiant unique de la nouvelle pr√©sentation
        // Type : String (UUID ou timestamp-based)
        // Unit√© : Sans unit√©
        // Domaine : Cha√Æne alphanum√©rique unique
        // Formule : 'pres-' + timestamp + '-' + random
        // Exemple : 'pres-1704890400123-abc'
        const presentationId = `pres-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

        // R√¥le : Structure de donn√©es de la nouvelle pr√©sentation
        // Type : Object (d√©finition compl√®te d'une pr√©sentation)
        // Unit√© : Sans unit√©
        // Domaine : Object avec propri√©t√©s requises
        // Formule : Structure standard de pr√©sentation
        // Exemple : Voir ci-dessous
        const presentation = {
            id: presentationId,
            titre: titre,
            dateCreation: new Date().toISOString(),
            dateModification: new Date().toISOString(),
            template: template,
            sections: [],
            styles: {
                theme: 'default',
                colors: {
                    primary: '#10B981',
                    secondary: '#3B82F6',
                    background: '#0F172A'
                },
                fonts: {
                    primary: 'Inter',
                    secondary: 'Playfair Display'
                }
            },
            metadata: {
                version: '1.0.0',
                author: 'PresentationEngine',
                tags: []
            }
        };

        // Si un template est sp√©cifi√©, charger sa structure
        if (template) {
            this.loadTemplate(presentation, template);
        }

        // Sauvegarder l'√©tat actuel pour l'historique
        this.historyManager.saveState(presentation);

        // D√©finir comme pr√©sentation active
        this.currentPresentation = presentation;

        // Synchroniser avec le viewer
        this.syncManager.syncPresentation(presentation);

        console.log(`üìã Nouvelle pr√©sentation cr√©√©e: ${titre} (${presentationId})`);
        return presentation;
    }

    /**
     * Charge un template dans une pr√©sentation
     * 
     * @param {Object} presentation - Pr√©sentation √† modifier
     * @param {string} templateName - Nom du template √† charger
     */
    loadTemplate(presentation, templateName) {
        // R√©cup√©ration du template depuis le gestionnaire de sections
        const template = this.sectionManager.getTemplate(templateName);
        
        if (template && template.sections) {
            presentation.sections = [...template.sections];
            presentation.styles = { ...presentation.styles, ...template.styles };
            console.log(`üìù Template '${templateName}' charg√© dans la pr√©sentation`);
        } else {
            console.warn(`‚ö†Ô∏è Template '${templateName}' non trouv√©`);
        }
    }

    /**
     * Ajoute une section √† la pr√©sentation courante
     * 
     * @param {string} sectionType - Type de section √† ajouter
     * @param {number} position - Position d'insertion (optionnelle)
     * @returns {Object} Section cr√©√©e
     */
    addSection(sectionType, position = null) {
        if (!this.currentPresentation) {
            throw new Error('Aucune pr√©sentation active');
        }

        // Cr√©ation de la nouvelle section
        const section = this.sectionManager.createSection(sectionType);
        
        // R√¥le : Position d'insertion dans le tableau des sections
        // Type : Number (index dans le tableau)
        // Unit√© : Sans unit√© (index)
        // Domaine : 0 ‚â§ insertPosition ‚â§ sections.length
        // Formule : position || sections.length (fin par d√©faut)
        // Exemple : position = 2 ‚Üí ins√©rer √† l'index 2
        const insertPosition = position !== null ? position : this.currentPresentation.sections.length;

        // Insertion de la section
        this.currentPresentation.sections.splice(insertPosition, 0, section);
        
        // Mise √† jour timestamp
        this.currentPresentation.dateModification = new Date().toISOString();

        // Sauvegarde pour historique
        this.historyManager.saveState(this.currentPresentation);

        // Synchronisation
        this.syncManager.syncPresentation(this.currentPresentation);

        console.log(`‚ûï Section '${sectionType}' ajout√©e √† la position ${insertPosition}`);
        return section;
    }

    /**
     * Supprime une section de la pr√©sentation courante
     * 
     * @param {string} sectionId - ID de la section √† supprimer
     * @returns {boolean} Succ√®s de la suppression
     */
    removeSection(sectionId) {
        if (!this.currentPresentation) {
            throw new Error('Aucune pr√©sentation active');
        }

        // R√¥le : Index de la section √† supprimer
        // Type : Number (index dans le tableau)
        // Unit√© : Sans unit√© (index)
        // Domaine : -1 si non trouv√©, ‚â•0 si trouv√©
        // Formule : findIndex(section => section.id === sectionId)
        // Exemple : index = 3 ‚Üí section √† l'index 3
        const sectionIndex = this.currentPresentation.sections.findIndex(
            section => section.id === sectionId
        );

        if (sectionIndex === -1) {
            console.warn(`‚ö†Ô∏è Section '${sectionId}' non trouv√©e`);
            return false;
        }

        // Suppression de la section
        const removedSection = this.currentPresentation.sections.splice(sectionIndex, 1)[0];
        
        // Mise √† jour timestamp
        this.currentPresentation.dateModification = new Date().toISOString();

        // Sauvegarde pour historique
        this.historyManager.saveState(this.currentPresentation);

        // Synchronisation
        this.syncManager.syncPresentation(this.currentPresentation);

        console.log(`üóëÔ∏è Section '${removedSection.type}' supprim√©e`);
        return true;
    }

    /**
     * D√©place une section vers une nouvelle position
     * 
     * @param {string} sectionId - ID de la section √† d√©placer
     * @param {number} newPosition - Nouvelle position
     * @returns {boolean} Succ√®s du d√©placement
     */
    moveSection(sectionId, newPosition) {
        if (!this.currentPresentation) {
            throw new Error('Aucune pr√©sentation active');
        }

        const currentIndex = this.currentPresentation.sections.findIndex(
            section => section.id === sectionId
        );

        if (currentIndex === -1) {
            console.warn(`‚ö†Ô∏è Section '${sectionId}' non trouv√©e`);
            return false;
        }

        // R√¥le : Validation de la nouvelle position
        // Type : Number (position cible valide)
        // Unit√© : Sans unit√© (index)
        // Domaine : 0 ‚â§ targetPosition < sections.length
        // Formule : Math.max(0, Math.min(newPosition, sections.length - 1))
        // Exemple : newPosition = 10, sections.length = 5 ‚Üí targetPosition = 4
        const targetPosition = Math.max(0, Math.min(newPosition, this.currentPresentation.sections.length - 1));

        // D√©placement de la section
        const [section] = this.currentPresentation.sections.splice(currentIndex, 1);
        this.currentPresentation.sections.splice(targetPosition, 0, section);

        // Mise √† jour timestamp
        this.currentPresentation.dateModification = new Date().toISOString();

        // Sauvegarde pour historique
        this.historyManager.saveState(this.currentPresentation);

        // Synchronisation
        this.syncManager.syncPresentation(this.currentPresentation);

        console.log(`üîÑ Section '${section.type}' d√©plac√©e de ${currentIndex} vers ${targetPosition}`);
        return true;
    }

    /**
     * Sauvegarde la pr√©sentation courante
     * 
     * @param {boolean} createBackup - Cr√©er une sauvegarde (d√©faut: true)
     * @returns {string} Chemin de sauvegarde
     */
    savePresentation(createBackup = true) {
        if (!this.currentPresentation) {
            throw new Error('Aucune pr√©sentation active √† sauvegarder');
        }

        try {
            // Mise √† jour timestamp
            this.currentPresentation.dateModification = new Date().toISOString();

            // R√¥le : Chemin de sauvegarde de la pr√©sentation
            // Type : String (chemin relatif)
            // Unit√© : Sans unit√©
            // Domaine : Chemin valide dans projects/
            // Formule : 'projects/' + presentationId + '/presentation.json'
            // Exemple : 'projects/pres-123-abc/presentation.json'
            const savePath = `projects/${this.currentPresentation.id}/presentation.json`;

            // Sauvegarde du fichier JSON
            const dataToSave = JSON.stringify(this.currentPresentation, null, 2);
            
            // Note: En environnement r√©el, utiliser l'API File System Access
            localStorage.setItem(`presentation-${this.currentPresentation.id}`, dataToSave);
            localStorage.setItem('current-presentation-id', this.currentPresentation.id);

            if (createBackup) {
                // Sauvegarde de backup avec timestamp
                const backupKey = `backup-${this.currentPresentation.id}-${Date.now()}`;
                localStorage.setItem(backupKey, dataToSave);
            }

            console.log(`üíæ Pr√©sentation sauvegard√©e: ${savePath}`);
            return savePath;
        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde:', error);
            throw error;
        }
    }

    /**
     * Charge une pr√©sentation existante
     * 
     * @param {string} presentationId - ID de la pr√©sentation √† charger
     * @returns {Object} Pr√©sentation charg√©e
     */
    loadPresentation(presentationId) {
        try {
            // R√©cup√©ration depuis localStorage (ou API en production)
            const savedData = localStorage.getItem(`presentation-${presentationId}`);
            
            if (!savedData) {
                throw new Error(`Pr√©sentation '${presentationId}' non trouv√©e`);
            }

            const presentation = JSON.parse(savedData);
            
            // Validation de la structure
            if (!presentation.id || !presentation.titre || !Array.isArray(presentation.sections)) {
                throw new Error('Structure de pr√©sentation invalide');
            }

            // D√©finir comme pr√©sentation active
            this.currentPresentation = presentation;

            // Synchronisation
            this.syncManager.syncPresentation(presentation);

            console.log(`üìÇ Pr√©sentation charg√©e: ${presentation.titre} (${presentationId})`);
            return presentation;
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement:', error);
            throw error;
        }
    }

    /**
     * G√©n√®re le HTML final de la pr√©sentation
     * 
     * @returns {string} HTML complet de la pr√©sentation
     */
    generateHTML() {
        if (!this.currentPresentation) {
            throw new Error('Aucune pr√©sentation active');
        }

        console.log('üîÑ G√©n√©ration du HTML final...');
        
        // G√©n√©ration par le gestionnaire de sections
        const html = this.sectionManager.generatePresentationHTML(this.currentPresentation);
        
        console.log('‚úÖ HTML g√©n√©r√© avec succ√®s');
        return html;
    }

    /**
     * Retourne l'√©tat actuel du moteur
     * 
     * @returns {Object} √âtat complet du moteur
     */
    getState() {
        return {
            currentPresentation: this.currentPresentation,
            availableWidgets: this.widgetManager.getAvailableWidgets(),
            availableSections: this.sectionManager.getAvailableSections(),
            history: this.historyManager.getHistory()
        };
    }

    /**
     * Cr√©e une nouvelle pr√©sentation
     * 
     * R√¥le : Factory de cr√©ation de pr√©sentations
     * Type : M√©thode de cr√©ation de donn√©es
     * Param√®tre : config - Configuration de la pr√©sentation
     * Retour : Promise<Object> - Pr√©sentation cr√©√©e
     */
    async createPresentation(config) {
        try {
            // G√©n√©ration d'un ID unique pour la pr√©sentation
            const presentationId = `pres-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            
            // Structure de pr√©sentation par d√©faut
            const presentation = {
                id: presentationId,
                title: config.title || 'Nouvelle pr√©sentation',
                description: config.description || '',
                template: config.template || '',
                dateCreation: config.createdAt || new Date().toISOString(),
                dateModification: new Date().toISOString(),
                author: config.author || 'Utilisateur',
                metadata: {
                    version: '1.0.0',
                    lastSaved: null
                },
                sections: []
            };

            // Application du template si sp√©cifi√©
            if (config.template && config.template !== '') {
                await this.applyTemplate(presentation, config.template);
            }

            // D√©finition comme pr√©sentation courante
            this.currentPresentation = presentation;

            // Sauvegarde initiale dans l'historique
            this.historyManager.saveState(presentation, `Cr√©ation de "${presentation.title}"`);

            console.log(`‚úÖ Pr√©sentation cr√©√©e: ${presentation.title} (${presentationId})`);
            return presentation;

        } catch (error) {
            console.error('‚ùå Erreur cr√©ation pr√©sentation:', error);
            throw error;
        }
    }

    /**
     * Applique un template √† une pr√©sentation
     * 
     * R√¥le : Chargement d'un template pr√©d√©fini
     * Type : M√©thode de configuration
     * Param√®tres : presentation - Pr√©sentation cible, templateName - Nom du template
     * Effet de bord : Modifie la structure de la pr√©sentation
     */
    async applyTemplate(presentation, templateName) {
        try {
            console.log(`üìã Application du template: ${templateName}`);

            switch (templateName) {
                case 'li-cube-pro':
                    // Chargement des sections du template Li-CUBE PRO
                    const licubeProSections = await this.sectionManager.getTemplateSection('li-cube-pro');
                    presentation.sections = licubeProSections || [];
                    break;

                case 'commercial':
                    // Template commercial simple
                    presentation.sections = [
                        await this.sectionManager.createSection('hero', { title: 'Pr√©sentation commerciale' }),
                        await this.sectionManager.createSection('features', { title: 'Nos atouts' }),
                        await this.sectionManager.createSection('contact', { title: 'Contactez-nous' })
                    ];
                    break;

                case 'simple':
                    // Template simple avec une section
                    presentation.sections = [
                        await this.sectionManager.createSection('hero', { title: 'Ma pr√©sentation' })
                    ];
                    break;

                default:
                    console.warn(`Template inconnu: ${templateName}`);
            }

            presentation.template = templateName;
            console.log(`‚úÖ Template "${templateName}" appliqu√© avec ${presentation.sections.length} sections`);

        } catch (error) {
            console.error(`‚ùå Erreur application template ${templateName}:`, error);
            // En cas d'erreur, on laisse une pr√©sentation vide
            presentation.sections = [];
        }
    }

    /**
     * Retourne la pr√©sentation courante
     * 
     * R√¥le : Accessor pour la pr√©sentation active
     * Type : M√©thode getter
     * Retour : Object|null - Pr√©sentation courante ou null
     */
    getCurrentPresentation() {
        return this.currentPresentation;
    }

    /**
     * D√©finit la pr√©sentation courante
     * 
     * R√¥le : Setter pour la pr√©sentation active
     * Type : M√©thode setter
     * Param√®tre : presentation - Pr√©sentation √† d√©finir comme courante
     * Effet de bord : Met √† jour la pr√©sentation courante
     */
    setCurrentPresentation(presentation) {
        this.currentPresentation = presentation;
        console.log(`üéØ Pr√©sentation courante d√©finie: ${presentation?.title || 'Aucune'}`);
    }

    /**
     * Sauvegarde la pr√©sentation courante
     * 
     * R√¥le : Persistance de la pr√©sentation
     * Type : M√©thode de sauvegarde
     * Retour : Promise<Object> - R√©sultat de la sauvegarde
     */
    async savePresentation() {
        try {
            if (!this.currentPresentation) {
                throw new Error('Aucune pr√©sentation √† sauvegarder');
            }

            // Mise √† jour du timestamp de modification
            this.currentPresentation.dateModification = new Date().toISOString();
            this.currentPresentation.metadata.lastSaved = new Date().toISOString();

            // Sauvegarde dans localStorage pour cette version de d√©veloppement
            const storageKey = `presentation-${this.currentPresentation.id}`;
            localStorage.setItem(storageKey, JSON.stringify(this.currentPresentation));

            // Sauvegarde de la liste des pr√©sentations
            const presentations = JSON.parse(localStorage.getItem('presentations-list') || '[]');
            const existingIndex = presentations.findIndex(p => p.id === this.currentPresentation.id);
            
            const presentationInfo = {
                id: this.currentPresentation.id,
                title: this.currentPresentation.title,
                dateModification: this.currentPresentation.dateModification,
                path: storageKey
            };

            if (existingIndex > -1) {
                presentations[existingIndex] = presentationInfo;
            } else {
                presentations.push(presentationInfo);
            }

            localStorage.setItem('presentations-list', JSON.stringify(presentations));

            console.log(`üíæ Pr√©sentation sauvegard√©e: ${this.currentPresentation.title}`);
            
            return {
                success: true,
                path: storageKey,
                timestamp: this.currentPresentation.metadata.lastSaved
            };

        } catch (error) {
            console.error('‚ùå Erreur sauvegarde:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Charge une pr√©sentation depuis le stockage
     * 
     * R√¥le : R√©cup√©ration d'une pr√©sentation sauvegard√©e
     * Type : M√©thode de chargement
     * Param√®tre : presentationId - ID de la pr√©sentation √† charger
     * Retour : Object - Pr√©sentation charg√©e
     */
    loadPresentation(presentationId) {
        try {
            const storageKey = `presentation-${presentationId}`;
            const presentationData = localStorage.getItem(storageKey);
            
            if (!presentationData) {
                throw new Error(`Pr√©sentation ${presentationId} non trouv√©e`);
            }

            const presentation = JSON.parse(presentationData);
            console.log(`üìñ Pr√©sentation charg√©e: ${presentation.title}`);
            
            return presentation;

        } catch (error) {
            console.error(`‚ùå Erreur chargement pr√©sentation ${presentationId}:`, error);
            throw error;
        }
    }

    /**
     * Restaure l'√©tat du moteur depuis un snapshot
     * 
     * R√¥le : Restauration d'√©tat pour undo/redo
     * Type : M√©thode de restauration d'√©tat
     * Param√®tre : state - √âtat √† restaurer
     * Effet de bord : Met √† jour l'√©tat complet du moteur
     */
    restoreState(state) {
        try {
            if (state && state.id) {
                this.currentPresentation = { ...state };
                console.log(`üîÑ √âtat restaur√©: ${state.title}`);
            } else {
                console.warn('√âtat invalide pour restauration');
            }
        } catch (error) {
            console.error('‚ùå Erreur restauration √©tat:', error);
            throw error;
        }
    }
}

// Export de la classe pour utilisation dans d'autres modules
window.PresentationEngine = PresentationEngine;