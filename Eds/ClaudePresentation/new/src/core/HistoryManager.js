/**
 * Gestionnaire d'historique pour syst√®me undo/redo
 * 
 * R√¥le : Gestion des √©tats ant√©rieurs pour permettre annulation/restauration
 * Type : Classe de gestion d'historique avec pile LIFO
 * Responsabilit√© : Sauvegarde, restauration et navigation dans l'historique
 */
class HistoryManager {
    constructor() {
        // R√¥le : Pile des √©tats pr√©c√©dents pour undo
        // Type : Array<Object> (pile LIFO des √©tats)
        // Unit√© : Sans unit√© (nombre d'√©tats)
        // Domaine : 0 ‚â§ length ‚â§ maxHistorySize
        // Formule : Pile LIFO avec limitation de taille
        // Exemple : [{√©tat1}, {√©tat2}, {√©tat3}] o√π √©tat3 = plus r√©cent
        this.undoStack = [];

        // R√¥le : Pile des √©tats pour redo apr√®s undo
        // Type : Array<Object> (pile LIFO des √©tats annul√©s)
        // Unit√© : Sans unit√© (nombre d'√©tats)
        // Domaine : 0 ‚â§ length ‚â§ maxHistorySize
        // Formule : Se remplit lors d'undo, se vide lors de nouvelles actions
        // Exemple : [{√©tatAnnul√©1}, {√©tatAnnul√©2}]
        this.redoStack = [];

        // R√¥le : Taille maximum de l'historique pour √©viter surcharge m√©moire
        // Type : Number (limite d'√©tats stock√©s)
        // Unit√© : Sans unit√© (nombre d'√©tats)
        // Domaine : 1 ‚â§ maxHistorySize ‚â§ 1000
        // Formule : Constante d√©finie selon usage et m√©moire disponible
        // Exemple : 50 ‚Üí max 50 √©tats undo + 50 √©tats redo
        this.maxHistorySize = 50;

        // R√¥le : Indicateur de modification en cours pour √©viter boucles infinies
        // Type : Boolean (flag d'√©tat)
        // Unit√© : Sans unit√©
        // Domaine : true | false
        // Formule : true pendant undo/redo, false sinon
        // Exemple : true ‚Üí ignore les saveState() automatiques
        this.isPerformingHistoryAction = false;

        console.log('üìö HistoryManager initialis√© avec limite de', this.maxHistorySize, '√©tats');
    }

    /**
     * Sauvegarde un √©tat dans l'historique
     * 
     * @param {Object} state - √âtat √† sauvegarder (pr√©sentation compl√®te)
     * @param {string} actionDescription - Description de l'action (optionnelle)
     */
    saveState(state, actionDescription = 'Modification') {
        // Ignorer si on est en train de faire undo/redo
        if (this.isPerformingHistoryAction) {
            return;
        }

        try {
            // R√¥le : Copie profonde de l'√©tat pour √©viter les r√©f√©rences partag√©es
            // Type : Object (clone ind√©pendant de l'√©tat)
            // Unit√© : Sans unit√©
            // Domaine : Object complet clon√© r√©cursivement
            // Formule : JSON.parse(JSON.stringify(state)) ‚Üí clonage profond
            // Exemple : √âtat original modifi√© n'affecte pas l'historique
            const stateCopy = JSON.parse(JSON.stringify(state));

            // Ajout des m√©tadonn√©es d'historique
            const historyEntry = {
                state: stateCopy,
                timestamp: new Date().toISOString(),
                action: actionDescription,
                id: `hist-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`
            };

            // Ajout √† la pile undo
            this.undoStack.push(historyEntry);

            // R√¥le : Limitation de la taille de pile pour √©viter surcharge m√©moire
            // Type : Array avec taille contr√¥l√©e
            // Unit√© : Sans unit√© (nombre d'√©l√©ments)
            // Domaine : length ‚â§ maxHistorySize
            // Formule : Si length > max ‚Üí supprimer les plus anciens (shift())
            // Exemple : maxSize=3, pile=[A,B,C,D] ‚Üí pile=[B,C,D]
            if (this.undoStack.length > this.maxHistorySize) {
                this.undoStack.shift(); // Supprimer le plus ancien
            }

            // R√¥le : Vidage de la pile redo car nouvelle action annule les redo possibles
            // Type : Array reset
            // Unit√© : Sans unit√©
            // Domaine : length = 0 apr√®s nouvelle action
            // Formule : Nouvelle action ‚Üí impossible de redo les actions annul√©es
            // Exemple : [undo1, undo2] + nouvelle action ‚Üí redo impossible
            this.redoStack = [];

            console.log(`üíæ √âtat sauvegard√©: ${actionDescription} (historique: ${this.undoStack.length} √©tats)`);
        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde d\'√©tat:', error);
        }
    }

    /**
     * Annule la derni√®re action (undo)
     * 
     * @returns {Object|null} √âtat restaur√© ou null si rien √† annuler
     */
    undo() {
        if (this.undoStack.length === 0) {
            console.warn('‚ö†Ô∏è Aucune action √† annuler');
            return null;
        }

        try {
            // Flag pour √©viter la sauvegarde recursive
            this.isPerformingHistoryAction = true;

            // R√¥le : R√©cup√©ration de l'√©tat √† restaurer (avant-dernier)
            // Type : Object (√©tat pr√©c√©dent)
            // Unit√© : Sans unit√©
            // Domaine : √âtat valide de pr√©sentation
            // Formule : undoStack[length-2] si existe, sinon √©tat initial
            // Exemple : [√©tat1, √©tat2, √©tat3] ‚Üí restaurer √©tat2, sauver √©tat3 pour redo
            const currentEntry = this.undoStack.pop(); // √âtat actuel
            const previousEntry = this.undoStack.length > 0 ? this.undoStack[this.undoStack.length - 1] : null;

            if (currentEntry) {
                // Ajouter l'√©tat actuel √† la pile redo
                this.redoStack.push(currentEntry);
                
                // Limiter la taille de la pile redo
                if (this.redoStack.length > this.maxHistorySize) {
                    this.redoStack.shift();
                }
            }

            // Restaurer l'√©tat pr√©c√©dent
            const stateToRestore = previousEntry ? previousEntry.state : null;

            console.log(`‚Ü∂ Undo effectu√©: ${currentEntry ? currentEntry.action : 'Action inconnue'}`);
            
            return stateToRestore;
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'undo:', error);
            return null;
        } finally {
            // R√©tablir le flag
            this.isPerformingHistoryAction = false;
        }
    }

    /**
     * Restaure une action annul√©e (redo)
     * 
     * @returns {Object|null} √âtat restaur√© ou null si rien √† restaurer
     */
    redo() {
        if (this.redoStack.length === 0) {
            console.warn('‚ö†Ô∏è Aucune action √† restaurer');
            return null;
        }

        try {
            // Flag pour √©viter la sauvegarde recursive
            this.isPerformingHistoryAction = true;

            // R√¥le : R√©cup√©ration de l'√©tat √† restaurer depuis la pile redo
            // Type : Object (√©tat annul√© √† restaurer)
            // Unit√© : Sans unit√©
            // Domaine : √âtat valide de pr√©sentation
            // Formule : redoStack.pop() ‚Üí dernier √©tat annul√©
            // Exemple : Restoration de l'action qui avait √©t√© undo√©e
            const entryToRedo = this.redoStack.pop();

            if (entryToRedo) {
                // Remettre dans la pile undo
                this.undoStack.push(entryToRedo);

                console.log(`‚Ü∑ Redo effectu√©: ${entryToRedo.action}`);
                return entryToRedo.state;
            }

            return null;
        } catch (error) {
            console.error('‚ùå Erreur lors du redo:', error);
            return null;
        } finally {
            // R√©tablir le flag
            this.isPerformingHistoryAction = false;
        }
    }

    /**
     * V√©rifie si undo est possible
     * 
     * @returns {boolean} true si undo possible
     */
    canUndo() {
        return this.undoStack.length > 1; // On garde toujours l'√©tat initial
    }

    /**
     * V√©rifie si redo est possible
     * 
     * @returns {boolean} true si redo possible
     */
    canRedo() {
        return this.redoStack.length > 0;
    }

    /**
     * Retourne l'historique complet pour debug/affichage
     * 
     * @returns {Object} Historique complet avec m√©tadonn√©es
     */
    getHistory() {
        return {
            undoStack: this.undoStack.map(entry => ({
                id: entry.id,
                action: entry.action,
                timestamp: entry.timestamp
            })),
            redoStack: this.redoStack.map(entry => ({
                id: entry.id,
                action: entry.action,
                timestamp: entry.timestamp
            })),
            canUndo: this.canUndo(),
            canRedo: this.canRedo(),
            totalStates: this.undoStack.length + this.redoStack.length
        };
    }

    /**
     * Vide compl√®tement l'historique
     * 
     * Attention: Action irr√©versible, √† utiliser avec pr√©caution
     */
    clearHistory() {
        this.undoStack = [];
        this.redoStack = [];
        console.log('üóëÔ∏è Historique vid√© compl√®tement');
    }

    /**
     * Configure la taille maximum de l'historique
     * 
     * @param {number} maxSize - Nouvelle taille maximum
     */
    setMaxHistorySize(maxSize) {
        if (maxSize < 1 || maxSize > 1000) {
            throw new Error('La taille d\'historique doit √™tre entre 1 et 1000');
        }

        this.maxHistorySize = maxSize;

        // R√¥le : Ajustement des piles existantes √† la nouvelle taille
        // Type : Array trimming (r√©duction de taille)
        // Unit√© : Sans unit√© (nombre d'√©l√©ments)
        // Domaine : length ‚â§ nouveauMaxSize
        // Formule : Si length > nouveauMax ‚Üí garder les plus r√©cents
        // Exemple : maxSize=10, pile de 15 ‚Üí garder les 10 plus r√©cents
        while (this.undoStack.length > maxSize) {
            this.undoStack.shift();
        }
        while (this.redoStack.length > maxSize) {
            this.redoStack.shift();
        }

        console.log(`‚öôÔ∏è Taille maximum d'historique d√©finie √† ${maxSize}`);
    }

    /**
     * Exporte l'historique vers JSON pour sauvegarde persistante
     * 
     * @returns {string} Historique au format JSON
     */
    exportHistory() {
        const exportData = {
            undoStack: this.undoStack,
            redoStack: this.redoStack,
            maxHistorySize: this.maxHistorySize,
            exportTimestamp: new Date().toISOString(),
            version: '1.0.0'
        };

        return JSON.stringify(exportData, null, 2);
    }

    /**
     * Importe un historique depuis JSON
     * 
     * @param {string} jsonData - Donn√©es JSON d'historique
     * @returns {boolean} Succ√®s de l'importation
     */
    importHistory(jsonData) {
        try {
            const importData = JSON.parse(jsonData);

            // Validation de la structure
            if (!Array.isArray(importData.undoStack) || !Array.isArray(importData.redoStack)) {
                throw new Error('Structure d\'historique invalide');
            }

            this.undoStack = importData.undoStack;
            this.redoStack = importData.redoStack;
            
            if (importData.maxHistorySize) {
                this.maxHistorySize = importData.maxHistorySize;
            }

            console.log(`üì• Historique import√©: ${this.undoStack.length} undo, ${this.redoStack.length} redo`);
            return true;
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'importation d\'historique:', error);
            return false;
        }
    }
}

// Export de la classe pour utilisation dans d'autres modules
window.HistoryManager = HistoryManager;