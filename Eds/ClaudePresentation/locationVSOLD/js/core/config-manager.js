/**
 * Gestionnaire de Configuration Centralis√© Li-CUBE PRO‚Ñ¢
 * 
 * R√¥le : Configuration centralis√©e et extensible pour tous les modules
 * Responsabilit√© : Gestion unifi√©e des param√®tres, validation et extension
 * Extensibilit√© : Syst√®me de plugins et configurations personnalis√©es
 * R√©pertoire de Travail : C:\Users\Brujah\Documents\GitHub\GeeknDragon\Eds\ClaudePresentation
 */

class ConfigManager {
    constructor() {
        // R√¥le : Configuration par d√©faut centralis√©e
        // Type : Object - Structure de configuration hi√©rarchique
        // Extensibilit√© : Facilement extensible via addConfig()
        this.config = {
            // Param√®tres de l'application
            app: {
                name: 'Li-CUBE PRO‚Ñ¢',
                version: '2.0.0',
                environment: 'production'
            },
            
            // Configuration de synchronisation
            sync: {
                delay: 50,              // D√©lai anti-rebond en millisecondes
                maxRetries: 3,          // Nombre maximum de tentatives
                storagePrefix: 'licubepro',  // Pr√©fixe pour les cl√©s localStorage
                healthCheckInterval: 10000   // Intervalle de v√©rification sant√© (ms)
            },
            
            // Configuration des animations
            animations: {
                duration: 300,          // Dur√©e des animations (ms)  
                easing: 'ease',         // Type d'animation CSS
                highlightDuration: 600, // Dur√©e surbrillance champs (ms)
                debounceDelay: 25       // D√©lai anti-rebond animations (ms)
            },
            
            // Configuration des couleurs et th√®me
            theme: {
                colors: {
                    primary: '#0F172A',
                    secondary: '#1E293B', 
                    accent: '#10B981',
                    success: '#059669',
                    warning: '#F59E0B',
                    error: '#EF4444'
                },
                fonts: {
                    primary: "'Inter', sans-serif",
                    secondary: "'Playfair Display', serif"
                }
            },
            
            // Configuration des types de pages support√©es
            pages: {
                vente: {
                    name: 'Vente',
                    storageKey: 'vente-live',
                    targetUrl: 'vente.html',
                    editorUrl: 'edit-vente.html'
                },
                location: {
                    name: 'Location',
                    storageKey: 'location-live', 
                    targetUrl: 'location.html',
                    editorUrl: 'edit-location.html'
                }
            },
            
            // Configuration des validations
            validation: {
                email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                phone: /^(\+1[-.\s]?)?(\(?[0-9]{3}\)?[-.\s]?)?[0-9]{3}[-.\s]?[0-9]{4}$/,
                required: {
                    minLength: 1,
                    maxLength: 1000
                }
            },
            
            // Configuration des champs sp√©ciaux
            fields: {
                images: ['logo-path', 'product-image-path', 'competitor-image-path', 'company-image-path'],
                links: ['rental-phone', 'rental-email', 'phone-number', 'email-address'],
                metadata: ['page-title', 'page-description'],
                spacers: ['header-spacer', 'section-spacer']
            }
        };
        
        // R√¥le : Cache des configurations personnalis√©es
        // Type : Map - Cache haute performance pour configurations √©tendues  
        this.customConfigs = new Map();
        
        // R√¥le : Observateurs pour les changements de configuration
        // Type : Set - Collection des callbacks de notification
        this.observers = new Set();
        
        this.init();
    }
    
    /**
     * Initialisation : chargement de la configuration depuis le fichier JSON
     */
    async init() {
        try {
            // Chargement : configuration depuis le fichier de d√©fauts
            const response = await fetch('./location-defaults.json');
            const defaultValues = await response.json();
            
            // Fusion : valeurs par d√©faut avec configuration syst√®me
            this.config.defaults = defaultValues;
            
            // Notification : configuration initialis√©e
            this.notifyObservers('initialized', this.config);
            
            console.log('‚úÖ ConfigManager initialis√© avec', Object.keys(defaultValues).length, 'valeurs par d√©faut');
        } catch (error) {
            console.warn('‚ö†Ô∏è Impossible de charger location-defaults.json, utilisation config interne');
        }
    }
    
    /**
     * R√©cup√©ration : valeur de configuration par chemin
     * @param {string} path - Chemin de la configuration (ex: 'sync.delay' ou 'theme.colors.primary')
     * @param {any} defaultValue - Valeur par d√©faut si non trouv√©e
     * @return {any} - Valeur de configuration
     */
    get(path, defaultValue = null) {
        // R√¥le : Navigation dans l'arbre de configuration
        // Logique : S√©paration par points pour acc√®s hi√©rarchique
        const keys = path.split('.');
        let current = this.config;
        
        // Parcours : chaque niveau de l'arbre de configuration
        for (const key of keys) {
            if (current && typeof current === 'object' && key in current) {
                current = current[key];
            } else {
                return defaultValue;
            }
        }
        
        return current;
    }
    
    /**
     * Configuration : d√©finition d'une valeur par chemin
     * @param {string} path - Chemin de configuration
     * @param {any} value - Nouvelle valeur
     */
    set(path, value) {
        // R√¥le : Modification dynamique de la configuration
        // Responsabilit√© : Mise √† jour avec notification des observateurs
        const keys = path.split('.');
        const lastKey = keys.pop();
        let current = this.config;
        
        // Navigation : jusqu'au parent de la valeur cible
        for (const key of keys) {
            if (!(key in current)) {
                current[key] = {};
            }
            current = current[key];
        }
        
        // Modification : valeur finale
        const oldValue = current[lastKey];
        current[lastKey] = value;
        
        // Notification : changement aux observateurs
        this.notifyObservers('changed', { path, oldValue, newValue: value });
        
        console.log(`üìù Configuration mise √† jour: ${path} = ${value}`);
    }
    
    /**
     * Extension : ajout d'une configuration personnalis√©e
     * @param {string} namespace - Espace de noms pour la configuration
     * @param {Object} config - Configuration √† ajouter
     */
    addConfig(namespace, config) {
        // R√¥le : Extensibilit√© pour modules tiers
        // Stockage : Configuration dans cache s√©par√© pour isolation
        this.customConfigs.set(namespace, config);
        
        // Fusion : avec configuration principale sous le namespace
        this.config[namespace] = { ...this.config[namespace], ...config };
        
        // Notification : nouvelle configuration ajout√©e
        this.notifyObservers('extended', { namespace, config });
        
        console.log(`üîß Configuration √©tendue: ${namespace}`);
    }
    
    /**
     * R√©cup√©ration : configuration compl√®te d'un namespace
     * @param {string} namespace - Espace de noms 
     * @return {Object} - Configuration du namespace
     */
    getNamespace(namespace) {
        return this.config[namespace] || {};
    }
    
    /**
     * Validation : v√©rification d'une valeur selon les r√®gles configur√©es
     * @param {string} fieldType - Type de champ (email, phone, required)
     * @param {any} value - Valeur √† valider
     * @return {Object} - {isValid: boolean, message: string}
     */
    validate(fieldType, value) {
        // R√¥le : Validation centralis√©e selon les r√®gles configur√©es
        // Extensibilit√© : Nouvelles r√®gles ajoutables via configuration
        const validationRules = this.get('validation');
        
        // Validation : champs requis
        if (fieldType === 'required') {
            const { minLength, maxLength } = validationRules.required;
            if (!value || value.length < minLength) {
                return { isValid: false, message: `Minimum ${minLength} caract√®re requis` };
            }
            if (value.length > maxLength) {
                return { isValid: false, message: `Maximum ${maxLength} caract√®res autoris√©s` };
            }
        }
        
        // Validation : email
        if (fieldType === 'email') {
            if (!validationRules.email.test(value)) {
                return { isValid: false, message: 'Format d\'email invalide' };
            }
        }
        
        // Validation : t√©l√©phone
        if (fieldType === 'phone') {
            if (!validationRules.phone.test(value)) {
                return { isValid: false, message: 'Format de t√©l√©phone invalide' };
            }
        }
        
        return { isValid: true, message: '' };
    }
    
    /**
     * G√©n√©ration : cl√© de stockage standardis√©e
     * @param {string} pageType - Type de page (vente, location)
     * @param {string} suffix - Suffixe optionnel (live, backup, etc.)
     * @return {string} - Cl√© de stockage format√©e
     */
    getStorageKey(pageType, suffix = 'live') {
        // R√¥le : Standardisation des cl√©s de stockage
        // Format : licubepro-{pageType}-{suffix}
        const prefix = this.get('sync.storagePrefix');
        return `${prefix}-${pageType}-${suffix}`;
    }
    
    /**
     * R√©cup√©ration : configuration de page par type
     * @param {string} pageType - Type de page
     * @return {Object} - Configuration de la page
     */
    getPageConfig(pageType) {
        return this.get(`pages.${pageType}`, {});
    }
    
    /**
     * V√©rification : si un champ est d'un type sp√©cial
     * @param {string} fieldName - Nom du champ
     * @param {string} fieldType - Type √† v√©rifier (images, links, metadata, spacers)
     * @return {boolean} - true si le champ est du type sp√©cifi√©
     */
    isFieldType(fieldName, fieldType) {
        const fieldList = this.get(`fields.${fieldType}`, []);
        return fieldList.includes(fieldName) || fieldName.includes(fieldType);
    }
    
    /**
     * Observer : ajout d'un observateur pour les changements
     * @param {Function} callback - Fonction appel√©e lors des changements
     */
    addObserver(callback) {
        this.observers.add(callback);
    }
    
    /**
     * Observer : suppression d'un observateur
     * @param {Function} callback - Fonction √† supprimer
     */
    removeObserver(callback) {
        this.observers.delete(callback);
    }
    
    /**
     * Notification : envoi d'√©v√©nement √† tous les observateurs
     * @param {string} event - Type d'√©v√©nement
     * @param {any} data - Donn√©es de l'√©v√©nement
     */
    notifyObservers(event, data) {
        this.observers.forEach(callback => {
            try {
                callback(event, data);
            } catch (error) {
                console.error('Erreur dans observateur ConfigManager:', error);
            }
        });
    }
    
    /**
     * Export : configuration compl√®te pour sauvegarde
     * @return {Object} - Configuration compl√®te
     */
    export() {
        return {
            config: this.config,
            custom: Object.fromEntries(this.customConfigs),
            timestamp: Date.now()
        };
    }
    
    /**
     * Import : restauration de configuration depuis export
     * @param {Object} exportedConfig - Configuration export√©e
     */
    import(exportedConfig) {
        if (exportedConfig.config) {
            this.config = { ...exportedConfig.config };
        }
        
        if (exportedConfig.custom) {
            this.customConfigs = new Map(Object.entries(exportedConfig.custom));
        }
        
        this.notifyObservers('imported', exportedConfig);
        console.log('üì• Configuration import√©e');
    }
}

// R√¥le : Instance globale singleton pour acc√®s unifi√©
// Extensibilit√© : Une seule instance partag√©e entre tous les modules
window.ConfigManager = window.ConfigManager || new ConfigManager();

// Export : pour utilisation en module ES6
export default window.ConfigManager;

// Export : pour utilisation CommonJS
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ConfigManager;
}