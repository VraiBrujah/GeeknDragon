/**
 * ====================================================================
 * ARBORESCENCE HI√âRARCHIQUE - MODULE UI
 * ====================================================================
 * 
 * R√¥le : Interface de navigation hi√©rarchique type Gimp
 * Type : Tree Component - Structure navigable avec contr√¥les
 */

class TreeView {
    constructor() {
        // Conteneur DOM de l'arborescence
        this.container = document.getElementById('tree-panel');
        this.content = document.getElementById('tree-content');
        
        // √âtat des √©l√©ments (visibilit√©, verrouillage)
        this.itemStates = new Map();

        this.init();
        console.log('TreeView initialis√©e');
    }

    /**
     * Initialise l'arborescence et ses contr√¥les.
     */
    init() {
        this.bindControls();
        this.setupDragAndDrop();
        this.render();
    }

    /**
     * Lie les contr√¥les de la barre d'outils de l'arborescence.
     */
    bindControls() {
        const expandAllBtn = document.getElementById('btn-expand-all');
        const collapseAllBtn = document.getElementById('btn-collapse-all');
        const showAllBtn = document.getElementById('btn-show-all');
        const unlockAllBtn = document.getElementById('btn-unlock-all');

        if (expandAllBtn) {
            expandAllBtn.addEventListener('click', () => this.expandAll());
        }

        if (collapseAllBtn) {
            collapseAllBtn.addEventListener('click', () => this.collapseAll());
        }

        if (showAllBtn) {
            showAllBtn.addEventListener('click', () => this.showAll());
        }

        if (unlockAllBtn) {
            unlockAllBtn.addEventListener('click', () => this.unlockAll());
        }

        // Contr√¥les du panneau
        const collapseBtn = this.container?.querySelector('.btn-collapse');
        const closeBtn = this.container?.querySelector('.btn-close');

        if (collapseBtn) {
            collapseBtn.addEventListener('click', () => this.toggleCollapse());
        }

        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.hide());
        }
    }

    /**
     * Configure le syst√®me de drag & drop pour r√©organisation.
     */
    setupDragAndDrop() {
        // Impl√©mentation drag & drop pour r√©organiser les √©l√©ments
        console.log('Drag & drop configur√© pour TreeView');
    }

    /**
     * Rendu de l'arborescence compl√®te.
     */
    render() {
        if (!this.content) return;

        // Simulation d'une structure hi√©rarchique
        const treeStructure = this.getTreeStructure();
        this.content.innerHTML = this.renderTreeItems(treeStructure);

        // Liaison des √©v√©nements apr√®s rendu
        this.bindItemEvents();
    }

    /**
     * G√©n√®re la structure de donn√©es de l'arborescence.
     */
    getTreeStructure() {
        return [
            {
                id: 'root',
                name: 'Projet Sans Titre',
                type: 'project',
                icon: 'üìÑ',
                expanded: true,
                visible: true,
                locked: false,
                children: [
                    {
                        id: 'widget_1',
                        name: '√âl√©ment Universel 1',
                        type: 'element-universel',
                        icon: 'üåü',
                        expanded: false,
                        visible: true,
                        locked: false,
                        children: []
                    },
                    {
                        id: 'widget_2',
                        name: 'Grille Composition 1',
                        type: 'grille-composition',
                        icon: 'üèóÔ∏è',
                        expanded: false,
                        visible: true,
                        locked: false,
                        children: [
                            {
                                id: 'element_1',
                                name: '√âl√©ment 1',
                                type: 'element',
                                icon: 'üîπ',
                                expanded: false,
                                visible: true,
                                locked: false,
                                children: []
                            }
                        ]
                    }
                ]
            }
        ];
    }

    /**
     * Rendu r√©cursif des √©l√©ments de l'arborescence.
     */
    renderTreeItems(items, level = 0) {
        return items.map(item => {
            const hasChildren = item.children && item.children.length > 0;
            const isExpanded = item.expanded;
            const indent = level * 20;

            return `
                <div class="tree-item" data-id="${item.id}" data-type="${item.type}">
                    <div class="tree-node" style="padding-left: ${indent}px">
                        ${hasChildren ? `
                            <button class="tree-expand ${isExpanded ? 'expanded' : ''}" 
                                    onclick="treeView.toggleExpand('${item.id}')">
                                ${isExpanded ? '‚ñº' : '‚ñ∂'}
                            </button>
                        ` : '<span class="tree-spacer"></span>'}
                        
                        <span class="tree-icon">${item.icon}</span>
                        <span class="tree-name editable" 
                              contenteditable="true"
                              onclick="event.stopPropagation()"
                              onblur="treeView.updateName('${item.id}', this.textContent)">${item.name}</span>
                        
                        <div class="tree-controls">
                            <button class="tree-btn ${item.visible ? 'active' : ''}" 
                                    title="Visibilit√©"
                                    onclick="treeView.toggleVisibility('${item.id}')">
                                ${item.visible ? 'üëÅ' : 'üôà'}
                            </button>
                            <button class="tree-btn ${item.locked ? 'active' : ''}" 
                                    title="Verrouillage"
                                    onclick="treeView.toggleLock('${item.id}')">
                                ${item.locked ? 'üîí' : 'üîì'}
                            </button>
                        </div>
                    </div>
                    
                    ${hasChildren && isExpanded ? `
                        <div class="tree-children">
                            ${this.renderTreeItems(item.children, level + 1)}
                        </div>
                    ` : ''}
                </div>
            `;
        }).join('');
    }

    /**
     * Lie les √©v√©nements aux √©l√©ments de l'arborescence.
     */
    bindItemEvents() {
        const treeItems = this.content.querySelectorAll('.tree-item');
        
        treeItems.forEach(item => {
            const node = item.querySelector('.tree-node');
            
            node.addEventListener('click', (e) => {
                if (e.target.closest('.tree-controls') || e.target.closest('.tree-expand')) {
                    return; // Ignorer les clics sur les contr√¥les
                }
                
                this.selectItem(item.dataset.id);
            });
        });
    }

    /**
     * S√©lectionne un √©l√©ment dans l'arborescence.
     */
    selectItem(itemId) {
        // D√©s√©lection des autres √©l√©ments
        this.content.querySelectorAll('.tree-item').forEach(item => {
            item.classList.remove('selected');
        });

        // S√©lection du nouvel √©l√©ment
        const selectedItem = this.content.querySelector(`[data-id="${itemId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected');
            console.log('√âl√©ment s√©lectionn√©:', itemId);
            
            // Notification √† l'√©diteur principal
            this.onItemSelected(itemId);
        }
    }

    /**
     * Gestion de la s√©lection d'un √©l√©ment.
     */
    onItemSelected(itemId) {
        // Mise √† jour du panneau de propri√©t√©s
        if (window.propertyPanel && window.presentationEditor) {
            const widget = window.presentationEditor.findWidget(itemId);
            window.propertyPanel.showProperties(widget);
        }
    }

    /**
     * Bascule l'expansion d'un √©l√©ment.
     */
    toggleExpand(itemId) {
        const item = this.content.querySelector(`[data-id="${itemId}"]`);
        if (item) {
            const expandBtn = item.querySelector('.tree-expand');
            const children = item.querySelector('.tree-children');
            
            if (expandBtn && children) {
                const isExpanded = expandBtn.classList.toggle('expanded');
                expandBtn.textContent = isExpanded ? '‚ñº' : '‚ñ∂';
                children.style.display = isExpanded ? 'block' : 'none';
            }
        }
    }

    /**
     * Bascule la visibilit√© d'un √©l√©ment.
     */
    toggleVisibility(itemId) {
        const btn = this.content.querySelector(`[data-id="${itemId}"] .tree-btn[title="Visibilit√©"]`);
        if (btn) {
            const isVisible = btn.classList.toggle('active');
            btn.textContent = isVisible ? 'üëÅ' : 'üôà';
            
            console.log(`Visibilit√© ${itemId}:`, isVisible ? 'visible' : 'masqu√©');
            
            // Notification √† l'√©diteur pour masquer/afficher l'√©l√©ment
            this.onVisibilityChanged(itemId, isVisible);
        }
    }

    /**
     * Bascule le verrouillage d'un √©l√©ment.
     */
    toggleLock(itemId) {
        const btn = this.content.querySelector(`[data-id="${itemId}"] .tree-btn[title="Verrouillage"]`);
        if (btn) {
            const isLocked = btn.classList.toggle('active');
            btn.textContent = isLocked ? 'üîí' : 'üîì';
            
            console.log(`Verrouillage ${itemId}:`, isLocked ? 'verrouill√©' : 'd√©verrouill√©');
            
            // Notification √† l'√©diteur pour verrouiller/d√©verrouiller
            this.onLockChanged(itemId, isLocked);
        }
    }

    /**
     * Met √† jour le nom d'un √©l√©ment.
     */
    updateName(itemId, newName) {
        console.log(`Renommage ${itemId}:`, newName);
        
        // Notification √† l'√©diteur pour mise √† jour
        this.onNameChanged(itemId, newName);
    }

    /**
     * Actions globales de l'arborescence
     */
    
    expandAll() {
        console.log('Expansion de tous les √©l√©ments');
        const expandBtns = this.content.querySelectorAll('.tree-expand');
        expandBtns.forEach(btn => {
            btn.classList.add('expanded');
            btn.textContent = '‚ñº';
            const item = btn.closest('.tree-item');
            const children = item?.querySelector('.tree-children');
            if (children) {
                children.style.display = 'block';
            }
        });
    }

    collapseAll() {
        console.log('R√©duction de tous les √©l√©ments');
        const expandBtns = this.content.querySelectorAll('.tree-expand');
        expandBtns.forEach(btn => {
            btn.classList.remove('expanded');
            btn.textContent = '‚ñ∂';
            const item = btn.closest('.tree-item');
            const children = item?.querySelector('.tree-children');
            if (children) {
                children.style.display = 'none';
            }
        });
    }

    showAll() {
        console.log('Affichage de tous les √©l√©ments');
        const visibilityBtns = this.content.querySelectorAll('.tree-btn[title="Visibilit√©"]');
        visibilityBtns.forEach(btn => {
            btn.classList.add('active');
            btn.textContent = 'üëÅ';
        });
    }

    unlockAll() {
        console.log('D√©verrouillage de tous les √©l√©ments');
        const lockBtns = this.content.querySelectorAll('.tree-btn[title="Verrouillage"]');
        lockBtns.forEach(btn => {
            btn.classList.remove('active');
            btn.textContent = 'üîì';
        });
    }

    /**
     * Contr√¥les du panneau
     */
    
    toggleCollapse() {
        if (this.container) {
            this.container.classList.toggle('collapsed');
        }
    }

    hide() {
        if (this.container) {
            this.container.style.display = 'none';
        }
    }

    show() {
        if (this.container) {
            this.container.style.display = 'block';
        }
    }

    /**
     * Callbacks pour notifications √† l'√©diteur principal
     */
    
    onVisibilityChanged(itemId, isVisible) {
        // √Ä impl√©menter avec l'√©diteur principal
    }

    onLockChanged(itemId, isLocked) {
        // √Ä impl√©menter avec l'√©diteur principal  
    }

    onNameChanged(itemId, newName) {
        // √Ä impl√©menter avec l'√©diteur principal
    }
}

// Instance globale de l'arborescence
window.treeView = new TreeView();