/**
 * ====================================================================
 * PANNEAU DE PROPRI√âT√âS - MODULE UI
 * ====================================================================
 * 
 * R√¥le : Interface de modification des propri√©t√©s des widgets
 * Type : UI Component - Panneau contextuel adaptatif
 */

class PropertyPanel {
    constructor() {
        // 
        // R√¥le : R√©f√©rence vers le widget actuellement s√©lectionn√©
        // Type : Widget | null (r√©f√©rence d'objet)
        // Domaine : instance Widget valide | null (aucune s√©lection)
        // Exemple : null
        this.selectedWidget = null;

        // Conteneur DOM du panneau de propri√©t√©s
        this.container = document.getElementById('properties-content');

        console.log('PropertyPanel initialis√©');
    }

    /**
     * Affiche les propri√©t√©s du widget s√©lectionn√©.
     * 
     * Args:
     *   widget (Widget): Instance du widget √† √©diter
     * 
     * R√¥le : UI Updater - Affichage panneau contextuel
     * Type : Form Generator - Interface d'√©dition dynamique
     * Retour : void (effet : DOM mis √† jour)
     */
    showProperties(widget) {
        this.selectedWidget = widget;

        if (!widget) {
            this.showEmptyState();
            return;
        }

        // G√©n√©ration du panneau de propri√©t√©s sp√©cifique au widget
        const propertiesHtml = widget.getPropertiesPanel();
        
        this.container.innerHTML = `
            <div class="widget-properties">
                <div class="properties-header">
                    <h3>Propri√©t√©s - ${widget.type}</h3>
                    <button class="btn-close" onclick="propertyPanel.hideProperties()">√ó</button>
                </div>
                <div class="properties-content">
                    ${propertiesHtml}
                </div>
            </div>
        `;

        // Liaison des √©v√©nements pour les contr√¥les de propri√©t√©s
        this.bindPropertyEvents();
    }

    /**
     * Masque le panneau de propri√©t√©s.
     */
    hideProperties() {
        this.selectedWidget = null;
        this.showEmptyState();
    }

    /**
     * Affiche l'√©tat vide du panneau.
     */
    showEmptyState() {
        this.container.innerHTML = `
            <div class="no-selection-state">
                <div class="empty-state-icon">‚öôÔ∏è</div>
                <h4>Aucun widget s√©lectionn√©</h4>
                <p>Cliquez sur un widget ou faites glisser-d√©poser depuis la banque pour commencer l'√©dition.</p>
                
                <div class="quick-actions">
                    <button class="btn-primary" onclick="this.addElementUniversel()">
                        <span class="icon">üåü</span> Ajouter √âl√©ment Universel
                    </button>
                    <button class="btn-secondary" onclick="this.addGrilleComposition()">
                        <span class="icon">üèóÔ∏è</span> Ajouter Grille Composition
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * Lie les √©v√©nements des contr√¥les de propri√©t√©s.
     */
    bindPropertyEvents() {
        if (!this.selectedWidget) return;

        // Liaison des inputs pour mise √† jour temps r√©el
        const inputs = this.container.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.addEventListener('change', (e) => {
                const property = e.target.id;
                let value = e.target.value;

                // Gestion des types sp√©ciaux
                if (e.target.type === 'checkbox') {
                    value = e.target.checked;
                } else if (e.target.type === 'number' || e.target.type === 'range') {
                    value = parseFloat(value);
                }

                this.updateWidgetProperty(property, value);
            });
        });
    }

    /**
     * Met √† jour une propri√©t√© du widget s√©lectionn√©.
     */
    updateWidgetProperty(property, value) {
        if (this.selectedWidget) {
            this.selectedWidget.updateProperty(property, value);
            
            // Actualisation de l'affichage si n√©cessaire
            if (window.presentationEditor) {
                // D√©clencher le re-rendu du widget
                window.presentationEditor.refreshWidget(this.selectedWidget);
            }
        }
    }

    /**
     * Actions rapides pour ajouter des widgets.
     */
    addElementUniversel() {
        console.log('Ajout √âl√©ment Universel');
        // √Ä impl√©menter avec le syst√®me de widgets
    }

    addGrilleComposition() {
        console.log('Ajout Grille Composition');
        // √Ä impl√©menter avec le syst√®me de widgets
    }
}

// Instance globale du panneau de propri√©t√©s
window.propertyPanel = new PropertyPanel();