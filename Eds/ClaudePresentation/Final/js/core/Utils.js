/**
 * üõ†Ô∏è UTILS.JS - Utilitaires Syst√®me
 * 
 * R√¥le : Fonctions utilitaires globales pour l'√©diteur r√©volutionnaire
 * Type : Module d'utilitaires statiques
 * Responsabilit√© : Helpers, validateurs, formatters, g√©n√©rateurs
 */
class Utils {
    
    /**
     * G√©n√®re un identifiant unique pour les widgets
     * 
     * @param {string} type - Type de widget 
     * @param {string} prefix - Pr√©fixe optionnel
     * @returns {string} Identifiant unique
     */
    static generateId(type = 'widget', prefix = '') {
        // R√¥le : G√©n√©rateur d'ID unique temporellement et al√©atoirement
        // Type : String (identifiant unique)
        // Unit√© : Sans unit√©
        // Domaine : Cha√Æne alphanum√©rique unique dans le temps
        // Formule : prefix + type + timestamp + random(9 chars)
        // Exemple : 'widget-element-universel-1704890400123-k2j9m8n7p'
        const timestamp = Date.now();
        const random = Math.random().toString(36).substr(2, 9);
        const fullPrefix = prefix ? `${prefix}-` : '';
        
        return `${fullPrefix}${type}-${timestamp}-${random}`;
    }
    
    /**
     * Valide une structure de donn√©es selon un sch√©ma
     * 
     * @param {Object} data - Donn√©es √† valider
     * @param {Object} schema - Sch√©ma de validation
     * @returns {Object} R√©sultat validation {valid: boolean, errors: Array}
     */
    static validateSchema(data, schema) {
        const errors = [];
        
        // Validation des propri√©t√©s requises
        if (schema.required) {
            schema.required.forEach(prop => {
                if (!(prop in data)) {
                    errors.push(`Propri√©t√© requise manquante: ${prop}`);
                }
            });
        }
        
        // Validation des types
        if (schema.properties) {
            Object.entries(schema.properties).forEach(([prop, config]) => {
                if (prop in data) {
                    const value = data[prop];
                    const expectedType = config.type;
                    
                    if (expectedType && typeof value !== expectedType) {
                        errors.push(`Type incorrect pour ${prop}: attendu ${expectedType}, re√ßu ${typeof value}`);
                    }
                    
                    // Validation des valeurs minimales/maximales
                    if (config.min !== undefined && value < config.min) {
                        errors.push(`Valeur trop petite pour ${prop}: ${value} < ${config.min}`);
                    }
                    
                    if (config.max !== undefined && value > config.max) {
                        errors.push(`Valeur trop grande pour ${prop}: ${value} > ${config.max}`);
                    }
                    
                    // Validation des patterns
                    if (config.pattern && !config.pattern.test(value)) {
                        errors.push(`Format invalide pour ${prop}`);
                    }
                }
            });
        }
        
        return {
            valid: errors.length === 0,
            errors: errors
        };
    }
    
    /**
     * Clone profond d'un objet (sans fonctions)
     * 
     * @param {Object} obj - Objet √† cloner
     * @returns {Object} Clone profond
     */
    static deepClone(obj) {
        // R√¥le : Clonage profond sans r√©f√©rences partag√©es
        // Type : Object (copie compl√®te)
        // Unit√© : Sans unit√©
        // Domaine : Objects, Arrays, primitives (pas de fonctions/Symbol)
        // Formule : JSON.parse(JSON.stringify(obj)) ‚Üí clonage complet
        // Exemple : Objet original modifi√© n'affecte pas le clone
        if (obj === null || typeof obj !== 'object') {
            return obj;
        }
        
        try {
            return JSON.parse(JSON.stringify(obj));
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur de clonage, fallback vers Object.assign:', error);
            return Object.assign({}, obj);
        }
    }
    
    /**
     * Fusionne deux objets profond√©ment
     * 
     * @param {Object} target - Objet cible
     * @param {Object} source - Objet source
     * @returns {Object} Objet fusionn√©
     */
    static deepMerge(target, source) {
        // R√¥le : Fusion r√©cursive de deux objets
        // Type : Object (fusion compl√®te)
        // Unit√© : Sans unit√©
        // Domaine : Objects avec propri√©t√©s imbriqu√©es
        // Formule : R√©cursion sur propri√©t√©s communes + ajout nouvelles
        // Exemple : {a: {b: 1}} + {a: {c: 2}} = {a: {b: 1, c: 2}}
        const result = this.deepClone(target);
        
        Object.keys(source).forEach(key => {
            if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
                result[key] = result[key] || {};
                result[key] = this.deepMerge(result[key], source[key]);
            } else {
                result[key] = source[key];
            }
        });
        
        return result;
    }
    
    /**
     * D√©bounce une fonction (limite la fr√©quence d'appel)
     * 
     * @param {Function} func - Fonction √† d√©bouncer
     * @param {number} delay - D√©lai en millisecondes
     * @returns {Function} Fonction d√©bounc√©e
     */
    static debounce(func, delay) {
        // R√¥le : Limiteur de fr√©quence d'ex√©cution de fonction
        // Type : Function (wrapper temporis√©)
        // Unit√© : millisecondes (ms)
        // Domaine : delay ‚â• 0
        // Formule : R√©initialise timer √† chaque appel, ex√©cute apr√®s delay stable
        // Exemple : Recherche temps r√©el avec delay 300ms ‚Üí pas de spam serveur
        let timeoutId;
        
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }
    
    /**
     * Throttle une fonction (limite √† un appel par p√©riode)
     * 
     * @param {Function} func - Fonction √† throttler
     * @param {number} delay - D√©lai minimum entre appels
     * @returns {Function} Fonction throttl√©e
     */
    static throttle(func, delay) {
        // R√¥le : Limiteur d'ex√©cution par p√©riode fixe
        // Type : Function (wrapper cadenc√©)
        // Unit√© : millisecondes (ms)
        // Domaine : delay ‚â• 0
        // Formule : Maximum 1 ex√©cution par p√©riode de delay
        // Exemple : Scroll event avec delay 16ms ‚Üí max 60fps
        let lastCall = 0;
        
        return function (...args) {
            const now = Date.now();
            if (now - lastCall >= delay) {
                lastCall = now;
                func.apply(this, args);
            }
        };
    }
    
    /**
     * Formate une taille en bytes vers format lisible
     * 
     * @param {number} bytes - Taille en bytes
     * @param {number} decimals - Nombre de d√©cimales
     * @returns {string} Taille format√©e
     */
    static formatFileSize(bytes, decimals = 2) {
        // R√¥le : Convertisseur de bytes vers unit√©s lisibles
        // Type : String (taille format√©e)
        // Unit√© : B, KB, MB, GB, TB
        // Domaine : bytes ‚â• 0
        // Formule : division successive par 1024 + suffixe appropri√©
        // Exemple : 1536 bytes ‚Üí '1.50 KB'
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    
    /**
     * Formate un timestamp vers date lisible
     * 
     * @param {number} timestamp - Timestamp milliseconds
     * @param {string} locale - Locale (d√©faut: 'fr-FR')
     * @returns {string} Date format√©e
     */
    static formatDate(timestamp, locale = 'fr-FR') {
        // R√¥le : Convertisseur timestamp vers date localis√©e
        // Type : String (date format√©e)
        // Unit√© : Sans unit√©
        // Domaine : Timestamp valid
        // Formule : new Date(timestamp).toLocaleString()
        // Exemple : 1704890400000 ‚Üí '10/01/2024, 10:00:00'
        try {
            const date = new Date(timestamp);
            return date.toLocaleString(locale, {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        } catch (error) {
            return 'Date invalide';
        }
    }
    
    /**
     * Sanitise une cha√Æne pour utilisation en nom de fichier
     * 
     * @param {string} filename - Nom de fichier √† sanitiser
     * @returns {string} Nom sanitis√©
     */
    static sanitizeFilename(filename) {
        // R√¥le : Nettoyeur de nom de fichier pour compatibilit√© syst√®me
        // Type : String (nom s√©curis√©)
        // Unit√© : Sans unit√©
        // Domaine : Caract√®res autoris√©s par syst√®mes de fichiers
        // Formule : Suppression caract√®res interdits + normalisation
        // Exemple : 'Mon Projet! (v2)' ‚Üí 'Mon-Projet-v2'
        return filename
            .replace(/[<>:"/\\|?*]/g, '') // Caract√®res interdits Windows
            .replace(/[\s]+/g, '-')       // Espaces ‚Üí tirets
            .replace(/[-]+/g, '-')        // Tirets multiples ‚Üí simple
            .replace(/^-+|-+$/g, '')      // Tirets d√©but/fin
            .substr(0, 255);              // Limite longueur
    }
    
    /**
     * G√©n√®re une couleur al√©atoire en format hex
     * 
     * @returns {string} Couleur hex (#rrggbb)
     */
    static generateRandomColor() {
        // R√¥le : G√©n√©rateur de couleur al√©atoire
        // Type : String (couleur hex)
        // Unit√© : Sans unit√©
        // Domaine : #000000 √† #FFFFFF
        // Formule : Random 0-255 pour R,G,B ‚Üí conversion hex
        // Exemple : '#3a7bd5', '#f1c40f', etc.
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
    
    /**
     * Calcule la distance entre deux points
     * 
     * @param {Object} point1 - Point {x, y}
     * @param {Object} point2 - Point {x, y}
     * @returns {number} Distance en pixels
     */
    static calculateDistance(point1, point2) {
        // R√¥le : Calculateur de distance euclidienne
        // Type : Number (distance)
        // Unit√© : pixels (px)
        // Domaine : distance ‚â• 0
        // Formule : ‚àö((x2-x1)¬≤ + (y2-y1)¬≤) ‚Üí th√©or√®me Pythagore
        // Exemple : (0,0) et (3,4) ‚Üí 5px
        const dx = point2.x - point1.x;
        const dy = point2.y - point1.y;
        
        return Math.sqrt(dx * dx + dy * dy);
    }
    
    /**
     * V√©rifie si un point est dans un rectangle
     * 
     * @param {Object} point - Point {x, y}
     * @param {Object} rect - Rectangle {x, y, width, height}
     * @returns {boolean} true si le point est dans le rectangle
     */
    static pointInRect(point, rect) {
        // R√¥le : D√©tecteur de collision point-rectangle
        // Type : Boolean (collision d√©tect√©e)
        // Unit√© : Sans unit√©
        // Domaine : Coordonn√©es 2D
        // Formule : (px ‚â• rx && px ‚â§ rx+w) && (py ‚â• ry && py ‚â§ ry+h)
        // Exemple : Point(5,5) dans Rect(0,0,10,10) ‚Üí true
        return point.x >= rect.x && 
               point.x <= rect.x + rect.width &&
               point.y >= rect.y && 
               point.y <= rect.y + rect.height;
    }
    
    /**
     * Convertit les styles objet en CSS inline
     * 
     * @param {Object} styles - Styles CSS en objet
     * @returns {string} CSS inline format√©
     */
    static stylesToCSS(styles) {
        // R√¥le : Convertisseur objet vers CSS inline
        // Type : String (CSS format√©)
        // Unit√© : Unit√©s CSS vari√©es
        // Domaine : Propri√©t√©s CSS valides
        // Formule : camelCase ‚Üí kebab-case + propri√©t√©:valeur;
        // Exemple : {fontSize: '16px', marginTop: '10px'} ‚Üí 'font-size: 16px; margin-top: 10px;'
        if (!styles || typeof styles !== 'object') {
            return '';
        }
        
        return Object.entries(styles)
            .map(([property, value]) => {
                // Conversion camelCase vers kebab-case
                const cssProperty = property.replace(/([A-Z])/g, '-$1').toLowerCase();
                return `${cssProperty}: ${value}`;
            })
            .join('; ');
    }
    
    /**
     * Escape HTML pour √©viter les injections
     * 
     * @param {string} text - Texte √† √©chapper
     * @returns {string} Texte s√©curis√©
     */
    static escapeHTML(text) {
        // R√¥le : √âchappeur de caract√®res HTML dangereux
        // Type : String (texte s√©curis√©)
        // Unit√© : Sans unit√©
        // Domaine : Tout texte utilisateur
        // Formule : Remplacement caract√®res sp√©ciaux par entit√©s HTML
        // Exemple : '<script>' ‚Üí '&lt;script&gt;'
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * Convertit camelCase vers kebab-case
     * 
     * @param {string} str - Cha√Æne camelCase
     * @returns {string} Cha√Æne kebab-case
     */
    static camelToKebab(str) {
        // R√¥le : Convertisseur de casse camelCase vers kebab-case
        // Type : String (format kebab)
        // Unit√© : Sans unit√©
        // Domaine : Noms de propri√©t√©s CSS/HTML
        // Formule : Insertion tiret avant majuscule + toLowerCase()
        // Exemple : 'fontSize' ‚Üí 'font-size', 'marginTop' ‚Üí 'margin-top'
        return str.replace(/([A-Z])/g, '-$1').toLowerCase();
    }
    
    /**
     * Convertit kebab-case vers camelCase
     * 
     * @param {string} str - Cha√Æne kebab-case
     * @returns {string} Cha√Æne camelCase
     */
    static kebabToCamel(str) {
        // R√¥le : Convertisseur de casse kebab-case vers camelCase
        // Type : String (format camel)
        // Unit√© : Sans unit√©
        // Domaine : Noms de propri√©t√©s JavaScript
        // Formule : Suppression tiret + majuscule caract√®re suivant
        // Exemple : 'font-size' ‚Üí 'fontSize', 'margin-top' ‚Üí 'marginTop'
        return str.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());
    }
    
    /**
     * Log avec horodatage et couleurs
     * 
     * @param {string} level - Niveau (info, warn, error)
     * @param {string} message - Message √† logger
     * @param {any} data - Donn√©es optionnelles
     */
    static log(level, message, data = null) {
        // R√¥le : Logger syst√®me avec horodatage et couleurs
        // Type : Void (effet de bord console)
        // Unit√© : Sans unit√©
        // Domaine : Messages de debug/info/erreur
        // Formule : console[level] avec formatage timestamp
        // Exemple : Utils.log('info', 'Widget cr√©√©', {id: 'widget-123'})
        const timestamp = new Date().toLocaleTimeString('fr-FR');
        const prefix = `[${timestamp}] üéØ`;
        
        const colors = {
            info: 'color: #3498db',
            warn: 'color: #f39c12',
            error: 'color: #e74c3c',
            success: 'color: #2ecc71'
        };
        
        const color = colors[level] || colors.info;
        
        if (data) {
            console[level === 'error' ? 'error' : 'log'](
                `%c${prefix} ${message}`, color, data
            );
        } else {
            console[level === 'error' ? 'error' : 'log'](
                `%c${prefix} ${message}`, color
            );
        }
    }
    
    /**
     * V√©rifie si l'environnement est en mode d√©veloppement
     * 
     * @returns {boolean} true en mode dev
     */
    static isDevelopment() {
        // R√¥le : D√©tecteur d'environnement de d√©veloppement
        // Type : Boolean (mode d√©tect√©)
        // Unit√© : Sans unit√©
        // Domaine : true (dev) | false (production)
        // Formule : V√©rification localhost ou param√®tres debug
        // Exemple : localhost:3000 ‚Üí true, domain.com ‚Üí false
        return location.hostname === 'localhost' || 
               location.hostname === '127.0.0.1' ||
               location.search.includes('debug=true');
    }
}

// Export pour utilisation globale
window.Utils = Utils;