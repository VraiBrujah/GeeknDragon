/**
 * üì° EVENT_MANAGER.JS - Gestionnaire d'√âv√©nements Global
 * 
 * R√¥le : Syst√®me d'√©v√©nements centralis√© pour l'√©diteur r√©volutionnaire
 * Type : Gestionnaire d'√©v√©nements avec bus central
 * Responsabilit√© : Communication inter-modules, d√©couplage, √©v√©nements custom
 * Innovation : Syst√®me r√©actif pour synchronisation temps r√©el
 */
class EventManager {
    
    constructor() {
        // R√¥le : Registre central des √©v√©nements et callbacks
        // Type : Map<String, Array<Function>> (√©v√©nement ‚Üí callbacks)
        // Unit√© : Sans unit√©
        // Domaine : Nom d'√©v√©nement unique ‚Üí liste de fonctions
        // Formule : Map pour performance O(1) sur lookup
        // Exemple : 'widget-created' ‚Üí [callback1, callback2, callback3]
        this.events = new Map();
        
        // R√¥le : Compteur d'√©v√©nements pour statistiques
        // Type : Map<String, Number> (√©v√©nement ‚Üí nombre)
        // Unit√© : Sans unit√© (compteur)
        // Domaine : Nom d'√©v√©nement ‚Üí nombre d'√©missions ‚â• 0
        // Formule : Incr√©mentation √† chaque emit()
        // Exemple : 'widget-moved' ‚Üí 1547 (tr√®s utilis√©)
        this.eventCounts = new Map();
        
        // R√¥le : Historique des √©v√©nements r√©cents pour debug
        // Type : Array<Object> (journal d'√©v√©nements)
        // Unit√© : Sans unit√©
        // Domaine : Liste chronologique limit√©e √† 1000 entr√©es
        // Formule : Push + slice pour maintenir taille
        // Exemple : [{event: 'widget-created', timestamp: 1704890400123, data: {...}}]
        this.eventHistory = [];
        this.maxHistorySize = 1000;
        
        // R√¥le : Mode debug pour logging d√©taill√©
        // Type : Boolean (√©tat debug)
        // Unit√© : Sans unit√©
        // Domaine : true (debug actif) | false (silencieux)
        // Formule : Utils.isDevelopment() par d√©faut
        // Exemple : true ‚Üí log tous √©v√©nements, false ‚Üí silencieux
        this.debugMode = Utils.isDevelopment();
        
        // Initialisation des √©v√©nements syst√®me
        this.initSystemEvents();
        
        Utils.log('success', 'EventManager initialis√©', {
            debugMode: this.debugMode
        });
    }
    
    /**
     * Initialise les √©v√©nements syst√®me de base
     */
    initSystemEvents() {
        // √âv√©nements syst√®me pour gestion erreurs
        window.addEventListener('error', (event) => {
            this.emit('system:error', {
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                error: event.error
            });
        });
        
        // √âv√©nements de visibilit√© page pour pause/reprise
        document.addEventListener('visibilitychange', () => {
            this.emit('system:visibility-changed', {
                visible: !document.hidden
            });
        });
        
        // √âv√©nements de redimensionnement pour responsive
        window.addEventListener('resize', Utils.throttle(() => {
            this.emit('system:window-resized', {
                width: window.innerWidth,
                height: window.innerHeight
            });
        }, 250));
        
        // √âv√©nements clavier globaux
        document.addEventListener('keydown', (event) => {
            this.emit('system:keydown', {
                key: event.key,
                code: event.code,
                ctrlKey: event.ctrlKey,
                shiftKey: event.shiftKey,
                altKey: event.altKey,
                metaKey: event.metaKey
            });
        });
        
        // √âv√©nement beforeunload pour sauvegarde
        window.addEventListener('beforeunload', (event) => {
            this.emit('system:before-unload', { event });
        });
    }
    
    /**
     * S'abonne √† un √©v√©nement
     * 
     * @param {string} eventName - Nom de l'√©v√©nement
     * @param {Function} callback - Fonction de callback
     * @param {Object} options - Options d'abonnement
     * @returns {Function} Fonction de d√©sabonnement
     */
    on(eventName, callback, options = {}) {
        // Validation des param√®tres
        if (typeof eventName !== 'string' || !eventName.trim()) {
            throw new Error('Le nom d\'√©v√©nement doit √™tre une cha√Æne non vide');
        }
        
        if (typeof callback !== 'function') {
            throw new Error('Le callback doit √™tre une fonction');
        }
        
        // R√¥le : Enregistrement d'un callback pour un √©v√©nement
        // Type : Function (callback wrapp√©)
        // Unit√© : Sans unit√©
        // Domaine : callback valide avec options
        // Formule : Map.get(event).push(wrapper) avec options int√©gr√©es
        // Exemple : on('widget-created', handleCreate, {once: true})
        const wrappedCallback = {
            fn: callback,
            once: options.once || false,
            priority: options.priority || 0,
            context: options.context || null,
            id: Utils.generateId('callback')
        };
        
        // Initialise l'array si premier callback pour cet √©v√©nement
        if (!this.events.has(eventName)) {
            this.events.set(eventName, []);
        }
        
        // Ajout du callback avec tri par priorit√© (plus √©lev√©e d'abord)
        const callbacks = this.events.get(eventName);
        callbacks.push(wrappedCallback);
        callbacks.sort((a, b) => b.priority - a.priority);
        
        if (this.debugMode) {
            Utils.log('info', `Abonnement √©v√©nement: ${eventName}`, {
                callbackId: wrappedCallback.id,
                priority: wrappedCallback.priority,
                once: wrappedCallback.once,
                totalCallbacks: callbacks.length
            });
        }
        
        // Retourne fonction de d√©sabonnement
        return () => this.off(eventName, wrappedCallback.id);
    }
    
    /**
     * S'abonne √† un √©v√©nement une seule fois
     * 
     * @param {string} eventName - Nom de l'√©v√©nement
     * @param {Function} callback - Fonction de callback
     * @param {Object} options - Options d'abonnement
     * @returns {Function} Fonction de d√©sabonnement
     */
    once(eventName, callback, options = {}) {
        // R√¥le : Abonnement unique auto-d√©sinscrit apr√®s premi√®re ex√©cution
        // Type : Function (d√©sabonnement)
        // Unit√© : Sans unit√©
        // Domaine : callback ex√©cut√© exactement 1 fois
        // Formule : on() avec option once=true
        // Exemple : once('project-loaded', init) ‚Üí init appel√© 1 seule fois
        return this.on(eventName, callback, { ...options, once: true });
    }
    
    /**
     * Se d√©sabonne d'un √©v√©nement
     * 
     * @param {string} eventName - Nom de l'√©v√©nement
     * @param {string|Function} callbackOrId - Callback ou ID √† d√©sabonner
     * @returns {boolean} true si d√©sabonnement r√©ussi
     */
    off(eventName, callbackOrId) {
        if (!this.events.has(eventName)) {
            return false;
        }
        
        // R√¥le : Suppression d'un callback du registre d'√©v√©nements
        // Type : Boolean (succ√®s de suppression)
        // Unit√© : Sans unit√©
        // Domaine : true (trouv√© et supprim√©) | false (non trouv√©)
        // Formule : Array.filter pour supprimer callback matching
        // Exemple : off('widget-moved', 'callback-123') ‚Üí true si supprim√©
        const callbacks = this.events.get(eventName);
        const initialLength = callbacks.length;
        
        // Recherche par ID ou par r√©f√©rence fonction
        const filteredCallbacks = callbacks.filter(wrapper => {
            if (typeof callbackOrId === 'string') {
                return wrapper.id !== callbackOrId;
            } else {
                return wrapper.fn !== callbackOrId;
            }
        });
        
        this.events.set(eventName, filteredCallbacks);
        const removed = initialLength > filteredCallbacks.length;
        
        if (this.debugMode && removed) {
            Utils.log('info', `D√©sabonnement √©v√©nement: ${eventName}`, {
                callbacksRestants: filteredCallbacks.length
            });
        }
        
        return removed;
    }
    
    /**
     * √âmet un √©v√©nement vers tous les abonn√©s
     * 
     * @param {string} eventName - Nom de l'√©v√©nement
     * @param {any} data - Donn√©es √† transmettre
     * @param {Object} options - Options d'√©mission
     * @returns {boolean} true si au moins un callback ex√©cut√©
     */
    emit(eventName, data = null, options = {}) {
        // Validation
        if (typeof eventName !== 'string' || !eventName.trim()) {
            throw new Error('Le nom d\'√©v√©nement doit √™tre une cha√Æne non vide');
        }
        
        // R√¥le : Diffusion d'√©v√©nement vers tous callbacks abonn√©s
        // Type : Boolean (callbacks ex√©cut√©s)
        // Unit√© : Sans unit√©
        // Domaine : true (‚â•1 callback) | false (aucun callback)
        // Formule : It√©ration callbacks avec gestion erreurs + once cleanup
        // Exemple : emit('widget-selected', {widgetId: '123'}) ‚Üí notify all
        const timestamp = Date.now();
        let callbacksExecuted = 0;
        let errors = [];
        
        // Mise √† jour statistiques
        const currentCount = this.eventCounts.get(eventName) || 0;
        this.eventCounts.set(eventName, currentCount + 1);
        
        // Ajout √† l'historique
        this.addToHistory(eventName, data, timestamp);
        
        if (!this.events.has(eventName)) {
            if (this.debugMode) {
                Utils.log('warn', `Aucun abonn√© pour √©v√©nement: ${eventName}`, data);
            }
            return false;
        }
        
        const callbacks = this.events.get(eventName);
        const callbacksToRemove = [];
        
        // Ex√©cution des callbacks
        callbacks.forEach(wrapper => {
            try {
                // Contexte d'ex√©cution
                const context = wrapper.context || this;
                
                // Pr√©paration des donn√©es √©v√©nement
                const eventData = {
                    type: eventName,
                    data: data,
                    timestamp: timestamp,
                    source: 'EventManager'
                };
                
                // Ex√©cution du callback
                wrapper.fn.call(context, eventData);
                callbacksExecuted++;
                
                // Marquer pour suppression si 'once'
                if (wrapper.once) {
                    callbacksToRemove.push(wrapper.id);
                }
                
            } catch (error) {
                errors.push({
                    callbackId: wrapper.id,
                    error: error
                });
                
                Utils.log('error', `Erreur callback √©v√©nement ${eventName}:`, {
                    callbackId: wrapper.id,
                    error: error.message,
                    stack: error.stack
                });
            }
        });
        
        // Nettoyage des callbacks 'once'
        callbacksToRemove.forEach(id => {
            this.off(eventName, id);
        });
        
        // Debug logging
        if (this.debugMode) {
            Utils.log('info', `√âv√©nement √©mis: ${eventName}`, {
                callbacksExecuted,
                errors: errors.length,
                data
            });
        }
        
        // √âmettre erreur si callbacks ont √©chou√©
        if (errors.length > 0) {
            this.emit('system:callback-errors', {
                eventName,
                errors,
                timestamp
            });
        }
        
        return callbacksExecuted > 0;
    }
    
    /**
     * Ajoute un √©v√©nement √† l'historique
     * 
     * @param {string} eventName - Nom √©v√©nement
     * @param {any} data - Donn√©es
     * @param {number} timestamp - Timestamp
     */
    addToHistory(eventName, data, timestamp) {
        // R√¥le : Ajout chronologique √† l'historique avec limite taille
        // Type : Void (effet de bord sur historique)
        // Unit√© : Sans unit√©
        // Domaine : Entr√©e historique compl√®te
        // Formule : push + slice pour maintenir maxHistorySize
        // Exemple : Garde les 1000 √©v√©nements les plus r√©cents
        this.eventHistory.push({
            event: eventName,
            data: data,
            timestamp: timestamp,
            formattedTime: Utils.formatDate(timestamp)
        });
        
        // Limite la taille de l'historique
        if (this.eventHistory.length > this.maxHistorySize) {
            this.eventHistory = this.eventHistory.slice(-this.maxHistorySize);
        }
    }
    
    /**
     * Obtient la liste des √©v√©nements disponibles
     * 
     * @returns {Array<string>} Liste des noms d'√©v√©nements
     */
    getEvents() {
        // R√¥le : Listeur des √©v√©nements enregistr√©s
        // Type : Array<String> (noms d'√©v√©nements)
        // Unit√© : Sans unit√©
        // Domaine : Tous √©v√©nements avec ‚â•1 callback
        // Formule : Array.from(Map.keys())
        // Exemple : ['widget-created', 'project-saved', 'sync-updated']
        return Array.from(this.events.keys());
    }
    
    /**
     * Obtient le nombre de callbacks pour un √©v√©nement
     * 
     * @param {string} eventName - Nom de l'√©v√©nement
     * @returns {number} Nombre de callbacks
     */
    getCallbackCount(eventName) {
        // R√¥le : Compteur de callbacks pour √©v√©nement sp√©cifique
        // Type : Number (nombre de callbacks)
        // Unit√© : Sans unit√© (compteur)
        // Domaine : Nombre ‚â• 0
        // Formule : callbacks.length ou 0 si √©v√©nement inexistant
        // Exemple : getCallbackCount('widget-moved') ‚Üí 5 (5 modules √©coutent)
        if (!this.events.has(eventName)) {
            return 0;
        }
        
        return this.events.get(eventName).length;
    }
    
    /**
     * Obtient les statistiques d'√©mission des √©v√©nements
     * 
     * @returns {Object} Statistiques compl√®tes
     */
    getStats() {
        // R√¥le : G√©n√©rateur de statistiques syst√®me complet
        // Type : Object (m√©triques syst√®me)
        // Unit√© : Diverses (compteurs, arrays, etc.)
        // Domaine : Vue d'ensemble performance et usage
        // Formule : Agr√©gation de toutes m√©triques internes
        // Exemple : {totalEvents: 25, mostUsed: 'widget-moved', history: [...]}
        const totalEvents = this.getEvents().length;
        const totalEmissions = Array.from(this.eventCounts.values())
            .reduce((sum, count) => sum + count, 0);
        
        // √âv√©nement le plus utilis√©
        let mostUsedEvent = null;
        let maxCount = 0;
        this.eventCounts.forEach((count, eventName) => {
            if (count > maxCount) {
                maxCount = count;
                mostUsedEvent = eventName;
            }
        });
        
        return {
            totalEvents,
            totalEmissions,
            mostUsedEvent,
            maxEmissions: maxCount,
            historySize: this.eventHistory.length,
            debugMode: this.debugMode,
            eventsList: this.getEvents(),
            emissionCounts: Object.fromEntries(this.eventCounts),
            recentEvents: this.eventHistory.slice(-10) // 10 derniers
        };
    }
    
    /**
     * Vide l'historique des √©v√©nements
     */
    clearHistory() {
        // R√¥le : R√©initialisation compl√®te de l'historique
        // Type : Void (effet de bord)
        // Unit√© : Sans unit√©
        // Domaine : Suppression compl√®te donn√©es historiques
        // Formule : R√©initialisation arrays et maps
        // Exemple : Nettoyage pour √©conomiser m√©moire
        this.eventHistory = [];
        this.eventCounts.clear();
        
        if (this.debugMode) {
            Utils.log('info', 'Historique √©v√©nements vid√©');
        }
    }
    
    /**
     * Supprime tous les abonnements pour un √©v√©nement
     * 
     * @param {string} eventName - Nom de l'√©v√©nement
     * @returns {number} Nombre de callbacks supprim√©s
     */
    removeAllListeners(eventName) {
        // R√¥le : Suppresseur masse de tous callbacks d'un √©v√©nement
        // Type : Number (callbacks supprim√©s)
        // Unit√© : Sans unit√© (compteur)
        // Domaine : Nombre ‚â• 0
        // Formule : callbacks.length avant suppression
        // Exemple : removeAllListeners('widget-moved') ‚Üí 5 (tous supprim√©s)
        if (!this.events.has(eventName)) {
            return 0;
        }
        
        const callbackCount = this.events.get(eventName).length;
        this.events.delete(eventName);
        
        if (this.debugMode) {
            Utils.log('info', `Tous callbacks supprim√©s pour: ${eventName}`, {
                callbacksSupprimes: callbackCount
            });
        }
        
        return callbackCount;
    }
    
    /**
     * Active/d√©sactive le mode debug
     * 
     * @param {boolean} enabled - Activer debug
     */
    setDebugMode(enabled) {
        // R√¥le : Configurateur du niveau de logging
        // Type : Void (effet de bord)
        // Unit√© : Sans unit√©
        // Domaine : true (debug actif) | false (silencieux)
        // Formule : Modification √©tat debugMode
        // Exemple : setDebugMode(true) ‚Üí logs d√©taill√©s activ√©s
        this.debugMode = !!enabled;
        
        Utils.log('info', `Mode debug EventManager: ${this.debugMode ? 'ACTIV√â' : 'D√âSACTIV√â'}`);
    }
    
    /**
     * Nettoie toutes les ressources
     */
    destroy() {
        // R√¥le : Destructeur complet du gestionnaire d'√©v√©nements
        // Type : Void (effet de bord)
        // Unit√© : Sans unit√©
        // Domaine : Lib√©ration compl√®te des ressources
        // Formule : Clear de toutes structures de donn√©es
        // Exemple : Appel√© avant rechargement page ou fermeture
        this.events.clear();
        this.eventCounts.clear();
        this.eventHistory = [];
        
        Utils.log('warn', 'EventManager d√©truit - toutes ressources lib√©r√©es');
    }
}

// Export pour utilisation globale
window.EventManager = EventManager;