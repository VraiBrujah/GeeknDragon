/**
 * üíæ PERSISTENCE.JS - Syst√®me de Sauvegarde Avanc√©
 * 
 * R√¥le : Gestion persistance avec auto-save et historique 100 actions
 * Type : Gestionnaire de stockage localStorage avec compression
 * Responsabilit√© : Sauvegarde, restauration, historique, export/import
 * Innovation : Persistance temps r√©el avec F5 ‚Üí restauration exacte √©tat
 */
class Persistence {
    
    constructor(eventManager) {
        // R√¥le : Gestionnaire d'√©v√©nements pour communication
        // Type : EventManager (bus d'√©v√©nements)
        // Unit√© : Sans unit√©
        // Domaine : Instance EventManager valide
        // Formule : Injection de d√©pendance
        // Exemple : √âcoute 'widget-modified' pour d√©clencher auto-save
        this.eventManager = eventManager;
        
        // R√¥le : Cl√© de base pour stockage localStorage
        // Type : String (pr√©fixe stockage)
        // Unit√© : Sans unit√©
        // Domaine : Nom unique pour √©viter collisions
        // Formule : 'presentation-editor-v2-' + nom sp√©cifique
        // Exemple : 'presentation-editor-v2-project-data'
        this.storagePrefix = 'presentation-editor-v2-';
        
        // R√¥le : Historique des √©tats pour undo/redo (100 actions max)
        // Type : Array<Object> (snapshots chronologiques)
        // Unit√© : Sans unit√©
        // Domaine : √âtats complets du projet avec timestamps
        // Formule : Push + slice pour maintenir limite 100
        // Exemple : [{state: {...}, timestamp: 1704890400123, action: 'widget-created'}]
        this.history = [];
        this.maxHistorySize = 100;
        this.currentHistoryIndex = -1;
        
        // R√¥le : Timer pour auto-save diff√©r√© (debounce)
        // Type : Number (timer ID)
        // Unit√© : millisecondes (ms)
        // Domaine : ID setTimeout valide ou null
        // Formule : setTimeout avec clearTimeout pour debounce
        // Exemple : Auto-save 2s apr√®s derni√®re modification
        this.autoSaveTimer = null;
        this.autoSaveDelay = 2000; // 2 secondes
        
        // R√¥le : Flag pour d√©sactiver temporairement auto-save
        // Type : Boolean (√©tat auto-save)
        // Unit√© : Sans unit√©
        // Domaine : true (actif) | false (d√©sactiv√©)
        // Formule : Configuration utilisateur + √©tat syst√®me
        // Exemple : false pendant import pour √©viter pollution historique
        this.autoSaveEnabled = true;
        
        // R√¥le : Donn√©es actuelles du projet
        // Type : Object (√©tat complet)
        // Unit√© : Sans unit√©
        // Domaine : Structure projet avec widgets, config, metadata
        // Formule : Merge de tous modules du syst√®me
        // Exemple : {widgets: [...], grid: {...}, settings: {...}}
        this.currentProject = this.getDefaultProject();
        
        // R√¥le : Flag pour d√©tecter modifications non sauv√©es
        // Type : Boolean (√©tat sauvegarde)
        // Unit√© : Sans unit√©
        // Domaine : true (modifi√©) | false (synchronis√©)
        // Formule : true √† chaque modification, false apr√®s save
        // Exemple : true ‚Üí indicateur * dans titre fen√™tre
        this.hasUnsavedChanges = false;
        
        // Initialisation
        this.initEventListeners();
        this.loadProject();
        
        Utils.log('success', 'Syst√®me de persistance initialis√©', {
            autoSaveDelay: this.autoSaveDelay,
            maxHistorySize: this.maxHistorySize,
            storageAvailable: this.isStorageAvailable()
        });
    }
    
    /**
     * Initialise les √©couteurs d'√©v√©nements
     */
    initEventListeners() {
        // Auto-save sur modifications
        this.eventManager.on('widget:created', () => this.scheduleAutoSave('widget-created'));
        this.eventManager.on('widget:modified', () => this.scheduleAutoSave('widget-modified'));
        this.eventManager.on('widget:deleted', () => this.scheduleAutoSave('widget-deleted'));
        this.eventManager.on('widget:moved', () => this.scheduleAutoSave('widget-moved'));
        this.eventManager.on('project:settings-changed', () => this.scheduleAutoSave('settings-changed'));
        
        // Sauvegarde avant fermeture
        this.eventManager.on('system:before-unload', () => {
            if (this.hasUnsavedChanges) {
                this.saveProject(true); // Sauvegarde synchrone
            }
        });
        
        // Raccourcis clavier
        this.eventManager.on('system:keydown', (event) => {
            if (event.data.ctrlKey || event.data.metaKey) {
                switch (event.data.key) {
                    case 's':
                        event.preventDefault?.();
                        this.saveProject();
                        break;
                    case 'z':
                        if (!event.data.shiftKey) {
                            event.preventDefault?.();
                            this.undo();
                        } else {
                            event.preventDefault?.();
                            this.redo();
                        }
                        break;
                    case 'y':
                        event.preventDefault?.();
                        this.redo();
                        break;
                }
            }
        });
    }
    
    /**
     * Retourne la structure de projet par d√©faut
     * 
     * @returns {Object} Projet par d√©faut
     */
    getDefaultProject() {
        // R√¥le : G√©n√©rateur de structure projet vierge
        // Type : Object (projet complet)
        // Unit√© : Sans unit√©
        // Domaine : Structure compl√®te avec tous modules
        // Formule : Template avec valeurs par d√©faut coh√©rentes
        // Exemple : Nouveau projet ‚Üí √©tat initial propre
        return {
            // M√©tadonn√©es projet
            metadata: {
                id: Utils.generateId('project'),
                name: 'Projet Sans Titre',
                version: '1.0.0',
                created: new Date().toISOString(),
                modified: new Date().toISOString(),
                author: '√âditeur R√©volutionnaire'
            },
            
            // Configuration grille
            grid: {
                width: 1200,
                height: 800,
                cellSize: 20,
                showGrid: true,
                snapToGrid: true,
                backgroundColor: '#ffffff'
            },
            
            // Widgets du projet
            widgets: [],
            
            // Arborescence hi√©rarchique
            hierarchy: {
                rootId: 'root',
                children: []
            },
            
            // Configuration √©diteur
            editor: {
                zoom: 1.0,
                viewportX: 0,
                viewportY: 0,
                selectedWidgetId: null,
                activePanel: 'properties'
            },
            
            // Param√®tres globaux
            settings: {
                theme: 'default',
                language: 'fr',
                autoSave: true,
                syncViewer: true
            },
            
            // Assets du projet
            assets: {
                images: [],
                fonts: [],
                icons: []
            }
        };
    }
    
    /**
     * V√©rifie si localStorage est disponible
     * 
     * @returns {boolean} true si disponible
     */
    isStorageAvailable() {
        // R√¥le : Testeur de disponibilit√© localStorage
        // Type : Boolean (disponibilit√©)
        // Unit√© : Sans unit√©
        // Domaine : true (utilisable) | false (indisponible)
        // Formule : Try/catch sur op√©rations localStorage de base
        // Exemple : Navigation priv√©e ou quota d√©pass√© ‚Üí false
        try {
            const testKey = this.storagePrefix + 'test';
            localStorage.setItem(testKey, 'test');
            localStorage.removeItem(testKey);
            return true;
        } catch (error) {
            Utils.log('error', 'LocalStorage indisponible:', error.message);
            return false;
        }
    }
    
    /**
     * Programme un auto-save diff√©r√©
     * 
     * @param {string} action - Action qui d√©clenche la sauvegarde
     */
    scheduleAutoSave(action) {
        if (!this.autoSaveEnabled) return;
        
        // R√¥le : Planificateur de sauvegarde diff√©r√©e avec debounce
        // Type : Void (effet de bord timer)
        // Unit√© : millisecondes (ms)
        // Domaine : Timer actif avec delay configurable
        // Formule : clearTimeout + setTimeout pour debounce
        // Exemple : Modification ‚Üí attendre 2s silence ‚Üí auto-save
        this.hasUnsavedChanges = true;
        
        // Annule le timer pr√©c√©dent
        if (this.autoSaveTimer) {
            clearTimeout(this.autoSaveTimer);
        }
        
        // Programme nouvelle sauvegarde
        this.autoSaveTimer = setTimeout(() => {
            this.saveProject(false, `Auto-save: ${action}`);
            this.autoSaveTimer = null;
        }, this.autoSaveDelay);
        
        // Notification syst√®me
        this.eventManager.emit('persistence:auto-save-scheduled', {
            action,
            delay: this.autoSaveDelay
        });
    }
    
    /**
     * Sauvegarde le projet actuel
     * 
     * @param {boolean} synchronous - Sauvegarde synchrone
     * @param {string} description - Description de la sauvegarde
     * @returns {boolean} true si succ√®s
     */
    saveProject(synchronous = false, description = 'Sauvegarde manuelle') {
        if (!this.isStorageAvailable()) {
            this.eventManager.emit('persistence:save-failed', {
                reason: 'localStorage indisponible'
            });
            return false;
        }
        
        try {
            // R√¥le : S√©rialiseur et compresseur de l'√©tat projet complet
            // Type : String (JSON compress√©)
            // Unit√© : caract√®res (taille s√©rialis√©e)
            // Domaine : √âtat complet s√©rialis√© en JSON valide
            // Formule : JSON.stringify + compression optionnelle
            // Exemple : {widgets: [...]} ‚Üí "{"widgets":[...]}" (minifi√©)
            
            // Mise √† jour timestamp
            this.currentProject.metadata.modified = new Date().toISOString();
            
            // S√©rialisation
            const serializedProject = JSON.stringify(this.currentProject);
            const projectSize = serializedProject.length;
            
            // Sauvegarde principale
            const mainKey = this.storagePrefix + 'current-project';
            localStorage.setItem(mainKey, serializedProject);
            
            // Sauvegarde de r√©cup√©ration (backup)
            const backupKey = this.storagePrefix + 'project-backup';
            localStorage.setItem(backupKey, serializedProject);
            
            // Sauvegarde m√©tadonn√©es
            const metaKey = this.storagePrefix + 'project-meta';
            const metadata = {
                lastSaved: new Date().toISOString(),
                size: projectSize,
                description,
                version: this.currentProject.metadata.version
            };
            localStorage.setItem(metaKey, JSON.stringify(metadata));
            
            // Ajout √† l'historique si pas auto-save
            if (description !== 'Auto-save') {
                this.addToHistory(this.currentProject, description);
            }
            
            // Mise √† jour √©tat
            this.hasUnsavedChanges = false;
            
            Utils.log('success', `Projet sauvegard√©: ${description}`, {
                size: Utils.formatFileSize(projectSize),
                synchronous,
                historySize: this.history.length
            });
            
            // Notification r√©ussite
            this.eventManager.emit('persistence:save-success', {
                size: projectSize,
                description,
                timestamp: new Date().toISOString()
            });
            
            return true;
            
        } catch (error) {
            Utils.log('error', 'Erreur sauvegarde projet:', error);
            
            this.eventManager.emit('persistence:save-failed', {
                error: error.message,
                description
            });
            
            return false;
        }
    }
    
    /**
     * Charge le projet depuis localStorage
     * 
     * @returns {boolean} true si chargement r√©ussi
     */
    loadProject() {
        if (!this.isStorageAvailable()) {
            Utils.log('warn', 'Impossible de charger - localStorage indisponible');
            return false;
        }
        
        try {
            // R√¥le : D√©s√©rialiseur et restaurateur d'√©tat projet
            // Type : Object (projet restaur√©)
            // Unit√© : Sans unit√©
            // Domaine : √âtat complet avec structure valid√©e
            // Formule : JSON.parse + validation + fusion defaults
            // Exemple : localStorage ‚Üí objet projet complet
            
            const mainKey = this.storagePrefix + 'current-project';
            const savedProject = localStorage.getItem(mainKey);
            
            if (!savedProject) {
                Utils.log('info', 'Aucun projet sauv√© - utilisation d√©faut');
                return false;
            }
            
            // D√©s√©rialisation
            const project = JSON.parse(savedProject);
            
            // Validation basique structure
            if (!project.metadata || !project.widgets || !Array.isArray(project.widgets)) {
                throw new Error('Structure de projet invalide');
            }
            
            // Fusion avec structure par d√©faut pour nouvelles propri√©t√©s
            this.currentProject = Utils.deepMerge(this.getDefaultProject(), project);
            
            // Chargement m√©tadonn√©es
            const metaKey = this.storagePrefix + 'project-meta';
            const savedMeta = localStorage.getItem(metaKey);
            if (savedMeta) {
                const metadata = JSON.parse(savedMeta);
                
                Utils.log('success', 'Projet charg√© depuis localStorage', {
                    name: this.currentProject.metadata.name,
                    widgets: this.currentProject.widgets.length,
                    lastSaved: metadata.lastSaved,
                    size: Utils.formatFileSize(metadata.size)
                });
            }
            
            // Chargement historique si existant
            this.loadHistory();
            
            // Notification chargement
            this.eventManager.emit('persistence:project-loaded', {
                project: this.currentProject,
                fromStorage: true
            });
            
            return true;
            
        } catch (error) {
            Utils.log('error', 'Erreur chargement projet:', error);
            
            // Tentative de r√©cup√©ration depuis backup
            return this.loadProjectBackup();
        }
    }
    
    /**
     * Charge le projet depuis la sauvegarde de r√©cup√©ration
     * 
     * @returns {boolean} true si r√©cup√©ration r√©ussie
     */
    loadProjectBackup() {
        try {
            // R√¥le : Syst√®me de r√©cup√©ration depuis backup en cas d'erreur
            // Type : Boolean (succ√®s r√©cup√©ration)
            // Unit√© : Sans unit√©
            // Domaine : true (backup r√©cup√©r√©) | false (√©chec total)
            // Formule : Tentative chargement backup-key si main-key corrompu
            // Exemple : Corruption donn√©es principales ‚Üí fallback backup
            
            const backupKey = this.storagePrefix + 'project-backup';
            const backupProject = localStorage.getItem(backupKey);
            
            if (!backupProject) {
                throw new Error('Aucune sauvegarde de r√©cup√©ration disponible');
            }
            
            const project = JSON.parse(backupProject);
            this.currentProject = Utils.deepMerge(this.getDefaultProject(), project);
            
            Utils.log('warn', 'Projet r√©cup√©r√© depuis backup', {
                name: this.currentProject.metadata.name,
                widgets: this.currentProject.widgets.length
            });
            
            // Notification r√©cup√©ration
            this.eventManager.emit('persistence:project-recovered', {
                project: this.currentProject,
                fromBackup: true
            });
            
            return true;
            
        } catch (error) {
            Utils.log('error', 'Impossible de r√©cup√©rer le projet:', error);
            
            // Utilise projet par d√©faut
            this.currentProject = this.getDefaultProject();
            
            this.eventManager.emit('persistence:project-reset', {
                reason: 'R√©cup√©ration impossible'
            });
            
            return false;
        }
    }
    
    /**
     * Ajoute un √©tat √† l'historique pour undo/redo
     * 
     * @param {Object} state - √âtat √† sauvegarder
     * @param {string} action - Description de l'action
     */
    addToHistory(state, action) {
        // R√¥le : Enregistreur chronologique pour syst√®me undo/redo
        // Type : Void (effet de bord historique)
        // Unit√© : Sans unit√©
        // Domaine : Snapshot complet avec m√©tadonn√©es
        // Formule : push + slice pour maintenir limite + reset index
        // Exemple : Apr√®s cr√©ation widget ‚Üí snapshot pour pouvoir annuler
        
        // Clone profond pour √©viter r√©f√©rences partag√©es
        const snapshot = {
            state: Utils.deepClone(state),
            timestamp: Date.now(),
            action: action,
            id: Utils.generateId('snapshot')
        };
        
        // Si on √©tait au milieu de l'historique, supprime le futur
        if (this.currentHistoryIndex < this.history.length - 1) {
            this.history = this.history.slice(0, this.currentHistoryIndex + 1);
        }
        
        // Ajout nouveau snapshot
        this.history.push(snapshot);
        
        // Maintient la limite
        if (this.history.length > this.maxHistorySize) {
            this.history.shift();
        } else {
            this.currentHistoryIndex = this.history.length - 1;
        }
        
        // Sauvegarde historique
        this.saveHistory();
        
        // Notification
        this.eventManager.emit('persistence:history-updated', {
            action,
            historySize: this.history.length,
            canUndo: this.canUndo(),
            canRedo: this.canRedo()
        });
    }
    
    /**
     * Annule la derni√®re action (undo)
     * 
     * @returns {boolean} true si undo effectu√©
     */
    undo() {
        // R√¥le : Restaurateur d'√©tat pr√©c√©dent dans l'historique
        // Type : Boolean (succ√®s undo)
        // Unit√© : Sans unit√©
        // Domaine : true (undo effectu√©) | false (impossible)
        // Formule : currentHistoryIndex-- + restauration state[index]
        // Exemple : Apr√®s cr√©ation widget ‚Üí undo ‚Üí √©tat sans widget
        
        if (!this.canUndo()) {
            Utils.log('warn', 'Undo impossible - d√©but de l\'historique atteint');
            return false;
        }
        
        this.currentHistoryIndex--;
        const snapshot = this.history[this.currentHistoryIndex];
        
        // D√©sactive auto-save pendant restoration
        const wasAutoSaveEnabled = this.autoSaveEnabled;
        this.autoSaveEnabled = false;
        
        try {
            // Restauration √©tat
            this.currentProject = Utils.deepClone(snapshot.state);
            
            Utils.log('info', `Undo effectu√©: ${snapshot.action}`, {
                timestamp: Utils.formatDate(snapshot.timestamp),
                historyIndex: this.currentHistoryIndex
            });
            
            // Notification
            this.eventManager.emit('persistence:undo', {
                action: snapshot.action,
                timestamp: snapshot.timestamp,
                canUndo: this.canUndo(),
                canRedo: this.canRedo()
            });
            
            return true;
            
        } finally {
            // R√©active auto-save
            this.autoSaveEnabled = wasAutoSaveEnabled;
        }
    }
    
    /**
     * Refait la derni√®re action annul√©e (redo)
     * 
     * @returns {boolean} true si redo effectu√©
     */
    redo() {
        // R√¥le : Restaurateur d'√©tat suivant dans l'historique
        // Type : Boolean (succ√®s redo)
        // Unit√© : Sans unit√©
        // Domaine : true (redo effectu√©) | false (impossible)
        // Formule : currentHistoryIndex++ + restauration state[index]
        // Exemple : Apr√®s undo cr√©ation widget ‚Üí redo ‚Üí widget r√©appara√Æt
        
        if (!this.canRedo()) {
            Utils.log('warn', 'Redo impossible - fin de l\'historique atteinte');
            return false;
        }
        
        this.currentHistoryIndex++;
        const snapshot = this.history[this.currentHistoryIndex];
        
        // D√©sactive auto-save pendant restoration
        const wasAutoSaveEnabled = this.autoSaveEnabled;
        this.autoSaveEnabled = false;
        
        try {
            // Restauration √©tat
            this.currentProject = Utils.deepClone(snapshot.state);
            
            Utils.log('info', `Redo effectu√©: ${snapshot.action}`, {
                timestamp: Utils.formatDate(snapshot.timestamp),
                historyIndex: this.currentHistoryIndex
            });
            
            // Notification
            this.eventManager.emit('persistence:redo', {
                action: snapshot.action,
                timestamp: snapshot.timestamp,
                canUndo: this.canUndo(),
                canRedo: this.canRedo()
            });
            
            return true;
            
        } finally {
            // R√©active auto-save
            this.autoSaveEnabled = wasAutoSaveEnabled;
        }
    }
    
    /**
     * V√©rifie si un undo est possible
     * 
     * @returns {boolean} true si undo possible
     */
    canUndo() {
        // R√¥le : V√©rificateur de possibilit√© undo
        // Type : Boolean (capacit√© undo)
        // Unit√© : Sans unit√©
        // Domaine : true (undo possible) | false (impossible)
        // Formule : currentHistoryIndex > 0
        // Exemple : Index 5 sur 10 ‚Üí true, Index 0 ‚Üí false
        return this.currentHistoryIndex > 0;
    }
    
    /**
     * V√©rifie si un redo est possible
     * 
     * @returns {boolean} true si redo possible
     */
    canRedo() {
        // R√¥le : V√©rificateur de possibilit√© redo
        // Type : Boolean (capacit√© redo)
        // Unit√© : Sans unit√©
        // Domaine : true (redo possible) | false (impossible)
        // Formule : currentHistoryIndex < history.length - 1
        // Exemple : Index 5 sur 10 ‚Üí true, Index 9 sur 10 ‚Üí false
        return this.currentHistoryIndex < this.history.length - 1;
    }
    
    /**
     * Sauvegarde l'historique dans localStorage
     */
    saveHistory() {
        if (!this.isStorageAvailable()) return;
        
        try {
            // R√¥le : Persisteur de l'historique undo/redo
            // Type : Void (effet de bord localStorage)
            // Unit√© : Sans unit√©
            // Domaine : Historique complet s√©rialis√©
            // Formule : JSON.stringify(history + index)
            // Exemple : 100 snapshots ‚Üí sauvegarde pour r√©cup√©ration apr√®s F5
            
            const historyData = {
                history: this.history,
                currentIndex: this.currentHistoryIndex,
                saved: new Date().toISOString()
            };
            
            const historyKey = this.storagePrefix + 'history';
            localStorage.setItem(historyKey, JSON.stringify(historyData));
            
        } catch (error) {
            Utils.log('error', 'Erreur sauvegarde historique:', error);
        }
    }
    
    /**
     * Charge l'historique depuis localStorage
     */
    loadHistory() {
        if (!this.isStorageAvailable()) return;
        
        try {
            // R√¥le : Restaurateur de l'historique undo/redo
            // Type : Void (effet de bord this.history)
            // Unit√© : Sans unit√©
            // Domaine : Historique complet avec index
            // Formule : JSON.parse + validation structure
            // Exemple : Apr√®s F5 ‚Üí historique intact pour undo/redo
            
            const historyKey = this.storagePrefix + 'history';
            const savedHistory = localStorage.getItem(historyKey);
            
            if (!savedHistory) return;
            
            const historyData = JSON.parse(savedHistory);
            
            if (historyData.history && Array.isArray(historyData.history)) {
                this.history = historyData.history;
                this.currentHistoryIndex = historyData.currentIndex || -1;
                
                Utils.log('success', 'Historique charg√©', {
                    snapshots: this.history.length,
                    currentIndex: this.currentHistoryIndex
                });
            }
            
        } catch (error) {
            Utils.log('error', 'Erreur chargement historique:', error);
            this.history = [];
            this.currentHistoryIndex = -1;
        }
    }
    
    /**
     * Exporte le projet vers un fichier JSON
     * 
     * @returns {string} JSON du projet
     */
    exportProject() {
        // R√¥le : G√©n√©rateur de fichier export projet complet
        // Type : String (JSON format√©)
        // Unit√© : Sans unit√©
        // Domaine : Projet complet avec m√©tadonn√©es export
        // Formule : JSON.stringify avec m√©tadonn√©es ajout√©es
        // Exemple : Bouton export ‚Üí t√©l√©chargement .json
        
        const exportData = {
            ...this.currentProject,
            exportMetadata: {
                exportedAt: new Date().toISOString(),
                exportedBy: '√âditeur R√©volutionnaire',
                version: '1.0.0',
                format: 'presentation-editor-project'
            }
        };
        
        const jsonStr = JSON.stringify(exportData, null, 2);
        
        Utils.log('info', 'Projet export√©', {
            size: Utils.formatFileSize(jsonStr.length),
            widgets: exportData.widgets.length
        });
        
        this.eventManager.emit('persistence:project-exported', {
            size: jsonStr.length,
            format: 'json'
        });
        
        return jsonStr;
    }
    
    /**
     * Importe un projet depuis JSON
     * 
     * @param {string} jsonData - Donn√©es JSON
     * @returns {boolean} true si import r√©ussi
     */
    importProject(jsonData) {
        try {
            // R√¥le : Parseur et validateur de projet import√©
            // Type : Boolean (succ√®s import)
            // Unit√© : Sans unit√©
            // Domaine : true (projet valide) | false (erreur)
            // Formule : JSON.parse + validation + fusion defaults
            // Exemple : Upload .json ‚Üí remplace projet actuel
            
            const importedProject = JSON.parse(jsonData);
            
            // Validation structure
            if (!importedProject.metadata || !importedProject.widgets) {
                throw new Error('Format de projet invalide');
            }
            
            // Sauvegarde √©tat actuel avant import
            this.addToHistory(this.currentProject, 'Avant import');
            
            // D√©sactive auto-save pendant import
            const wasAutoSaveEnabled = this.autoSaveEnabled;
            this.autoSaveEnabled = false;
            
            try {
                // Fusion avec d√©fauts pour nouvelles propri√©t√©s
                this.currentProject = Utils.deepMerge(
                    this.getDefaultProject(), 
                    importedProject
                );
                
                // Mise √† jour timestamps
                this.currentProject.metadata.modified = new Date().toISOString();
                
                Utils.log('success', 'Projet import√©', {
                    name: this.currentProject.metadata.name,
                    widgets: this.currentProject.widgets.length,
                    importSize: Utils.formatFileSize(jsonData.length)
                });
                
                // Sauvegarde imm√©diate
                this.saveProject(false, 'Import projet');
                
                // Notification
                this.eventManager.emit('persistence:project-imported', {
                    project: this.currentProject,
                    size: jsonData.length
                });
                
                return true;
                
            } finally {
                this.autoSaveEnabled = wasAutoSaveEnabled;
            }
            
        } catch (error) {
            Utils.log('error', 'Erreur import projet:', error);
            
            this.eventManager.emit('persistence:import-failed', {
                error: error.message
            });
            
            return false;
        }
    }
    
    /**
     * Obtient les informations sur l'√©tat de sauvegarde
     * 
     * @returns {Object} √âtat complet du syst√®me
     */
    getStatus() {
        // R√¥le : G√©n√©rateur de rapport d'√©tat complet
        // Type : Object (m√©triques syst√®me)
        // Unit√© : Diverses (tailles, compteurs, flags)
        // Domaine : Vue d'ensemble du syst√®me de persistance
        // Formule : Agr√©gation de tous indicateurs
        // Exemple : Interface admin ou debug
        
        return {
            hasUnsavedChanges: this.hasUnsavedChanges,
            autoSaveEnabled: this.autoSaveEnabled,
            storageAvailable: this.isStorageAvailable(),
            project: {
                name: this.currentProject.metadata.name,
                widgets: this.currentProject.widgets.length,
                lastModified: this.currentProject.metadata.modified
            },
            history: {
                size: this.history.length,
                maxSize: this.maxHistorySize,
                currentIndex: this.currentHistoryIndex,
                canUndo: this.canUndo(),
                canRedo: this.canRedo()
            },
            autoSave: {
                delay: this.autoSaveDelay,
                scheduled: !!this.autoSaveTimer
            }
        };
    }
    
    /**
     * Nettoie les ressources du syst√®me
     */
    destroy() {
        // R√¥le : Destructeur complet du syst√®me de persistance
        // Type : Void (effet de bord)
        // Unit√© : Sans unit√©
        // Domaine : Lib√©ration compl√®te des ressources
        // Formule : Clear timers + save final + clear data
        // Exemple : Avant rechargement ou fermeture application
        
        // Sauvegarde finale si n√©cessaire
        if (this.hasUnsavedChanges) {
            this.saveProject(true, 'Sauvegarde finale');
        }
        
        // Nettoyage timer
        if (this.autoSaveTimer) {
            clearTimeout(this.autoSaveTimer);
            this.autoSaveTimer = null;
        }
        
        // Sauvegarde historique final
        this.saveHistory();
        
        Utils.log('warn', 'Syst√®me de persistance d√©truit');
    }
}

// Export pour utilisation globale
window.Persistence = Persistence;