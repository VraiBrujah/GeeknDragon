/**
 * üß± BASEWIDGET - CLASSE PARENT ATOMIQUE SIMPLIFI√âE
 * 
 * R√¥le : Classe parent commune √† tous les widgets atomiques
 * Type : Classe abstraite avec fonctionnalit√©s de base r√©utilisables
 * Unit√© : Widget = une responsabilit√© unique et testable
 * Domaine : Base pour WidgetTexte, WidgetImage, etc.
 * Formule : H√©ritage + Composition = R√©utilisation maximale
 * Exemple : BaseWidget ‚Üí WidgetTexte (contenu texte uniquement)
 */

// Namespace global pour √©viter les conflits de noms
window.WidgetEditor = window.WidgetEditor || {};

/**
 * Classe BaseWidget - Fondation commune pour tous les widgets atomiques
 * Architecture SOLID : Single Responsibility, Open/Closed, Liskov Substitution
 */
window.WidgetEditor.BaseWidget = class BaseWidget {
    /**
     * Constructeur de base pour tous les widgets
     * 
     * R√¥le : Initialisation des propri√©t√©s communes partag√©es
     * Type : Constructeur abstrait (ne pas instancier directement)
     * Unit√© : Instance de widget avec ID unique
     * Domaine : Tous les types de widgets h√©ritent de cette base
     * Formule : new Widget(editor, id, options) ‚Üí instance configur√©e
     * Exemple : new WidgetTexte(editor, "widget_1", { content: "Hello" })
     * 
     * @param {Object} editor - R√©f√©rence vers l'√©diteur principal
     * @param {string} widgetId - Identifiant unique du widget
     * @param {Object} options - Options de configuration initiale
     */
    constructor(editor, widgetId, options = {}) {
        // === V√âRIFICATION H√âRITAGE ===
        // Emp√™che l'instanciation directe de BaseWidget (classe abstraite)
        if (this.constructor === BaseWidget) {
            throw new Error('BaseWidget est une classe abstraite - utilisez WidgetTexte, WidgetImage, etc.');
        }
        
        // === R√âF√âRENCES SYST√àME ===
        // R√©f√©rence : Lien vers l'√©diteur principal pour communication
        // Type : Object (instance Editor)
        // Unit√© : Instance unique de l'√©diteur
        // Domaine : Editor valide et initialis√©
        // Exemple : this.editor.selectWidget(this)
        this.editor = editor;
        
        // Identifiant : ID unique pour identification et persistance
        // Type : string (format: "widget_counter_timestamp")
        // Unit√© : Caract√®res alphanum√©riques et underscores
        // Domaine : Unique dans toute l'application
        // Exemple : "widget_1_1703875432123"
        this.id = widgetId;
        
        // === CONFIGURATION WIDGET ===
        // Configuration : Param√®tres du widget (position, dimensions, styles)
        // Type : Object avec propri√©t√©s imbriqu√©es
        // Unit√© : Configuration compl√®te et coh√©rente
        // Domaine : Valeurs valides selon contraintes m√©tier
        // Formule : config = defaults ‚à™ options (union avec priorit√© options)
        // Exemple : { position: {x: 100, y: 50}, dimensions: {width: 300} }
        this.config = {
            // Position : Coordonn√©es absolues dans la grille
            // Type : Object {x: number, y: number}
            // Unit√© : Pixels depuis origine (0,0) en haut-gauche
            // Domaine : x,y ‚àà [-10000, 10000] (limites grille infinie)
            // Exemple : {x: 150, y: 75}
            position: {
                x: options.x || 100,
                y: options.y || 100
            },
            
            // Dimensions : Taille du widget
            // Type : Object {width: number|string, height: number|string}
            // Unit√© : Pixels ou 'auto' pour hauteur adaptative
            // Domaine : width ‚àà [50, 1200], height ‚àà [30, ‚àû] ou 'auto'
            // Exemple : {width: 300, height: 'auto'}
            dimensions: {
                width: options.width || 300,
                height: options.height || 'auto',
                minWidth: 50,
                minHeight: 30,
                maxWidth: 1200
            },
            
            // Styles : Propri√©t√©s visuelles CSS
            // Type : Object avec propri√©t√©s CSS
            // Unit√© : Valeurs CSS valides (px, couleurs hex/rgba, etc.)
            // Domaine : Propri√©t√©s CSS standards
            // Exemple : {backgroundColor: '#ffffff', borderRadius: 8}
            styles: {
                backgroundColor: options.backgroundColor || 'transparent',
                borderColor: options.borderColor || '#e2e8f0',
                borderWidth: options.borderWidth || 1,
                borderStyle: options.borderStyle || 'solid',
                borderRadius: options.borderRadius || 4,
                padding: options.padding || 16
            },
            
            // √âtats : Propri√©t√©s d'√©tat du widget
            // Type : Boolean pour chaque √©tat
            // Unit√© : true/false
            // Domaine : √âtats mutuellement compatibles
            // Exemple : {isSelected: false, isVisible: true}
            isSelected: false,
            isVisible: options.isVisible !== false,
            isLocked: options.isLocked || false,
            isEditing: false
        };
        
        // === √âL√âMENTS DOM ===
        // √âl√©ments : R√©f√©rences vers les √©l√©ments DOM du widget
        // Type : Object avec propri√©t√©s HTMLElement
        // Unit√© : √âl√©ments DOM cr√©√©s et r√©f√©renc√©s
        // Domaine : √âl√©ments valides et attach√©s au document
        // Exemple : {container: div.widget, contentArea: div.content}
        this.elements = {
            container: null,     // Conteneur principal du widget
            contentArea: null    // Zone de contenu √©ditable
        };
        
        // === GESTIONNAIRES √âV√âNEMENTS ===
        // Gestionnaires : Collection des event listeners pour nettoyage
        // Type : Map<string, Array<EventListenerConfig>>
        // Unit√© : Gestionnaire = {element, event, handler}
        // Domaine : √âv√©nements DOM valides
        // Formule : Map permet O(1) pour ajout/suppression
        // Exemple : Map{ 'click' => [{element: div, event: 'click', handler: fn}] }
        this.eventHandlers = new Map();
        
        // === INITIALISATION ===
        // D√©marrage automatique de la cr√©ation DOM et configuration
        this.init();
    }
    
    /**
     * Initialisation du widget - Template Method Pattern
     * 
     * R√¥le : S√©quence d'initialisation standardis√©e pour tous les widgets
     * Type : M√©thode template avec √©tapes fixes
     * Unit√© : Initialisation compl√®te et coh√©rente
     * Domaine : Toujours r√©ussir ou lever une exception
     * Formule : init() = createDOM() ‚Üí setupEvents() ‚Üí applyStyles() ‚Üí render()
     * Exemple : Appel√© automatiquement dans le constructeur
     */
    init() {
        try {
            // √âtape 1 : Cr√©ation de la structure DOM
            this.createDOM();
            
            // √âtape 2 : Configuration des √©v√©nements interactifs
            this.setupEvents();
            
            // √âtape 3 : Application des styles CSS
            this.applyStyles();
            
            // √âtape 4 : Initialisation du contenu sp√©cifique (√† surcharger)
            this.initializeContent();
            
            console.log(`[BaseWidget] Widget initialis√©: ${this.id}`);
            
        } catch (error) {
            console.error(`[BaseWidget] Erreur initialisation widget ${this.id}:`, error);
            throw error;
        }
    }
    
    /**
     * Cr√©ation de la structure DOM de base
     * 
     * R√¥le : Cr√©er les √©l√©ments DOM communs √† tous les widgets
     * Type : M√©thode de cr√©ation DOM standardis√©e
     * Unit√© : Structure DOM compl√®te et valide
     * Domaine : √âl√©ments DOM bien form√©s et accessibles
     * Formule : DOM = container(contentArea) avec attributs m√©tier
     * Exemple : <div class="widget" data-widget-id="123"><div class="content"></div></div>
     */
    createDOM() {
        // === CONTENEUR PRINCIPAL ===
        // Container : √âl√©ment racine positionn√© et dimensionn√©
        // Type : HTMLDivElement
        // Unit√© : Element DOM avec classes CSS et attributs m√©tier
        // Domaine : Position absolue dans la grille parente
        // Exemple : <div class="base-widget" style="position: absolute; left: 100px; top: 50px;">
        this.elements.container = document.createElement('div');
        this.elements.container.className = 'base-widget';
        this.elements.container.id = this.id;
        this.elements.container.style.position = 'absolute';
        this.elements.container.style.cursor = 'pointer';
        
        // Attributs m√©tier pour identification et s√©lection
        this.elements.container.setAttribute('data-widget-type', this.getType());
        this.elements.container.setAttribute('data-widget-id', this.id);
        
        // === ZONE DE CONTENU ===
        // ContentArea : Zone √©ditable pour le contenu du widget
        // Type : HTMLDivElement
        // Unit√© : Zone de contenu avec styles de base
        // Domaine : Contenu textuel, images, ou autres √©l√©ments sp√©cifiques
        // Exemple : <div class="widget-content" contenteditable="false">Contenu</div>
        this.elements.contentArea = document.createElement('div');
        this.elements.contentArea.className = 'widget-content';
        this.elements.contentArea.style.width = '100%';
        this.elements.contentArea.style.minHeight = '20px';
        this.elements.contentArea.style.outline = 'none';
        
        // === ASSEMBLAGE DOM ===
        // Formule : container.appendChild(contentArea) = hi√©rarchie parent-enfant
        this.elements.container.appendChild(this.elements.contentArea);
        
        // === DIMENSIONS INITIALES ===
        this.updateDimensions();
    }
    
    /**
     * Configuration des √©v√©nements de base
     * 
     * R√¥le : Ajouter les interactions communes (clic, double-clic, drag)
     * Type : Configuration d'√©v√©nements DOM standardis√©e
     * Unit√© : Ensemble coh√©rent d'interactions utilisateur
     * Domaine : √âv√©nements DOM standards et compatibles navigateurs
     * Formule : Events = Selection + Edition + Drag (comportements additifs)
     * Exemple : Click ‚Üí select, DoubleClick ‚Üí edit, MouseDown ‚Üí drag
     */
    setupEvents() {
        const container = this.elements.container;
        const contentArea = this.elements.contentArea;
        
        // === S√âLECTION WIDGET ===
        // √âv√©nement : Clic simple pour s√©lectionner le widget
        // Type : Event listener 'click'
        // Unit√© : S√©lection unique (d√©s√©lection des autres)
        // Domaine : Clic dans la zone du widget
        // Formule : click(widget) ‚Üí select(widget) ‚àß deselect(others)
        // Exemple : Clic sur texte ‚Üí bordure bleue de s√©lection
        this.addEventHandler(container, 'click', (e) => {
            e.stopPropagation();
            this.setSelected(true);
            this.editor?.selectWidget?.(this);
        });
        
        // === √âDITION INLINE ===
        // √âv√©nement : Double-clic pour d√©marrer l'√©dition
        // Type : Event listener 'dblclick'
        // Unit√© : Basculement en mode √©dition
        // Domaine : Double-clic sur zone de contenu
        // Formule : dblclick(content) ‚Üí startEditing() si !isLocked
        // Exemple : Double-clic sur texte ‚Üí mode √©dition contenteditable
        this.addEventHandler(contentArea, 'dblclick', (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (!this.config.isLocked) {
                this.startEditing();
            }
        });
        
        // === D√âPLACEMENT DRAG & DROP ===
        // √âv√©nement : MouseDown pour initier le d√©placement
        // Type : Event listener 'mousedown'
        // Unit√© : D√©marrage du drag repositionnement
        // Domaine : Clic maintenu sur widget non verrouill√©
        // Formule : mousedown(widget) ‚Üí drag(widget) si !isLocked
        // Exemple : Clic-maintenu sur widget ‚Üí curseur d√©placement + suivi souris
        this.addEventHandler(container, 'mousedown', (e) => {
            if (this.config.isLocked) return;
            
            // D√©l√©gation au syst√®me drag & drop de l'√©diteur
            if (this.editor?.state?.dragDrop) {
                this.editor.state.dragDrop.startWidgetRepositioning(e, this);
            }
        });
    }
    
    /**
     * Application des styles CSS selon la configuration
     * 
     * R√¥le : Appliquer visuellement la configuration styles du widget
     * Type : Mapping configuration ‚Üí styles CSS
     * Unit√© : Styles visuels coh√©rents et valides
     * Domaine : Propri√©t√©s CSS compatibles navigateurs
     * Formule : CSS = config.styles + config.position + config.dimensions + states
     * Exemple : {borderWidth: 2, borderColor: '#blue'} ‚Üí style="border: 2px solid #blue"
     */
    applyStyles() {
        const container = this.elements.container;
        const styles = this.config.styles;
        
        // === STYLES VISUELS DE BASE ===
        // Application : Propri√©t√©s de fond et bordures
        // Formule : style[property] = config.styles[property]
        container.style.backgroundColor = styles.backgroundColor;
        container.style.border = `${styles.borderWidth}px ${styles.borderStyle} ${styles.borderColor}`;
        container.style.borderRadius = `${styles.borderRadius}px`;
        container.style.padding = `${styles.padding}px`;
        
        // === √âTAT DE S√âLECTION ===
        // Style conditionnel : Bordure de s√©lection si widget s√©lectionn√©
        // Type : Style conditionnel bas√© sur √©tat bool√©en
        // Formule : style = isSelected ? selectedStyle : normalStyle
        // Exemple : isSelected=true ‚Üí boxShadow='0 0 0 2px blue'
        if (this.config.isSelected) {
            container.classList.add('selected');
            container.style.boxShadow = '0 0 0 2px #60a5fa, 0 0 0 4px rgba(96, 165, 250, 0.3)';
        } else {
            container.classList.remove('selected');
            container.style.boxShadow = 'none';
        }
        
        // === VISIBILIT√â ===
        // Affichage : Contr√¥le de la visibilit√© du widget
        // Formule : display = isVisible ? 'block' : 'none'
        container.style.display = this.config.isVisible ? 'block' : 'none';
        
        // === √âTAT VERROUILL√â ===
        // Styles verrouillage : Indication visuelle du verrouillage
        // Formule : locked ‚Üí cursor + opacity pour feedback utilisateur
        if (this.config.isLocked) {
            container.style.cursor = 'not-allowed';
            container.style.opacity = '0.7';
        } else {
            container.style.cursor = 'pointer';
            container.style.opacity = '1';
        }
    }
    
    /**
     * Mise √† jour des dimensions et position
     * 
     * R√¥le : Appliquer les dimensions et position configur√©es au DOM
     * Type : Synchronisation configuration ‚Üí styles DOM
     * Unit√© : Dimensions et position coh√©rentes
     * Domaine : Valeurs positives pour dimensions, coordonn√©es dans limites grille
     * Formule : DOM.style = config.dimensions + config.position
     * Exemple : config{width:300, x:100} ‚Üí style="width:300px; left:100px"
     */
    updateDimensions() {
        const container = this.elements.container;
        const dimensions = this.config.dimensions;
        
        // === APPLICATION LARGEUR ===
        // Largeur : Toujours en pixels pour contr√¥le pr√©cis
        // Formule : width = isNumber(width) ? width + 'px' : width
        container.style.width = typeof dimensions.width === 'number' ? 
            `${dimensions.width}px` : dimensions.width;
        
        // === APPLICATION HAUTEUR ===
        // Hauteur : Auto-adaptative ou fixe selon configuration
        // Formule : height = (height === 'auto') ? 'auto' : height + 'px'
        if (dimensions.height === 'auto') {
            // Mode auto : Hauteur selon contenu (d√©fini dans classes enfants)
            container.style.height = 'auto';
        } else {
            container.style.height = `${dimensions.height}px`;
        }
        
        // === APPLICATION POSITION ===
        // Position : Coordonn√©es absolues dans la grille
        // Formule : position = 'absolute' + left + top
        container.style.left = `${this.config.position.x}px`;
        container.style.top = `${this.config.position.y}px`;
    }
    
    // === M√âTHODES ABSTRAITES ===
    // Ces m√©thodes doivent √™tre surcharg√©es dans les classes enfants
    
    /**
     * Initialisation du contenu sp√©cifique (√Ä SURCHARGER)
     * 
     * R√¥le : Initialisation du contenu sp√©cifique au type de widget
     * Type : M√©thode abstraite virtuelle
     * Unit√© : Contenu initialis√© selon type (texte, image, etc.)
     * Domaine : Contenu valide selon type de widget
     * Formule : Impl√©mentation sp√©cifique dans chaque classe enfant
     * Exemple : WidgetTexte ‚Üí rendu Markdown, WidgetImage ‚Üí chargement image
     */
    initializeContent() {
        // M√©thode virtuelle - √Ä impl√©menter dans les classes enfants
        console.warn(`[BaseWidget] initializeContent() doit √™tre impl√©ment√©e dans ${this.constructor.name}`);
    }
    
    /**
     * D√©marrage de l'√©dition (√Ä SURCHARGER)
     * 
     * R√¥le : Basculer en mode √©dition selon le type de widget
     * Type : M√©thode abstraite virtuelle
     * Unit√© : Mode √©dition activ√© et fonctionnel
     * Domaine : √âdition appropri√©e au contenu (texte, propri√©t√©s, etc.)
     * Formule : Impl√©mentation sp√©cifique dans chaque classe enfant
     * Exemple : WidgetTexte ‚Üí contenteditable, WidgetImage ‚Üí s√©lecteur fichier
     */
    startEditing() {
        // M√©thode virtuelle - √Ä impl√©menter dans les classes enfants
        console.warn(`[BaseWidget] startEditing() doit √™tre impl√©ment√©e dans ${this.constructor.name}`);
    }
    
    /**
     * Retour du type de widget (√Ä SURCHARGER)
     * 
     * R√¥le : Identifier le type de widget pour s√©rialisation et affichage
     * Type : Getter de type abstrait
     * Unit√© : Cha√Æne identifiant le type
     * Domaine : Types pr√©d√©finis ('text', 'image', 'button', etc.)
     * Formule : return 'typename' dans chaque classe enfant
     * Exemple : WidgetTexte ‚Üí 'text', WidgetImage ‚Üí 'image'
     */
    getType() {
        // M√©thode abstraite - √Ä impl√©menter dans les classes enfants
        return 'base'; 
    }
    
    // === INTERFACE PUBLIQUE COMMUNE ===
    
    /**
     * Rendu du widget dans un conteneur parent
     * 
     * R√¥le : Ajouter le widget au DOM d'un conteneur parent
     * Type : M√©thode d'insertion DOM
     * Unit√© : Widget visible et interactif dans le parent
     * Domaine : Parent doit √™tre un √©l√©ment DOM valide
     * Formule : parent.appendChild(widget.container)
     * Exemple : gridElement.appendChild(widgetTexte.container)
     * 
     * @param {HTMLElement} parent - √âl√©ment parent o√π ins√©rer le widget
     */
    render(parent) {
        if (parent && typeof parent.appendChild === 'function') {
            parent.appendChild(this.elements.container);
            console.log(`[BaseWidget] Widget rendu: ${this.id}`);
        } else {
            console.error(`[BaseWidget] Parent invalide pour rendu: ${this.id}`);
        }
    }
    
    /**
     * D√©finition de l'√©tat de s√©lection
     * 
     * R√¥le : Changer l'√©tat s√©lectionn√© et mettre √† jour l'affichage
     * Type : Setter d'√©tat avec effet de bord visuel
     * Unit√© : √âtat de s√©lection coh√©rent
     * Domaine : Boolean true/false
     * Formule : setSelected(bool) ‚Üí config.isSelected = bool ‚Üí applyStyles()
     * Exemple : setSelected(true) ‚Üí bordure bleue visible
     * 
     * @param {boolean} selected - Nouvel √©tat s√©lectionn√©
     */
    setSelected(selected) {
        this.config.isSelected = selected;
        this.applyStyles();
    }
    
    /**
     * Modification de la position
     * 
     * R√¥le : D√©placer le widget vers de nouvelles coordonn√©es
     * Type : Setter de position avec mise √† jour DOM
     * Unit√© : Position en pixels depuis origine grille
     * Domaine : x,y ‚àà [-10000, 10000] (limites grille)
     * Formule : setPosition(x,y) ‚Üí config.position = {x,y} ‚Üí updateDimensions()
     * Exemple : setPosition(200, 150) ‚Üí widget d√©plac√© vers (200px, 150px)
     * 
     * @param {number} x - Nouvelle position X en pixels
     * @param {number} y - Nouvelle position Y en pixels
     */
    setPosition(x, y) {
        this.config.position.x = x;
        this.config.position.y = y;
        this.updateDimensions();
    }
    
    /**
     * D√©finition de la visibilit√©
     * 
     * R√¥le : Afficher ou masquer le widget
     * Type : Setter de visibilit√© avec effet DOM
     * Unit√© : Visibilit√© coh√©rente
     * Domaine : Boolean true/false
     * Formule : setVisible(bool) ‚Üí config.isVisible = bool ‚Üí applyStyles()
     * Exemple : setVisible(false) ‚Üí widget masqu√© (display: none)
     * 
     * @param {boolean} visible - Nouvel √©tat de visibilit√©
     */
    setVisible(visible) {
        this.config.isVisible = visible;
        this.applyStyles();
    }
    
    /**
     * D√©finition de l'√©tat verrouill√©
     * 
     * R√¥le : Verrouiller ou d√©verrouiller le widget (emp√™che √©dition/d√©placement)
     * Type : Setter d'√©tat avec feedback visuel
     * Unit√© : √âtat de verrouillage coh√©rent
     * Domaine : Boolean true/false
     * Formule : setLocked(bool) ‚Üí config.isLocked = bool ‚Üí applyStyles()
     * Exemple : setLocked(true) ‚Üí curseur interdit + opacit√© r√©duite
     * 
     * @param {boolean} locked - Nouvel √©tat verrouill√©
     */
    setLocked(locked) {
        this.config.isLocked = locked;
        this.applyStyles();
    }
    
    // === GETTERS POUR COMPATIBILIT√â ===
    
    /**
     * Retourne l'ID unique du widget
     * @returns {string} ID du widget
     */
    getId() {
        return this.id;
    }
    
    /**
     * Retourne la position actuelle
     * @returns {Object} Position {x, y}
     */
    getPosition() {
        return {
            x: this.config.position.x,
            y: this.config.position.y
        };
    }
    
    /**
     * Retourne les dimensions actuelles
     * @returns {Object} Dimensions {width, height}
     */
    getDimensions() {
        return {
            width: this.config.dimensions.width,
            height: this.config.dimensions.height === 'auto' ? 
                (this.elements.container?.offsetHeight || 100) : 
                this.config.dimensions.height
        };
    }
    
    /**
     * V√©rifie si le widget est verrouill√©
     * @returns {boolean} True si verrouill√©
     */
    isLocked() {
        return this.config.isLocked || false;
    }
    
    /**
     * V√©rifie si le widget est visible
     * @returns {boolean} True si visible
     */
    isVisible() {
        return this.config.isVisible !== false;
    }
    
    // === GESTION √âV√âNEMENTS UTILITAIRE ===
    
    /**
     * Ajout d'un gestionnaire d'√©v√©nement avec tracking
     * 
     * R√¥le : Ajouter un √©v√©nement DOM avec suivi pour nettoyage ult√©rieur
     * Type : Wrapper addEventListener avec r√©f√©rencement
     * Unit√© : Event listener track√© et nettoyable
     * Domaine : √âv√©nements DOM standards
     * Formule : addEventListener + Map.set(key, handlers[])
     * Exemple : addEventHandler(div, 'click', fn) ‚Üí div √©coute click + trackage
     * 
     * @param {HTMLElement} element - √âl√©ment DOM cible
     * @param {string} event - Type d'√©v√©nement ('click', 'mouseover', etc.)
     * @param {Function} handler - Fonction gestionnaire d'√©v√©nement
     */
    addEventHandler(element, event, handler) {
        // Ajout de l'√©v√©nement DOM standard
        element.addEventListener(event, handler);
        
        // === TRACKING POUR NETTOYAGE ===
        // Map tracking : Permet nettoyage lors de la destruction
        // Cl√© : Combinaison element + event pour unicit√©
        // Valeur : Array de handlers pour ce m√™me √©v√©nement
        const key = `${element.className || 'element'}-${event}`;
        if (!this.eventHandlers.has(key)) {
            this.eventHandlers.set(key, []);
        }
        this.eventHandlers.get(key).push({ element, event, handler });
    }
    
    /**
     * Notification de changement pour l'√©diteur
     * 
     * R√¥le : Informer l'√©diteur parent qu'une modification a eu lieu
     * Type : Callback de notification
     * Unit√© : Notification de changement
     * Domaine : Changements n√©cessitant sauvegarde/synchronisation
     * Formule : onChange() ‚Üí editor.onWidgetChanged(this) ‚Üí save() + sync()
     * Exemple : Modification texte ‚Üí notification ‚Üí sauvegarde automatique
     */
    notifyChange() {
        if (this.editor && typeof this.editor.onWidgetChanged === 'function') {
            this.editor.onWidgetChanged(this);
        }
    }
    
    /**
     * Nettoyage complet du widget
     * 
     * R√¥le : Lib√©rer toutes les ressources et r√©f√©rences avant destruction
     * Type : Destructor pattern pour √©viter les fuites m√©moire
     * Unit√© : Widget compl√®tement nettoy√©
     * Domaine : Toutes les ressources DOM et √©v√©nements
     * Formule : removeEventListeners() + removeDOM() + clearReferences()
     * Exemple : Suppression widget ‚Üí destroy() ‚Üí nettoyage complet
     */
    destroy() {
        // === NETTOYAGE √âV√âNEMENTS ===
        // Suppression : Tous les event listeners ajout√©s via addEventHandler
        this.eventHandlers.forEach((handlers) => {
            handlers.forEach(({ element, event, handler }) => {
                element.removeEventListener(event, handler);
            });
        });
        this.eventHandlers.clear();
        
        // === SUPPRESSION DOM ===
        // Retrait : √âl√©ment du DOM parent
        if (this.elements.container && this.elements.container.parentNode) {
            this.elements.container.parentNode.removeChild(this.elements.container);
        }
        
        // === NETTOYAGE R√âF√âRENCES ===
        this.editor = null;
        this.elements = {};
        
        console.log(`[BaseWidget] Widget d√©truit: ${this.id}`);
    }
};

// === COMPATIBILIT√â GLOBALE ===
// Export global pour acc√®s direct sans namespace
window.BaseWidget = window.WidgetEditor.BaseWidget;